"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@builder.io";
exports.ids = ["vendor-chunks/@builder.io"];
exports.modules = {

/***/ "(rsc)/./node_modules/@builder.io/sdk/dist/index.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/@builder.io/sdk/dist/index.esm.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BehaviorSubject: () => (/* binding */ BehaviorSubject),\n/* harmony export */   Builder: () => (/* binding */ Builder),\n/* harmony export */   BuilderComponent: () => (/* binding */ BuilderComponent),\n/* harmony export */   Subscription: () => (/* binding */ Subscription),\n/* harmony export */   builder: () => (/* binding */ builder),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var hash_sum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hash-sum */ \"(rsc)/./node_modules/hash-sum/hash-sum.js\");\n/* harmony import */ var hash_sum__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hash_sum__WEBPACK_IMPORTED_MODULE_0__);\n\n\n(function() {\n    if (true) return false;\n    function CustomEvent(event, params) {\n        params = params || {\n            bubbles: false,\n            cancelable: false,\n            detail: null\n        };\n        var evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    }\n    window.CustomEvent = CustomEvent;\n})();\nvar isSafari =  false && 0;\nvar isClient = \"undefined\" !== 'undefined';\n// TODO: queue all of these in a debounceNextTick\nfunction nextTick(fn) {\n    // if (typeof process !== 'undefined' && process.nextTick) {\n    //   console.log('process.nextTick?');\n    //   process.nextTick(fn);\n    //   return;\n    // }\n    // FIXME: fix the real safari issue of this randomly not working\n    if (!isClient || isSafari || typeof MutationObserver === 'undefined') {\n        setTimeout(fn);\n        return;\n    }\n    var called = 0;\n    var observer = new MutationObserver(function() {\n        return fn();\n    });\n    var element = document.createTextNode('');\n    observer.observe(element, {\n        characterData: true\n    });\n    // tslint:disable-next-line\n    element.data = String(called = ++called);\n}\nvar PROPERTY_NAME_DENY_LIST = Object.freeze([\n    '__proto__',\n    'prototype',\n    'constructor'\n]);\n// TODO: unit tests\nvar QueryString = /** @class */ function() {\n    function QueryString1() {}\n    QueryString1.parseDeep = function(queryString) {\n        var obj = this.parse(queryString);\n        return this.deepen(obj);\n    };\n    QueryString1.stringifyDeep = function(obj) {\n        var map = this.flatten(obj);\n        return this.stringify(map);\n    };\n    QueryString1.parse = function(queryString) {\n        var query = {};\n        var pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');\n        for(var i = 0; i < pairs.length; i++){\n            var pair = pairs[i].split('=');\n            // TODO: node support?\n            try {\n                query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');\n            } catch (error) {\n            // Ignore malformed URI components\n            }\n        }\n        return query;\n    };\n    QueryString1.stringify = function(map) {\n        var str = '';\n        for(var key in map){\n            if (map.hasOwnProperty(key)) {\n                var value = map[key];\n                if (str) {\n                    str += '&';\n                }\n                str += encodeURIComponent(key) + '=' + encodeURIComponent(value);\n            }\n        }\n        return str;\n    };\n    QueryString1.deepen = function(map) {\n        // FIXME; Should be type Tree = Record<string, string | Tree>\n        // requires a typescript upgrade.\n        var output = {};\n        for(var k in map){\n            var t = output;\n            var parts = k.split('.');\n            var key = parts.pop();\n            for(var _i = 0, parts_1 = parts; _i < parts_1.length; _i++){\n                var part = parts_1[_i];\n                assertAllowedPropertyName(part);\n                t = t[part] = t[part] || {};\n            }\n            t[key] = map[k];\n        }\n        return output;\n    };\n    QueryString1.flatten = function(obj, _current, _res) {\n        if (_res === void 0) {\n            _res = {};\n        }\n        for(var key in obj){\n            var value = obj[key];\n            var newKey = _current ? _current + '.' + key : key;\n            if (value && typeof value === 'object') {\n                this.flatten(value, newKey, _res);\n            } else {\n                _res[newKey] = value;\n            }\n        }\n        return _res;\n    };\n    return QueryString1;\n}();\nfunction assertAllowedPropertyName(name) {\n    if (PROPERTY_NAME_DENY_LIST.indexOf(name) >= 0) throw new Error(\"Property name \\\"\".concat(name, \"\\\" is not allowed\"));\n}\nvar Subscription = /** @class */ function() {\n    function Subscription1(listeners, listener) {\n        this.listeners = listeners;\n        this.listener = listener;\n        this.unsubscribed = false;\n        this.otherSubscriptions = [];\n    }\n    Object.defineProperty(Subscription1.prototype, \"closed\", {\n        get: function() {\n            return this.unsubscribed;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Subscription1.prototype.add = function(subscription) {\n        this.otherSubscriptions.push(subscription);\n    };\n    Subscription1.prototype.unsubscribe = function() {\n        if (this.unsubscribed) {\n            return;\n        }\n        if (this.listener && this.listeners) {\n            var index = this.listeners.indexOf(this.listener);\n            if (index > -1) {\n                this.listeners.splice(index, 1);\n            }\n        }\n        this.otherSubscriptions.forEach(function(sub) {\n            return sub.unsubscribe();\n        });\n        this.unsubscribed = true;\n    };\n    return Subscription1;\n}();\n// TODO: follow minimal basic spec: https://github.com/tc39/proposal-observable\nvar BehaviorSubject = /** @class */ function() {\n    function BehaviorSubject1(value) {\n        var _this = this;\n        this.value = value;\n        this.listeners = [];\n        this.errorListeners = [];\n        this.then = function() {\n            var _a;\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            return (_a = _this.toPromise()).then.apply(_a, args);\n        };\n    }\n    BehaviorSubject1.prototype.next = function(value) {\n        this.value = value;\n        for(var _i = 0, _a = this.listeners; _i < _a.length; _i++){\n            var listener = _a[_i];\n            listener(value);\n        }\n    };\n    // TODO: implement this as PIPE instead\n    BehaviorSubject1.prototype.map = function(fn) {\n        var newSubject = new BehaviorSubject1(fn(this.value));\n        // TODO: on destroy delete these\n        this.subscribe(function(val) {\n            newSubject.next(fn(val));\n        });\n        this.catch(function(err) {\n            newSubject.error(err);\n        });\n        return newSubject;\n    };\n    BehaviorSubject1.prototype.catch = function(errorListener) {\n        this.errorListeners.push(errorListener);\n        return new Subscription(this.errorListeners, errorListener);\n    };\n    BehaviorSubject1.prototype.error = function(error) {\n        for(var _i = 0, _a = this.errorListeners; _i < _a.length; _i++){\n            var listener = _a[_i];\n            listener(error);\n        }\n    };\n    BehaviorSubject1.prototype.subscribe = function(listener, errorListener) {\n        this.listeners.push(listener);\n        if (errorListener) {\n            this.errorListeners.push(errorListener);\n        }\n        return new Subscription(this.listeners, listener);\n    };\n    BehaviorSubject1.prototype.toPromise = function() {\n        var _this = this;\n        return new Promise(function(resolve, reject) {\n            var subscription = _this.subscribe(function(value) {\n                resolve(value);\n                subscription.unsubscribe();\n            }, function(err) {\n                reject(err);\n                subscription.unsubscribe();\n            });\n        });\n    };\n    BehaviorSubject1.prototype.promise = function() {\n        return this.toPromise();\n    };\n    return BehaviorSubject1;\n}();\nvar State = {\n    Pending: 'Pending',\n    Fulfilled: 'Fulfilled',\n    Rejected: 'Rejected'\n};\nfunction isFunction(val) {\n    return val && typeof val === 'function';\n}\nfunction isObject(val) {\n    return val && typeof val === 'object';\n}\nvar TinyPromise = /** @class */ function() {\n    function TinyPromise1(executor) {\n        this._state = State.Pending;\n        this._handlers = [];\n        this._value = null;\n        executor(this._resolve.bind(this), this._reject.bind(this));\n    }\n    TinyPromise1.prototype._resolve = function(x) {\n        var _this = this;\n        if (x instanceof TinyPromise1) {\n            x.then(this._resolve.bind(this), this._reject.bind(this));\n        } else if (isObject(x) || isFunction(x)) {\n            var called_1 = false;\n            try {\n                var thenable = x.then;\n                if (isFunction(thenable)) {\n                    thenable.call(x, function(result) {\n                        if (!called_1) _this._resolve(result);\n                        called_1 = true;\n                        return undefined;\n                    }, function(error) {\n                        if (!called_1) _this._reject(error);\n                        called_1 = true;\n                        return undefined;\n                    });\n                } else {\n                    this._fulfill(x);\n                }\n            } catch (ex) {\n                if (!called_1) {\n                    this._reject(ex);\n                }\n            }\n        } else {\n            this._fulfill(x);\n        }\n    };\n    TinyPromise1.prototype._fulfill = function(result) {\n        var _this = this;\n        this._state = State.Fulfilled;\n        this._value = result;\n        this._handlers.forEach(function(handler) {\n            return _this._callHandler(handler);\n        });\n    };\n    TinyPromise1.prototype._reject = function(error) {\n        var _this = this;\n        this._state = State.Rejected;\n        this._value = error;\n        this._handlers.forEach(function(handler) {\n            return _this._callHandler(handler);\n        });\n    };\n    TinyPromise1.prototype._isPending = function() {\n        return this._state === State.Pending;\n    };\n    TinyPromise1.prototype._isFulfilled = function() {\n        return this._state === State.Fulfilled;\n    };\n    TinyPromise1.prototype._isRejected = function() {\n        return this._state === State.Rejected;\n    };\n    TinyPromise1.prototype._addHandler = function(onFulfilled, onRejected) {\n        this._handlers.push({\n            onFulfilled: onFulfilled,\n            onRejected: onRejected\n        });\n    };\n    TinyPromise1.prototype._callHandler = function(handler) {\n        if (this._isFulfilled() && isFunction(handler.onFulfilled)) {\n            handler.onFulfilled(this._value);\n        } else if (this._isRejected() && isFunction(handler.onRejected)) {\n            handler.onRejected(this._value);\n        }\n    };\n    TinyPromise1.prototype.then = function(onFulfilled, onRejected) {\n        var _this = this;\n        switch(this._state){\n            case State.Pending:\n                {\n                    return new TinyPromise1(function(resolve, reject) {\n                        _this._addHandler(function(value) {\n                            nextTick(function() {\n                                try {\n                                    if (isFunction(onFulfilled)) {\n                                        resolve(onFulfilled(value));\n                                    } else {\n                                        resolve(value);\n                                    }\n                                } catch (ex) {\n                                    reject(ex);\n                                }\n                            });\n                        }, function(error) {\n                            nextTick(function() {\n                                try {\n                                    if (isFunction(onRejected)) {\n                                        resolve(onRejected(error));\n                                    } else {\n                                        reject(error);\n                                    }\n                                } catch (ex) {\n                                    reject(ex);\n                                }\n                            });\n                        });\n                    });\n                }\n            case State.Fulfilled:\n                {\n                    return new TinyPromise1(function(resolve, reject) {\n                        nextTick(function() {\n                            try {\n                                if (isFunction(onFulfilled)) {\n                                    resolve(onFulfilled(_this._value));\n                                } else {\n                                    resolve(_this._value);\n                                }\n                            } catch (ex) {\n                                reject(ex);\n                            }\n                        });\n                    });\n                }\n            case State.Rejected:\n                {\n                    return new TinyPromise1(function(resolve, reject) {\n                        nextTick(function() {\n                            try {\n                                if (isFunction(onRejected)) {\n                                    resolve(onRejected(_this._value));\n                                } else {\n                                    reject(_this._value);\n                                }\n                            } catch (ex) {\n                                reject(ex);\n                            }\n                        });\n                    });\n                }\n        }\n    };\n    return TinyPromise1;\n}();\nvar Promise$1 = typeof Promise !== 'undefined' ? Promise : TinyPromise;\n// Webpack workaround to conditionally require certain external modules\n// only on the server and not bundle them on the client\nvar serverOnlyRequire;\ntry {\n    // tslint:disable-next-line:no-eval\n    serverOnlyRequire = eval('require');\n} catch (err) {\n    // all good\n    serverOnlyRequire = function() {\n        return null;\n    };\n}\nvar serverOnlyRequire$1 = serverOnlyRequire;\nfunction promiseResolve(value) {\n    return new Promise$1(function(resolve) {\n        return resolve(value);\n    });\n}\n// Adapted from https://raw.githubusercontent.com/developit/unfetch/master/src/index.mjs\nfunction tinyFetch(url, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return new Promise$1(function(resolve, reject) {\n        var request = new XMLHttpRequest();\n        request.open(options.method || 'get', url, true);\n        if (options.headers) {\n            for(var i in options.headers){\n                request.setRequestHeader(i, options.headers[i]);\n            }\n        }\n        request.withCredentials = options.credentials === 'include';\n        request.onload = function() {\n            resolve(response());\n        };\n        request.onerror = reject;\n        request.send(options.body);\n        function response() {\n            var keys = [];\n            var all = [];\n            var headers = {};\n            var header = undefined;\n            request.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, function(_match, _key, value) {\n                var key = _key;\n                keys.push(key = key.toLowerCase());\n                all.push([\n                    key,\n                    value\n                ]);\n                header = headers[key];\n                headers[key] = header ? \"\".concat(header, \",\").concat(value) : value;\n                return '';\n            });\n            return {\n                ok: (request.status / 100 | 0) === 2,\n                status: request.status,\n                statusText: request.statusText,\n                url: request.responseURL,\n                clone: response,\n                text: function() {\n                    return promiseResolve(request.responseText);\n                },\n                json: function() {\n                    return promiseResolve(request.responseText).then(JSON.parse);\n                },\n                blob: function() {\n                    return promiseResolve(new Blob([\n                        request.response\n                    ]));\n                },\n                headers: {\n                    keys: function() {\n                        return keys;\n                    },\n                    entries: function() {\n                        return all;\n                    },\n                    get: function(n) {\n                        return headers[n.toLowerCase()];\n                    },\n                    has: function(n) {\n                        return n.toLowerCase() in headers;\n                    }\n                }\n            };\n        }\n    });\n}\nfunction getFetch() {\n    // If fetch is defined, in the browser, via polyfill, or in a Cloudflare worker, use it.\n    var _fetch = undefined;\n    if (globalThis.fetch) {\n        _fetch !== null && _fetch !== void 0 ? _fetch : _fetch = globalThis.fetch;\n    } else if (true) {\n        // If fetch is not defined, in a Node.js environment, use node-fetch.\n        try {\n            // node-fetch@^3 is ESM only, and will throw error on require.\n            _fetch !== null && _fetch !== void 0 ? _fetch : _fetch = serverOnlyRequire$1('node-fetch');\n        } catch (e) {\n            // If node-fetch is not installed, use tiny-fetch.\n            console.warn('node-fetch is not installed. consider polyfilling fetch or installing node-fetch.');\n            console.warn(e);\n        }\n    }\n    // Otherwise, use tiny-fetch.\n    return _fetch !== null && _fetch !== void 0 ? _fetch : tinyFetch;\n}\nfunction assign(target) {\n    var to = Object(target);\n    for(var index = 1; index < arguments.length; index++){\n        var nextSource = arguments[index];\n        if (nextSource != null) {\n            // Skip over if undefined or null\n            for(var nextKey in nextSource){\n                // Avoid bugs when hasOwnProperty is shadowed\n                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                    to[nextKey] = nextSource[nextKey];\n                }\n            }\n        }\n    }\n    return to;\n}\nfunction throttle(func, wait, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var context;\n    var args;\n    var result;\n    var timeout = null;\n    var previous = 0;\n    var later = function() {\n        previous = options.leading === false ? 0 : Date.now();\n        timeout = null;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n    };\n    return function() {\n        var now = Date.now();\n        if (!previous && options.leading === false) previous = now;\n        var remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0 || remaining > wait) {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            previous = now;\n            result = func.apply(context, args);\n            if (!timeout) context = args = null;\n        } else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\nvar camelCaseToKebabCase = function(str) {\n    return str ? str.replace(/([A-Z])/g, function(g) {\n        return \"-\".concat(g[0].toLowerCase());\n    }) : '';\n};\nvar Animator = /** @class */ function() {\n    function Animator1() {}\n    Animator1.prototype.bindAnimations = function(animations) {\n        for(var _i = 0, animations_1 = animations; _i < animations_1.length; _i++){\n            var animation = animations_1[_i];\n            switch(animation.trigger){\n                case 'pageLoad':\n                    this.triggerAnimation(animation);\n                    break;\n                case 'hover':\n                    this.bindHoverAnimation(animation);\n                    break;\n                case 'scrollInView':\n                    this.bindScrollInViewAnimation(animation);\n                    break;\n            }\n        }\n    };\n    Animator1.prototype.warnElementNotPresent = function(id) {\n        console.warn(\"Cannot animate element: element with ID \".concat(id, \" not found!\"));\n    };\n    Animator1.prototype.augmentAnimation = function(animation, element) {\n        var stylesUsed = this.getAllStylesUsed(animation);\n        var computedStyle = getComputedStyle(element);\n        // const computedStyle = getComputedStyle(element);\n        // // FIXME: this will break if original load is in one reponsive size then resize to another hmmm\n        // Need to use transform instead of left since left can change on screen sizes\n        var firstStyles = animation.steps[0].styles;\n        var lastStyles = animation.steps[animation.steps.length - 1].styles;\n        var bothStyles = [\n            firstStyles,\n            lastStyles\n        ];\n        // FIXME: this won't work as expected for augmented animations - may need the editor itself to manage this\n        for(var _i = 0, bothStyles_1 = bothStyles; _i < bothStyles_1.length; _i++){\n            var styles = bothStyles_1[_i];\n            for(var _a = 0, stylesUsed_1 = stylesUsed; _a < stylesUsed_1.length; _a++){\n                var style = stylesUsed_1[_a];\n                if (!(style in styles)) {\n                    styles[style] = computedStyle[style];\n                }\n            }\n        }\n    };\n    Animator1.prototype.getAllStylesUsed = function(animation) {\n        var properties = [];\n        for(var _i = 0, _a = animation.steps; _i < _a.length; _i++){\n            var step = _a[_i];\n            for(var key in step.styles){\n                if (properties.indexOf(key) === -1) {\n                    properties.push(key);\n                }\n            }\n        }\n        return properties;\n    };\n    Animator1.prototype.triggerAnimation = function(animation) {\n        var _this = this;\n        // TODO: do for ALL elements\n        var elements = Array.prototype.slice.call(document.getElementsByClassName(animation.elementId || animation.id || ''));\n        if (!elements.length) {\n            this.warnElementNotPresent(animation.elementId || animation.id || '');\n            return;\n        }\n        Array.from(elements).forEach(function(element) {\n            _this.augmentAnimation(animation, element);\n            // TODO: do this properly, may have other animations of different properties\n            // TODO: only override the properties\n            // TODO: if there is an entrance and hover animation, the transition duration will get effed\n            // element.setAttribute('style', '');\n            // const styledUsed = this.getAllStylesUsed(animation);\n            element.style.transition = 'none';\n            element.style.transitionDelay = '0';\n            assign(element.style, animation.steps[0].styles);\n            // TODO: queue/batch these timeouts\n            // TODO: only include properties explicitly set in the animation\n            // using Object.keys(styles)\n            setTimeout(function() {\n                element.style.transition = \"all \".concat(animation.duration, \"s \").concat(camelCaseToKebabCase(animation.easing));\n                if (animation.delay) {\n                    element.style.transitionDelay = animation.delay + 's';\n                }\n                assign(element.style, animation.steps[1].styles);\n                // TODO: maybe remove/reset transitoin property after animation duration\n                // TODO: queue timers\n                setTimeout(function() {\n                    // TODO: what if has other transition (reset back to what it was)\n                    element.style.transition = '';\n                    element.style.transitionDelay = '';\n                }, (animation.delay || 0) * 1000 + animation.duration * 1000 + 100);\n            });\n        });\n    };\n    Animator1.prototype.bindHoverAnimation = function(animation) {\n        var _this = this;\n        // TODO: is it multiple binding when editing...?\n        // TODO: unbind on element remove\n        // TODO: apply to ALL elements\n        var elements = Array.prototype.slice.call(document.getElementsByClassName(animation.elementId || animation.id || ''));\n        if (!elements.length) {\n            this.warnElementNotPresent(animation.elementId || animation.id || '');\n            return;\n        }\n        Array.from(elements).forEach(function(element) {\n            _this.augmentAnimation(animation, element);\n            var defaultState = animation.steps[0].styles;\n            var hoverState = animation.steps[1].styles;\n            function attachDefaultState() {\n                assign(element.style, defaultState);\n            }\n            function attachHoverState() {\n                assign(element.style, hoverState);\n            }\n            attachDefaultState();\n            element.addEventListener('mouseenter', attachHoverState);\n            element.addEventListener('mouseleave', attachDefaultState);\n            // TODO: queue/batch these timeouts\n            setTimeout(function() {\n                element.style.transition = \"all \".concat(animation.duration, \"s \").concat(camelCaseToKebabCase(animation.easing));\n                if (animation.delay) {\n                    element.style.transitionDelay = animation.delay + 's';\n                }\n            });\n        });\n    };\n    // TODO: unbind on element remove\n    Animator1.prototype.bindScrollInViewAnimation = function(animation) {\n        var _this = this;\n        // TODO: apply to ALL matching elements\n        var elements = Array.prototype.slice.call(document.getElementsByClassName(animation.elementId || animation.id || ''));\n        if (!elements.length) {\n            this.warnElementNotPresent(animation.elementId || animation.id || '');\n            return;\n        }\n        // TODO: if server side rendered and scrolled into view don't animate...\n        Array.from(elements).forEach(function(element) {\n            _this.augmentAnimation(animation, element);\n            var triggered = false;\n            var pendingAnimation = false;\n            function immediateOnScroll() {\n                if (!triggered && isScrolledIntoView(element)) {\n                    triggered = true;\n                    pendingAnimation = true;\n                    setTimeout(function() {\n                        assign(element.style, animation.steps[1].styles);\n                        if (!animation.repeat) {\n                            document.removeEventListener('scroll', onScroll);\n                        }\n                        setTimeout(function() {\n                            pendingAnimation = false;\n                            if (!animation.repeat) {\n                                element.style.transition = '';\n                                element.style.transitionDelay = '';\n                            }\n                        }, (animation.duration + (animation.delay || 0)) * 1000 + 100);\n                    });\n                } else if (animation.repeat && triggered && !pendingAnimation && !isScrolledIntoView(element)) {\n                    // we want to repeat the animation every time the the element is out of view and back again\n                    triggered = false;\n                    assign(element.style, animation.steps[0].styles);\n                }\n            }\n            // TODO: roll all of these in one for more efficiency of checking all the rects\n            var onScroll = throttle(immediateOnScroll, 200, {\n                leading: false\n            });\n            // TODO: fully in view or partially\n            function isScrolledIntoView(elem) {\n                var rect = elem.getBoundingClientRect();\n                var windowHeight = window.innerHeight;\n                var thresholdPercent = (animation.thresholdPercent || 0) / 100;\n                var threshold = thresholdPercent * windowHeight;\n                // TODO: partial in view? or what if element is larger than screen itself\n                return rect.bottom > threshold && rect.top < windowHeight - threshold // Element is peeking top or bottom\n                ;\n            }\n            var defaultState = animation.steps[0].styles;\n            function attachDefaultState() {\n                assign(element.style, defaultState);\n            }\n            attachDefaultState();\n            // TODO: queue/batch these timeouts!\n            setTimeout(function() {\n                element.style.transition = \"all \".concat(animation.duration, \"s \").concat(camelCaseToKebabCase(animation.easing));\n                if (animation.delay) {\n                    element.style.transitionDelay = animation.delay + 's';\n                }\n            });\n            // TODO: one listener for everything\n            document.addEventListener('scroll', onScroll, {\n                capture: true,\n                passive: true\n            });\n            // Do an initial check\n            immediateOnScroll();\n        });\n    };\n    return Animator1;\n}();\n/**\r\n * RegExp to match field-content in RFC 7230 sec 3.2\r\n *\r\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\r\n * field-vchar   = VCHAR / obs-text\r\n * obs-text      = %x80-FF\r\n */ var fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\nvar Cookies = /** @class */ function() {\n    function Cookies1(request, response) {\n        this.request = request;\n        this.response = response;\n    }\n    Cookies1.prototype.get = function(name) {\n        var header = this.request.headers['cookie'];\n        if (!header) {\n            return;\n        }\n        var match = header.match(getPattern(name));\n        if (!match) {\n            return;\n        }\n        var value = match[1];\n        return value;\n    };\n    Cookies1.prototype.set = function(name, value, opts) {\n        var res = this.response;\n        var req = this.request;\n        var headers = res.getHeader('Set-Cookie') || [];\n        // TODO: just make this always true\n        var secure = this.secure !== undefined ? !!this.secure : req.protocol === 'https' || req.connection.encrypted;\n        var cookie = new Cookie(name, value, opts);\n        if (typeof headers === 'string') {\n            headers = [\n                headers\n            ];\n        }\n        if (!secure && opts && opts.secure) {\n            throw new Error('Cannot send secure cookie over unencrypted connection');\n        }\n        cookie.secure = secure;\n        if (opts && 'secure' in opts) {\n            cookie.secure = !!opts.secure;\n        }\n        pushCookie(headers, cookie);\n        var setHeader = res.setHeader;\n        setHeader.call(res, 'Set-Cookie', headers);\n        return this;\n    };\n    return Cookies1;\n}();\nvar Cookie = /** @class */ function() {\n    function Cookie1(name, value, attrs) {\n        this.path = '/';\n        this.domain = undefined;\n        this.httpOnly = true;\n        this.sameSite = false;\n        this.secure = false;\n        this.overwrite = false;\n        this.name = '';\n        this.value = '';\n        if (!fieldContentRegExp.test(name)) {\n            throw new TypeError('argument name is invalid');\n        }\n        if (value && !fieldContentRegExp.test(value)) {\n            throw new TypeError('argument value is invalid');\n        }\n        if (!value) {\n            this.expires = new Date(0);\n        }\n        this.name = name;\n        this.value = value || '';\n        if (attrs.expires) {\n            this.expires = attrs.expires;\n        }\n        if (attrs.secure) {\n            this.secure = attrs.secure;\n        }\n    }\n    Cookie1.prototype.toString = function() {\n        return \"\".concat(this.name, \"=\").concat(this.value);\n    };\n    Cookie1.prototype.toHeader = function() {\n        var header = this.toString();\n        if (this.maxAge) {\n            this.expires = new Date(Date.now() + this.maxAge);\n        }\n        if (this.path) {\n            header += \"; path=\".concat(this.path);\n        }\n        if (this.expires) {\n            header += \"; expires=\".concat(this.expires.toUTCString());\n        }\n        if (this.domain) {\n            header += \"; domain=\".concat(this.domain);\n        }\n        // TODO: samesite=none by default (?)\n        header += \"; SameSite=\".concat(this.sameSite === true ? 'strict' : 'None');\n        // TODO: On by default\n        if (this.secure) {\n            header += '; secure';\n        }\n        if (this.httpOnly) {\n            header += '; httponly';\n        }\n        return header;\n    };\n    return Cookie1;\n}();\nfunction getPattern(name) {\n    return new RegExp(\"(?:^|;) *\".concat(name.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&'), \"=([^;]*)\"));\n}\nfunction pushCookie(headers, cookie) {\n    if (cookie.overwrite) {\n        for(var i = headers.length - 1; i >= 0; i--){\n            if (headers[i].indexOf(\"\".concat(cookie.name, \"=\")) === 0) {\n                headers.splice(i, 1);\n            }\n        }\n    }\n    headers.push(cookie.toHeader());\n}\nfunction omit(obj) {\n    var values = [];\n    for(var _i = 1; _i < arguments.length; _i++){\n        values[_i - 1] = arguments[_i];\n    }\n    var newObject = Object.assign({}, obj);\n    for(var _a = 0, values_1 = values; _a < values_1.length; _a++){\n        var key = values_1[_a];\n        delete newObject[key];\n    }\n    return newObject;\n}\n/**\r\n * @credit https://stackoverflow.com/a/2117523\r\n */ function uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}\n/**\r\n * Slightly cleaner and smaller UUIDs\r\n */ function uuid() {\n    return uuidv4().replace(/-/g, '');\n}\nfunction emptyUrl() {\n    return {\n        query: null,\n        port: null,\n        auth: null,\n        hash: null,\n        host: null,\n        hostname: null,\n        href: null,\n        path: null,\n        pathname: null,\n        protocol: null,\n        search: null,\n        slashes: null\n    };\n}\n// Replacement for `url.parse` using `URL` global object that works with relative paths.\n// Assumptions: this function operates in a NodeJS environment.\nfunction parse$1(url) {\n    var _a;\n    var out = emptyUrl();\n    var u;\n    var pathOnly = url === '' || url[0] === '/';\n    if (pathOnly) {\n        u = new URL(url, 'http://0.0.0.0/');\n        out.href = u.href;\n        out.href = (_a = out.href) === null || _a === void 0 ? void 0 : _a.slice(14); // remove 'http://0.0.0.0/'\n    } else {\n        u = new URL(url);\n        out.href = u.href;\n        out.port = u.port === '' ? null : u.port;\n        out.hash = u.hash === '' ? null : u.hash;\n        out.host = u.host;\n        out.hostname = u.hostname;\n        out.href = u.href;\n        out.pathname = u.pathname;\n        out.protocol = u.protocol;\n        out.slashes = url[u.protocol.length] === '/'; // check if the mimetype is proceeded by a slash\n    }\n    out.search = u.search;\n    out.query = u.search.slice(1); // remove '?'\n    out.path = \"\".concat(u.pathname).concat(u.search);\n    out.pathname = u.pathname;\n    return out;\n}\n/**\r\n * Safe conversion to error type. Intended to be used in catch blocks where the\r\n *  value is not guaranteed to be an error.\r\n *\r\n *  @example\r\n *  try {\r\n *    throw new Error('Something went wrong')\r\n *  }\r\n *  catch (err: unknown) {\r\n *    const error: Error = toError(err)\r\n *  }\r\n */ function toError(err) {\n    if (err instanceof Error) return err;\n    return new Error(String(err));\n}\nvar DEFAULT_API_VERSION = 'v3';\nvar SDK_VERSION = '6.1.2';\nfunction datePlusMinutes(minutes) {\n    if (minutes === void 0) {\n        minutes = 30;\n    }\n    return new Date(Date.now() + minutes * 60000);\n}\nvar isPositiveNumber = function(thing) {\n    return typeof thing === 'number' && !isNaN(thing) && thing >= 0;\n};\nvar isReactNative = typeof navigator === 'object' && navigator.product === 'ReactNative';\nvar validEnvList = [\n    'production',\n    'qa',\n    'test',\n    'development',\n    'dev',\n    'cdn-qa',\n    'cloud',\n    'fast',\n    'cdn2',\n    'cdn-prod'\n];\nfunction getQueryParam(url, variable) {\n    var query = url.split('?')[1] || '';\n    var vars = query.split('&');\n    for(var i = 0; i < vars.length; i++){\n        var pair = vars[i].split('=');\n        if (decodeURIComponent(pair[0]) === variable) {\n            return decodeURIComponent(pair[1]);\n        }\n    }\n    return null;\n}\nvar urlParser = {\n    parse: function(url) {\n        var el = document.createElement('a');\n        el.href = url;\n        var out = {};\n        var props = [\n            'username',\n            'password',\n            'host',\n            'hostname',\n            'port',\n            'protocol',\n            'origin',\n            'pathname',\n            'search',\n            'hash'\n        ];\n        for(var _i = 0, props_1 = props; _i < props_1.length; _i++){\n            var prop = props_1[_i];\n            out[prop] = el[prop];\n        }\n        // IE 11 pathname handling workaround\n        // (IE omits preceeding '/', unlike other browsers)\n        if ((out.pathname || out.pathname === '') && typeof out.pathname === 'string' && out.pathname.indexOf('/') !== 0) {\n            out.pathname = '/' + out.pathname;\n        }\n        return out;\n    }\n};\nvar parse = isReactNative ? function() {\n    return emptyUrl();\n} :  false ? 0 : parse$1;\nfunction setCookie(name, value, expires) {\n    try {\n        var expiresString = '';\n        // TODO: need to know if secure server side\n        if (expires) {\n            expiresString = '; expires=' + expires.toUTCString();\n        }\n        var secure = isBrowser ? location.protocol === 'https:' : true;\n        document.cookie = name + '=' + (value || '') + expiresString + '; path=/' + (secure ? '; secure; SameSite=None' : '');\n    } catch (err) {\n        console.warn('Could not set cookie', err);\n    }\n}\nfunction getCookie(name) {\n    try {\n        return decodeURIComponent(document.cookie.replace(new RegExp('(?:(?:^|.*;)\\\\s*' + encodeURIComponent(name).replace(/[\\-\\.\\+\\*]/g, '\\\\$&') + '\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$'), '$1')) || null;\n    } catch (err) {\n        console.warn('Could not get cookie', err);\n    }\n}\nfunction size(object) {\n    return Object.keys(object).length;\n}\nfunction find(target, callback) {\n    var list = target;\n    // Makes sures is always has an positive integer as length.\n    var length = list.length >>> 0;\n    var thisArg = arguments[1];\n    for(var i = 0; i < length; i++){\n        var element = list[i];\n        if (callback.call(thisArg, element, i, list)) {\n            return element;\n        }\n    }\n}\nvar sessionStorageKey = 'builderSessionId';\nvar localStorageKey = 'builderVisitorId';\nvar isBrowser =  false && 0;\nvar isIframe = isBrowser && window.top !== window.self;\nfunction BuilderComponent(info) {\n    if (info === void 0) {\n        info = {};\n    }\n    return Builder.Component(info);\n}\nvar Builder = /** @class */ function() {\n    function Builder1(apiKey, request, response, forceNewInstance, authToken, apiVersion) {\n        if (apiKey === void 0) {\n            apiKey = null;\n        }\n        if (forceNewInstance === void 0) {\n            forceNewInstance = false;\n        }\n        if (authToken === void 0) {\n            authToken = null;\n        }\n        var _this = this;\n        this.request = request;\n        this.response = response;\n        this.eventsQueue = [];\n        this.throttledClearEventsQueue = throttle(function() {\n            _this.processEventsQueue();\n            // Extend the session cookie\n            _this.setCookie(sessionStorageKey, _this.sessionId, datePlusMinutes(30));\n        }, 5);\n        this.env = 'production';\n        this.sessionId = this.getSessionId();\n        this.targetContent = true;\n        this.contentPerRequest = 1;\n        // TODO: make array or function\n        this.allowCustomFonts = true;\n        this.cookies = null;\n        // TODO: api options object\n        this.cachebust = false;\n        this.overrideParams = '';\n        this.noCache = false;\n        this.preview = false;\n        /**\r\n         * Dictates which API endpoint is used when fetching content. Allows `'content'` and `'query'`.\r\n         * Defaults to `'query'`.\r\n         */ this.apiEndpoint$ = new BehaviorSubject('query');\n        this.apiVersion$ = new BehaviorSubject(undefined);\n        this.canTrack$ = new BehaviorSubject(!this.browserTrackingDisabled);\n        this.hasOverriddenCanTrack = false;\n        this.apiKey$ = new BehaviorSubject(null);\n        this.authToken$ = new BehaviorSubject(null);\n        this.userAttributesChanged = new BehaviorSubject(null);\n        this.editingMode$ = new BehaviorSubject(isIframe);\n        // TODO: decorator to do this stuff with the get/set (how do with typing too? compiler?)\n        this.editingModel$ = new BehaviorSubject(null);\n        this.userAgent = typeof navigator === 'object' && navigator.userAgent || '';\n        this.trackingHooks = [];\n        // Set this to control the userId\n        // TODO: allow changing it mid session and updating existing data to be associated\n        // e.g. for when a user navigates and then logs in\n        this.visitorId = this.getVisitorId();\n        this.autoTrack = !Builder1.isBrowser ? false : !this.isDevelopmentEnv && !(Builder1.isBrowser && location.search.indexOf('builder.preview=') !== -1);\n        this.trackingUserAttributes = {};\n        this.blockContentLoading = '';\n        this.observersByKey = {};\n        this.noEditorUpdates = {};\n        this.overrides = {};\n        this.queryOptions = {};\n        this.getContentQueue = null;\n        this.priorContentQueue = null;\n        this.testCookiePrefix = 'builder.tests';\n        this.cookieQueue = [];\n        // TODO: use a window variable for this perhaps, e.g. bc webcomponents may be loading builder twice\n        // with it's and react (use rollup build to fix)\n        if (Builder1.isBrowser && !forceNewInstance && Builder1.singletonInstance) {\n            return Builder1.singletonInstance;\n        }\n        if (this.request && this.response) {\n            this.setUserAgent(this.request.headers['user-agent'] || '');\n            this.cookies = new Cookies(this.request, this.response);\n        }\n        if (apiKey) {\n            this.apiKey = apiKey;\n        }\n        if (apiVersion) {\n            this.apiVersion = apiVersion;\n        }\n        if (authToken) {\n            this.authToken = authToken;\n        }\n        if (isBrowser) {\n            if (Builder1.isEditing) {\n                this.bindMessageListeners();\n                parent.postMessage({\n                    type: 'builder.animatorOptions',\n                    data: {\n                        options: {\n                            version: 2\n                        }\n                    }\n                }, '*');\n            }\n        // TODO: postmessage to parent the builder info for every package\n        // type: 'builder.sdk', data: { name: '@builder.io/react', version: '0.1.23' }\n        // (window as any).BUILDER_VERSION = Builder.VERSION;\n        // Ensure always one Builder global singleton\n        // TODO: some people won't want this, e.g. rakuten\n        // Maybe hide this behind symbol or on document, etc\n        // if ((window as any).Builder) {\n        //   Builder.components = (window as any).Builder.components;\n        // } else {\n        //   (window as any).Builder = Builder;\n        // }\n        }\n        if (isIframe) {\n            this.messageFrameLoaded();\n        }\n        // TODO: on destroy clear subscription\n        this.canTrack$.subscribe(function(value) {\n            if (value) {\n                if (typeof sessionStorage !== 'undefined') {\n                    try {\n                        if (!sessionStorage.getItem(sessionStorageKey)) {\n                            sessionStorage.setItem(sessionStorageKey, _this.sessionId);\n                        }\n                    } catch (err) {\n                        console.debug('Session storage error', err);\n                    }\n                }\n                if (_this.eventsQueue.length) {\n                    _this.throttledClearEventsQueue();\n                }\n                if (_this.cookieQueue.length) {\n                    _this.cookieQueue.forEach(function(item) {\n                        _this.setCookie(item[0], item[1]);\n                    });\n                    _this.cookieQueue.length = 0;\n                }\n            }\n        });\n        if (isBrowser) {\n            // TODO: defer so subclass constructor runs and injects location service\n            this.setTestsFromUrl();\n            // TODO: do this on every request send?\n            this.getOverridesFromQueryString();\n            // cookies used in personalization container script, so need to set before hydration to match script result\n            var userAttrCookie = this.getCookie(Builder1.attributesCookieName);\n            if (userAttrCookie) {\n                try {\n                    var attributes = JSON.parse(userAttrCookie);\n                    this.setUserAttributes(attributes);\n                } catch (err) {\n                    console.debug('Error parsing user attributes cookie', err);\n                }\n            }\n        }\n    }\n    Builder1.register = function(type, info) {\n        if (type === 'plugin') {\n            info = this.serializeIncludingFunctions(info, true);\n        }\n        // TODO: all must have name and can't conflict?\n        var typeList = this.registry[type];\n        if (!typeList) {\n            typeList = this.registry[type] = [];\n        }\n        typeList.push(info);\n        if (Builder1.isBrowser) {\n            var message = {\n                type: 'builder.register',\n                data: {\n                    type: type,\n                    info: info\n                }\n            };\n            try {\n                parent.postMessage(message, '*');\n                if (parent !== window) {\n                    window.postMessage(message, '*');\n                }\n            } catch (err) {\n                console.debug('Could not postmessage', err);\n            }\n        }\n        this.registryChange.next(this.registry);\n    };\n    Builder1.registerEditor = function(info) {\n        if (Builder1.isBrowser) {\n            window.postMessage({\n                type: 'builder.registerEditor',\n                data: omit(info, 'component')\n            }, '*');\n            var hostname = location.hostname;\n            if (!Builder1.isTrustedHost(hostname)) {\n                console.error('Builder.registerEditor() called in the wrong environment! You cannot load custom editors from your app, they must be loaded through the Builder.io app itself. Follow the readme here for more details: https://github.com/builderio/builder/tree/master/plugins/cloudinary or contact chat us in our Spectrum community for help: https://spectrum.chat/builder');\n            }\n        }\n        this.editors.push(info);\n    };\n    Builder1.registerPlugin = function(info) {\n        this.plugins.push(info);\n    };\n    Builder1.registerAction = function(action) {\n        var _a;\n        this.actions.push(action);\n        if (Builder1.isBrowser) {\n            var actionClone = JSON.parse(JSON.stringify(action));\n            if (action.action) {\n                actionClone.action = action.action.toString();\n            }\n            (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\n                type: 'builder.registerAction',\n                data: actionClone\n            }, '*');\n        }\n    };\n    Builder1.registerTrustedHost = function(host) {\n        this.trustedHosts.push(host);\n    };\n    /**\r\n     * @param context @type {import('isolated-vm').Context}\r\n     * Use this function to control the execution context of custom code on the server.\r\n     * const ivm = require('isolated-vm');\r\n     * const isolate = new ivm.Isolate({ memoryLimit: 128 });\r\n     * const context = isolate.createContextSync();\r\n     * Builder.setServerContext(context);\r\n     */ Builder1.setServerContext = function(context) {\n        this.serverContext = context;\n    };\n    Builder1.isTrustedHost = function(hostname) {\n        var isTrusted = this.trustedHosts.findIndex(function(trustedHost) {\n            return trustedHost.startsWith('*.') ? hostname.endsWith(trustedHost.slice(1)) : trustedHost === hostname;\n        }) > -1;\n        return isTrusted;\n    };\n    Builder1.isTrustedHostForEvent = function(event) {\n        if (event.origin === 'null') {\n            return false;\n        }\n        var url = parse(event.origin);\n        return url.hostname && Builder1.isTrustedHost(url.hostname);\n    };\n    Builder1.runAction = function(action) {\n        // TODO\n        var actionObject = typeof action === 'string' ? find(this.actions, function(item) {\n            return item.name === action;\n        }) : action;\n        if (!actionObject) {\n            throw new Error(\"Action not found: \".concat(action));\n        }\n    };\n    Builder1.fields = function(name, fields) {\n        var _a;\n        (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\n            type: 'builder.fields',\n            data: {\n                name: name,\n                fields: fields\n            }\n        }, '*');\n    };\n    /**\r\n     * @deprecated\r\n     * @hidden\r\n     *\r\n     * Use Builder.register('editor.settings', {}) instead.\r\n     */ Builder1.set = function(settings) {\n        Builder1.register('editor.settings', settings);\n    };\n    Builder1.import = function(packageName) {\n        if (!Builder1.isBrowser) {\n            // TODO: server side support *maybe*\n            console.warn('Builder.import used on the server - this should only be used in the browser');\n            return;\n        }\n        var System = window.System;\n        if (!System) {\n            console.warn('System.js not available. Please include System.js when using Builder.import');\n            return;\n        }\n        return System.import(\"https://cdn.builder.io/systemjs/\".concat(packageName));\n    };\n    Object.defineProperty(Builder1, \"editingPage\", {\n        // useCdnApi = false;\n        get: function() {\n            return this._editingPage;\n        },\n        set: function(editingPage) {\n            this._editingPage = editingPage;\n            if (isBrowser && isIframe) {\n                if (editingPage) {\n                    document.body.classList.add('builder-editing-page');\n                } else {\n                    document.body.classList.remove('builder-editing-page');\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Builder1.serializeIncludingFunctions = function(info, isForPlugin) {\n        var serializeFn = function(fnValue) {\n            var fnStr = fnValue.toString().trim();\n            // we need to account for a few different fn syntaxes:\n            // 1. `function name(args) => {code}`\n            // 2. `name(args) => {code}`\n            // 3. `(args) => {}`\n            // 4. `args => {}`\n            // 5. `async function(args) {code}`\n            // 6. `async (args) => {}`\n            // 7. `async args => {}`\n            var isArrowWithoutParens = /^[a-zA-Z0-9_]+\\s*=>/i.test(fnStr);\n            var appendFunction = !fnStr.startsWith('function') && !fnStr.startsWith('async') && !fnStr.startsWith('(') && !isArrowWithoutParens;\n            return \"return (\".concat(appendFunction ? 'function ' : '').concat(fnStr, \").apply(this, arguments)\");\n        };\n        var objToReturn = JSON.parse(JSON.stringify(info, function(key, value) {\n            var shouldNotSerializeFn = isForPlugin && key === 'onSave';\n            if (typeof value === 'function' && !shouldNotSerializeFn) {\n                return serializeFn(value);\n            }\n            return value;\n        }));\n        if (isForPlugin) {\n            objToReturn.onSave = info.onSave;\n        }\n        return objToReturn;\n    };\n    Builder1.prepareComponentSpecToSend = function(spec) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, this.serializeIncludingFunctions(spec)), {\n            class: undefined\n        });\n    };\n    Builder1.registerBlock = function(component, options) {\n        this.registerComponent(component, options);\n    };\n    Builder1.registerComponent = function(component, options) {\n        var _a;\n        var spec = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            class: component\n        }, component.builderOptions), options);\n        this.addComponent(spec);\n        var editable = options.models && this.singletonInstance.editingModel ? isBrowser && options.models.includes(this.singletonInstance.editingModel) : isBrowser;\n        if (editable) {\n            var sendSpec = this.prepareComponentSpecToSend(spec);\n            (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\n                type: 'builder.registerComponent',\n                data: sendSpec\n            }, '*');\n        }\n    };\n    Builder1.addComponent = function(component) {\n        var current = find(this.components, function(item) {\n            return item.name === component.name;\n        });\n        if (current) {\n            // FIXME: why does sometimes we get an extra post without class - probably\n            // from postMessage handler wrong in some place\n            if (current.class && !component.class) {\n                return;\n            }\n            this.components.splice(this.components.indexOf(current), 1, component);\n        } else {\n            this.components.push(component);\n        }\n    };\n    // TODO: style guide, etc off this system as well?\n    Builder1.component = function(info) {\n        var _this = this;\n        if (info === void 0) {\n            info = {};\n        }\n        return function(component) {\n            var _a;\n            var spec = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, info), {\n                class: component\n            });\n            if (!spec.name) {\n                spec.name = component.name;\n            }\n            _this.addComponent(spec);\n            var sendSpec = _this.prepareComponentSpecToSend(spec);\n            // TODO: serialize component name and inputs\n            if (isBrowser) {\n                (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\n                    type: 'builder.registerComponent',\n                    data: sendSpec\n                }, '*');\n            }\n            return component;\n        };\n    };\n    Object.defineProperty(Builder1, \"Component\", {\n        get: function() {\n            return this.component;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Builder1.prototype.processEventsQueue = function() {\n        if (!this.eventsQueue.length) {\n            return;\n        }\n        var events = this.eventsQueue;\n        this.eventsQueue = [];\n        var fullUserAttributes = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, Builder1.overrideUserAttributes), this.trackingUserAttributes);\n        for(var _i = 0, events_1 = events; _i < events_1.length; _i++){\n            var event_1 = events_1[_i];\n            if (!event_1.data.metadata) {\n                event_1.data.metadata = {};\n            }\n            if (!event_1.data.metadata.user) {\n                event_1.data.metadata.user = {};\n            }\n            Object.assign(event_1.data.metadata.user, fullUserAttributes, event_1.data.metadata.user);\n        }\n        var host = this.host;\n        getFetch()(\"\".concat(host, \"/api/v1/track\"), {\n            method: 'POST',\n            body: JSON.stringify({\n                events: events\n            }),\n            headers: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n                'content-type': 'application/json'\n            }, this.getSdkHeaders()),\n            mode: 'cors'\n        }).catch(function() {\n        // Not the end of the world\n        });\n    };\n    Object.defineProperty(Builder1.prototype, \"browserTrackingDisabled\", {\n        get: function() {\n            return Builder1.isBrowser && Boolean(window.builderNoTrack || !navigator.cookieEnabled);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Builder1.prototype, \"canTrack\", {\n        get: function() {\n            return this.canTrack$.value;\n        },\n        set: function(canTrack) {\n            this.hasOverriddenCanTrack = true;\n            if (this.canTrack !== canTrack) {\n                this.canTrack$.next(canTrack);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Builder1.prototype, \"apiVersion\", {\n        get: function() {\n            return this.apiVersion$.value;\n        },\n        set: function(apiVersion) {\n            if (this.apiVersion !== apiVersion) {\n                this.apiVersion$.next(apiVersion);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Builder1.prototype, \"apiEndpoint\", {\n        get: function() {\n            return this.apiEndpoint$.value;\n        },\n        set: function(apiEndpoint) {\n            if (this.apiEndpoint !== apiEndpoint) {\n                this.apiEndpoint$.next(apiEndpoint);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Builder1.prototype, \"editingMode\", {\n        get: function() {\n            return this.editingMode$.value;\n        },\n        set: function(value) {\n            if (value !== this.editingMode) {\n                this.editingMode$.next(value);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Builder1.prototype, \"editingModel\", {\n        get: function() {\n            return this.editingModel$.value;\n        },\n        set: function(value) {\n            if (value !== this.editingModel) {\n                this.editingModel$.next(value);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Builder1.prototype.findParentElement = function(target, callback, checkElement) {\n        if (checkElement === void 0) {\n            checkElement = true;\n        }\n        if (!(target instanceof HTMLElement)) {\n            return null;\n        }\n        var parent1 = checkElement ? target : target.parentElement;\n        do {\n            if (!parent1) {\n                return null;\n            }\n            var matches = callback(parent1);\n            if (matches) {\n                return parent1;\n            }\n        }while (parent1 = parent1.parentElement);\n        return null;\n    };\n    Builder1.prototype.findBuilderParent = function(target) {\n        return this.findParentElement(target, function(el) {\n            var id = el.getAttribute('builder-id') || el.id;\n            return Boolean(id && id.indexOf('builder-') === 0);\n        });\n    };\n    Builder1.prototype.setUserAgent = function(userAgent) {\n        this.userAgent = userAgent || '';\n    };\n    /**\r\n     * Set a hook to modify events being tracked from builder, such as impressions and clicks\r\n     *\r\n     * For example, to track the model ID of each event associated with content for querying\r\n     * by mode, you can do\r\n     *\r\n     *    builder.setTrackingHook((event, context) => {\r\n     *      if (context.content) {\r\n     *        event.data.metadata.modelId = context.content.modelId\r\n     *      }\r\n     *    })\r\n     */ Builder1.prototype.setTrackingHook = function(hook) {\n        this.trackingHooks.push(hook);\n    };\n    Builder1.prototype.track = function(eventName, properties, context) {\n        if (properties === void 0) {\n            properties = {};\n        }\n        // TODO: queue up track requests and fire them off when canTrack set to true - otherwise may get lots of clicks with no impressions\n        if (isIframe || !isBrowser || Builder1.isPreviewing) {\n            return;\n        }\n        var apiKey = this.apiKey;\n        if (!apiKey) {\n            console.error('Builder integration error: Looks like the Builder SDK has not been initialized properly (your API key has not been set). Make sure you are calling `builder.init(\"«YOUR-API-KEY»\");` as early as possible in your application\\'s code.');\n            return;\n        }\n        var eventData = JSON.parse(JSON.stringify({\n            type: eventName,\n            data: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, omit(properties, 'meta')), {\n                metadata: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n                    sdkVersion: Builder1.VERSION,\n                    url: location.href\n                }, properties.meta), properties.metadata),\n                ownerId: apiKey,\n                userAttributes: this.getUserAttributes(),\n                sessionId: this.sessionId,\n                visitorId: this.visitorId\n            })\n        }));\n        for(var _i = 0, _a = this.trackingHooks; _i < _a.length; _i++){\n            var hook = _a[_i];\n            var returnValue = hook(eventData, context || {});\n            if (returnValue) {\n                eventData = returnValue;\n            }\n        }\n        // batch events\n        this.eventsQueue.push(eventData);\n        if (this.canTrack) {\n            this.throttledClearEventsQueue();\n        }\n    };\n    Builder1.prototype.getSessionId = function() {\n        var _this = this;\n        var sessionId = null;\n        try {\n            if (Builder1.isBrowser && typeof sessionStorage !== 'undefined') {\n                sessionId = this.getCookie(sessionStorageKey);\n            }\n        } catch (err) {\n            console.debug('Session storage error', err);\n        // It's ok\n        }\n        if (!sessionId) {\n            sessionId = uuid();\n        }\n        // Give the app a second to start up and set canTrack to false if needed\n        if (Builder1.isBrowser) {\n            setTimeout(function() {\n                try {\n                    if (_this.canTrack) {\n                        _this.setCookie(sessionStorageKey, sessionId, datePlusMinutes(30));\n                    }\n                } catch (err) {\n                    console.debug('Cookie setting error', err);\n                }\n            });\n        }\n        return sessionId;\n    };\n    Builder1.prototype.getVisitorId = function() {\n        var _this = this;\n        if (this.visitorId) {\n            return this.visitorId;\n        }\n        var visitorId = null;\n        try {\n            if (Builder1.isBrowser && typeof localStorage !== 'undefined') {\n                // TODO: cookie instead?\n                visitorId = localStorage.getItem(localStorageKey);\n            }\n        } catch (err) {\n            console.debug('Local storage error', err);\n        // It's ok\n        }\n        if (!visitorId) {\n            visitorId = uuid();\n        }\n        this.visitorId = visitorId;\n        // Give the app a second to start up and set canTrack to false if needed\n        if (Builder1.isBrowser) {\n            setTimeout(function() {\n                try {\n                    if (_this.canTrack && typeof localStorage !== 'undefined' && visitorId) {\n                        localStorage.setItem(localStorageKey, visitorId);\n                    }\n                } catch (err) {\n                    console.debug('Session storage error', err);\n                }\n            });\n        }\n        return visitorId;\n    };\n    Builder1.prototype.trackImpression = function(contentId, variationId, properties, context) {\n        if (isIframe || !isBrowser || Builder1.isPreviewing) {\n            return;\n        }\n        // TODO: use this.track method\n        this.track('impression', {\n            contentId: contentId,\n            variationId: variationId !== contentId ? variationId : undefined,\n            metadata: properties\n        }, context);\n    };\n    Builder1.prototype.trackConversion = function(amount, contentId, variationId, customProperties, context) {\n        if (isIframe || !isBrowser || Builder1.isPreviewing) {\n            return;\n        }\n        var meta = typeof contentId === 'object' ? contentId : customProperties;\n        var useContentId = typeof contentId === 'string' ? contentId : undefined;\n        this.track('conversion', {\n            amount: amount,\n            variationId: variationId,\n            meta: meta,\n            contentId: useContentId\n        }, context);\n    };\n    Object.defineProperty(Builder1.prototype, \"isDevelopmentEnv\", {\n        // TODO: set this for QA\n        get: function() {\n            // Automatic determining of development environment\n            return Builder1.isIframe || Builder1.isBrowser && (location.hostname === 'localhost' || location.port !== '') || this.env !== 'production';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Builder1.prototype.trackInteraction = function(contentId, variationId, alreadyTrackedOne, event, context) {\n        if (alreadyTrackedOne === void 0) {\n            alreadyTrackedOne = false;\n        }\n        if (isIframe || !isBrowser || Builder1.isPreviewing) {\n            return;\n        }\n        var target = event && event.target;\n        var targetBuilderElement = target && this.findBuilderParent(target);\n        function round(num) {\n            return Math.round(num * 1000) / 1000;\n        }\n        var metadata = {};\n        if (event) {\n            var clientX = event.clientX, clientY = event.clientY;\n            if (target) {\n                var targetRect = target.getBoundingClientRect();\n                var xOffset = clientX - targetRect.left;\n                var yOffset = clientY - targetRect.top;\n                var xRatio = round(xOffset / targetRect.width);\n                var yRatio = round(yOffset / targetRect.height);\n                metadata.targetOffset = {\n                    x: xRatio,\n                    y: yRatio\n                };\n            }\n            if (targetBuilderElement) {\n                var targetRect = targetBuilderElement.getBoundingClientRect();\n                var xOffset = clientX - targetRect.left;\n                var yOffset = clientY - targetRect.top;\n                var xRatio = round(xOffset / targetRect.width);\n                var yRatio = round(yOffset / targetRect.height);\n                metadata.builderTargetOffset = {\n                    x: xRatio,\n                    y: yRatio\n                };\n            }\n        }\n        var builderId = targetBuilderElement && (targetBuilderElement.getAttribute('builder-id') || targetBuilderElement.id);\n        if (builderId && targetBuilderElement) {\n            metadata.builderElementIndex = [].slice.call(document.getElementsByClassName(builderId)).indexOf(targetBuilderElement);\n        }\n        this.track('click', {\n            contentId: contentId,\n            metadata: metadata,\n            variationId: variationId !== contentId ? variationId : undefined,\n            unique: !alreadyTrackedOne,\n            targetBuilderElement: builderId || undefined\n        }, context);\n    };\n    Builder1.prototype.component = function(info) {\n        if (info === void 0) {\n            info = {};\n        }\n        return Builder1.component(info);\n    };\n    Object.defineProperty(Builder1.prototype, \"apiKey\", {\n        get: function() {\n            return this.apiKey$.value;\n        },\n        set: function(key) {\n            this.apiKey$.next(key);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Builder1.prototype, \"authToken\", {\n        get: function() {\n            return this.authToken$.value;\n        },\n        set: function(token) {\n            this.authToken$.next(token);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Builder1.prototype.modifySearch = function(search) {\n        return search.replace(/(^|&|\\?)(builder_.*?)=/gi, function(_match, group1, group2) {\n            return group1 + group2.replace(/_/g, '.') + '=';\n        });\n    };\n    Builder1.prototype.setTestsFromUrl = function() {\n        var search = this.getLocation().search;\n        try {\n            var params = QueryString.parseDeep(this.modifySearch(search || '').substr(1));\n            var tests = params.builder && params.builder.tests;\n            if (tests && typeof tests === 'object') {\n                for(var key in tests){\n                    if (tests.hasOwnProperty(key)) {\n                        this.setTestCookie(key, tests[key]);\n                    }\n                }\n            }\n        } catch (e) {\n            console.debug('Error parsing tests from URL', e);\n        }\n    };\n    Builder1.prototype.resetOverrides = function() {\n        // Ugly - pass down instances per request instead using react context\n        // or use builder.get('foo', { req, res }) in react...........\n        Builder1.overrideUserAttributes = {};\n        this.cachebust = false;\n        this.noCache = false;\n        this.preview = false;\n        this.editingModel = null;\n        this.overrides = {};\n        this.env = 'production';\n        this.userAgent = '';\n        this.request = undefined;\n        this.response = undefined;\n    };\n    Builder1.prototype.getOverridesFromQueryString = function() {\n        var location1 = this.getLocation();\n        try {\n            var params = QueryString.parseDeep(this.modifySearch(location1.search || '').substr(1));\n            var builder1 = params.builder;\n            if (builder1) {\n                var userAttributes = builder1.userAttributes, overrides = builder1.overrides, env = builder1.env, host = builder1.host, api = builder1.api, cachebust = builder1.cachebust, noCache = builder1.noCache, preview = builder1.preview, editing = builder1.editing, frameEditing = builder1.frameEditing, options = builder1.options, overrideParams = builder1.params;\n                if (userAttributes) {\n                    this.setUserAttributes(userAttributes);\n                }\n                if (options) {\n                    // picking only locale, includeRefs, and enrich for now\n                    this.queryOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, options.locale && {\n                        locale: options.locale\n                    }), options.includeRefs && {\n                        includeRefs: options.includeRefs\n                    }), options.enrich && {\n                        enrich: options.enrich\n                    });\n                }\n                if (overrides) {\n                    this.overrides = overrides;\n                }\n                if (validEnvList.indexOf(env || api) > -1) {\n                    this.env = env || api;\n                }\n                if (Builder1.isEditing) {\n                    var editingModel = frameEditing || editing || preview;\n                    if (editingModel && editingModel !== 'true') {\n                        this.editingModel = editingModel;\n                    }\n                }\n                if (cachebust) {\n                    this.cachebust = true;\n                }\n                if (noCache) {\n                    this.noCache = true;\n                }\n                if (preview) {\n                    this.preview = true;\n                }\n                if (params) {\n                    this.overrideParams = overrideParams;\n                }\n            }\n        } catch (e) {\n            console.debug('Error parsing overrides from URL', e);\n        }\n    };\n    Builder1.prototype.messageFrameLoaded = function() {\n        var _a;\n        (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\n            type: 'builder.loaded',\n            data: {\n                value: true\n            }\n        }, '*');\n    };\n    Builder1.prototype.bindMessageListeners = function() {\n        var _this = this;\n        addEventListener('message', function(event) {\n            var _a, _b, _c, _d;\n            var isTrusted = Builder1.isTrustedHostForEvent(event);\n            if (!isTrusted) return;\n            var data = event.data;\n            if (data) {\n                switch(data.type){\n                    case 'builder.ping':\n                        {\n                            (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\n                                type: 'builder.pong',\n                                data: {}\n                            }, '*');\n                            break;\n                        }\n                    case 'builder.register':\n                        {\n                            // TODO: possibly do this for all...\n                            if (event.source === window) {\n                                break;\n                            }\n                            var options = data.data;\n                            if (!options) {\n                                break;\n                            }\n                            var type = options.type, info = options.info;\n                            // TODO: all must have name and can't conflict?\n                            var typeList = Builder1.registry[type];\n                            if (!typeList) {\n                                typeList = Builder1.registry[type] = [];\n                            }\n                            typeList.push(info);\n                            Builder1.registryChange.next(Builder1.registry);\n                            break;\n                        }\n                    case 'builder.settingsChange':\n                        {\n                            // TODO: possibly do this for all...\n                            if (event.source === window) {\n                                break;\n                            }\n                            var settings = data.data;\n                            if (!settings) {\n                                break;\n                            }\n                            Object.assign(Builder1.settings, settings);\n                            Builder1.settingsChange.next(Builder1.settings);\n                            break;\n                        }\n                    case 'builder.registerEditor':\n                        {\n                            // TODO: possibly do this for all...\n                            if (event.source === window) {\n                                break;\n                            }\n                            var info_1 = data.data;\n                            if (!info_1) {\n                                break;\n                            }\n                            var hasComponent_1 = !!info_1.component;\n                            Builder1.editors.every(function(thisInfo, index) {\n                                if (info_1.name === thisInfo.name) {\n                                    if (thisInfo.component && !hasComponent_1) {\n                                        return false;\n                                    } else {\n                                        Builder1.editors[index] = thisInfo;\n                                    }\n                                    return false;\n                                }\n                                return true;\n                            });\n                            break;\n                        }\n                    case 'builder.triggerAnimation':\n                        {\n                            Builder1.animator.triggerAnimation(data.data);\n                            break;\n                        }\n                    case 'builder.contentUpdate':\n                        var key = data.data.key || data.data.alias || data.data.entry || data.data.modelName;\n                        var contentData = data.data.data; // hmmm...\n                        var observer = _this.observersByKey[key];\n                        if (observer && !_this.noEditorUpdates[key]) {\n                            observer.next([\n                                contentData\n                            ]);\n                        }\n                        break;\n                    case 'builder.getComponents':\n                        (_b = window.parent) === null || _b === void 0 ? void 0 : _b.postMessage({\n                            type: 'builder.components',\n                            data: Builder1.components.map(function(item) {\n                                return Builder1.prepareComponentSpecToSend(item);\n                            })\n                        }, '*');\n                        break;\n                    case 'builder.editingModel':\n                        _this.editingModel = data.data.model;\n                        break;\n                    case 'builder.registerComponent':\n                        var componentData = data.data;\n                        Builder1.addComponent(componentData);\n                        break;\n                    case 'builder.blockContentLoading':\n                        if (typeof data.data.model === 'string') {\n                            _this.blockContentLoading = data.data.model;\n                        }\n                        break;\n                    case 'builder.editingMode':\n                        var editingMode = data.data;\n                        if (editingMode) {\n                            _this.editingMode = true;\n                            document.body.classList.add('builder-editing');\n                        } else {\n                            _this.editingMode = false;\n                            document.body.classList.remove('builder-editing');\n                        }\n                        break;\n                    case 'builder.editingPageMode':\n                        var editingPageMode = data.data;\n                        Builder1.editingPage = editingPageMode;\n                        break;\n                    case 'builder.overrideUserAttributes':\n                        var userAttributes = data.data;\n                        assign(Builder1.overrideUserAttributes, userAttributes);\n                        _this.flushGetContentQueue(true);\n                        break;\n                    case 'builder.overrideTestGroup':\n                        var _e = data.data, variationId = _e.variationId, contentId = _e.contentId;\n                        if (variationId && contentId) {\n                            _this.setTestCookie(contentId, variationId);\n                            _this.flushGetContentQueue(true);\n                        }\n                        break;\n                    case 'builder.evaluate':\n                        {\n                            var text = data.data.text;\n                            var args = data.data.arguments || [];\n                            var id_1 = data.data.id;\n                            // tslint:disable-next-line:no-function-constructor-with-string-args\n                            var fn = new Function(text);\n                            var result = void 0;\n                            var error = null;\n                            try {\n                                result = fn.apply(_this, args);\n                            } catch (err) {\n                                error = toError(err);\n                            }\n                            if (error) {\n                                (_c = window.parent) === null || _c === void 0 ? void 0 : _c.postMessage({\n                                    type: 'builder.evaluateError',\n                                    data: {\n                                        id: id_1,\n                                        error: error.message\n                                    }\n                                }, '*');\n                            } else {\n                                if (result && typeof result.then === 'function') {\n                                    result.then(function(finalResult) {\n                                        var _a;\n                                        (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\n                                            type: 'builder.evaluateResult',\n                                            data: {\n                                                id: id_1,\n                                                result: finalResult\n                                            }\n                                        }, '*');\n                                    }).catch(console.error);\n                                } else {\n                                    (_d = window.parent) === null || _d === void 0 ? void 0 : _d.postMessage({\n                                        type: 'builder.evaluateResult',\n                                        data: {\n                                            result: result,\n                                            id: id_1\n                                        }\n                                    }, '*');\n                                }\n                            }\n                            break;\n                        }\n                }\n            }\n        });\n    };\n    Object.defineProperty(Builder1.prototype, \"defaultCanTrack\", {\n        get: function() {\n            return Boolean(Builder1.isBrowser && navigator.userAgent.trim() && !navigator.userAgent.match(/bot|crawler|spider|robot|crawling|prerender|google|baidu|bing|msn|duckduckbot|teoma|slurp|yandex|phantom|headless|selenium|puppeteer/i) && !this.browserTrackingDisabled);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Builder1.prototype.init = function(apiKey, canTrack, req, res, authToken, apiVersion) {\n        if (canTrack === void 0) {\n            canTrack = this.defaultCanTrack;\n        }\n        if (req) {\n            this.request = req;\n        }\n        if (res) {\n            this.response = res;\n        }\n        if (!this.hasOverriddenCanTrack) {\n            this.canTrack = canTrack;\n        }\n        this.apiKey = apiKey;\n        if (authToken) {\n            this.authToken = authToken;\n        }\n        if (apiVersion) {\n            this.apiVersion = apiVersion;\n        }\n        return this;\n    };\n    Object.defineProperty(Builder1.prototype, \"previewingModel\", {\n        get: function() {\n            var search = this.getLocation().search;\n            var params = QueryString.parse((search || '').substr(1));\n            return params['builder.preview'];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // TODO: allow adding location object as property and/or in constructor\n    Builder1.prototype.getLocation = function() {\n        var _a;\n        var parsedLocation = {};\n        // in ssr mode\n        if (this.request) {\n            parsedLocation = parse((_a = this.request.url) !== null && _a !== void 0 ? _a : '');\n        } else if (typeof location === 'object') {\n            // in the browser\n            parsedLocation = parse(location.href);\n        }\n        // IE11 bug with parsed path being empty string\n        // causes issues with our user targeting\n        if (parsedLocation.pathname === '') {\n            parsedLocation.pathname = '/';\n        }\n        return parsedLocation;\n    };\n    Builder1.prototype.getUserAttributes = function(userAgent) {\n        if (userAgent === void 0) {\n            userAgent = this.userAgent || '';\n        }\n        var isMobile = {\n            Android: function() {\n                return userAgent.match(/Android/i);\n            },\n            BlackBerry: function() {\n                return userAgent.match(/BlackBerry/i);\n            },\n            iOS: function() {\n                return userAgent.match(/iPhone|iPod/i);\n            },\n            Opera: function() {\n                return userAgent.match(/Opera Mini/i);\n            },\n            Windows: function() {\n                return userAgent.match(/IEMobile/i) || userAgent.match(/WPDesktop/i);\n            },\n            any: function() {\n                return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows();\n            }\n        };\n        var isTablet = userAgent.match(/Tablet|iPad/i);\n        var url = this.getLocation();\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            urlPath: url.pathname,\n            host: url.host || url.hostname,\n            // TODO: maybe an option to choose to target off of mobile/tablet/desktop or just mobile/desktop\n            device: isTablet ? 'tablet' : isMobile.any() ? 'mobile' : 'desktop'\n        }, Builder1.overrideUserAttributes);\n    };\n    Builder1.prototype.setUserAttributes = function(options) {\n        assign(Builder1.overrideUserAttributes, options);\n        if (this.canTrack) {\n            this.setCookie(Builder1.attributesCookieName, JSON.stringify(this.getUserAttributes()));\n        }\n        this.userAttributesChanged.next(options);\n    };\n    /**\r\n     * Set user attributes just for tracking purposes.\r\n     *\r\n     * Do this so properties exist on event objects for querying insights, but\r\n     * won't affect targeting\r\n     *\r\n     * Use this when you want to track properties but don't need to target off\r\n     * of them to optimize cache efficiency\r\n     */ Builder1.prototype.setTrackingUserAttributes = function(attributes) {\n        assign(this.trackingUserAttributes, attributes);\n    };\n    Builder1.prototype.get = function(modelName, options) {\n        var _a;\n        if (options === void 0) {\n            options = {};\n        }\n        var instance = this;\n        var finalLocale = options.locale || ((_a = options.userAttributes) === null || _a === void 0 ? void 0 : _a.locale) || this.getUserAttributes().locale;\n        if (!('noTraverse' in options)) {\n            options.noTraverse = false;\n        }\n        var finalOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, options), finalLocale && {\n            locale: String(finalLocale),\n            userAttributes: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n                locale: String(finalLocale)\n            }, options.userAttributes)\n        });\n        if (!Builder1.isBrowser) {\n            instance = new Builder1(options.apiKey || this.apiKey, options.req, options.res, undefined, options.authToken || this.authToken, options.apiVersion || this.apiVersion);\n            instance.apiEndpoint = this.apiEndpoint;\n            instance.setUserAttributes(this.getUserAttributes());\n        } else {\n            // NOTE: All these are when .init is not called and the customer\n            // directly calls .get on the singleton instance of Builder\n            if (options.apiKey && !this.apiKey) {\n                this.apiKey = options.apiKey;\n            }\n            if (options.authToken && !this.authToken) {\n                this.authToken = options.authToken;\n            }\n            if (options.apiVersion && !this.apiVersion) {\n                this.apiVersion = options.apiVersion;\n            }\n        }\n        return instance.queueGetContent(modelName, finalOptions).map(/* map( */ function(matches) {\n            var match = matches && matches[0];\n            if (Builder1.isStatic) {\n                return match;\n            }\n            var matchData = match && match.data;\n            if (!matchData) {\n                return null;\n            }\n            if (typeof matchData.blocksString !== 'undefined') {\n                matchData.blocks = JSON.parse(matchData.blocksString);\n                delete matchData.blocksString;\n            }\n            return {\n                // TODO: add ab test info here and other high level stuff\n                data: matchData,\n                id: match.id,\n                variationId: match.testVariationId || match.variationId || null,\n                testVariationId: match.testVariationId || match.variationId || null,\n                testVariationName: match.testVariationName || null,\n                lastUpdated: match.lastUpdated || null\n            };\n        });\n    // );\n    };\n    // TODO: entry id in options\n    Builder1.prototype.queueGetContent = function(modelName, options) {\n        var _this = this;\n        if (options === void 0) {\n            options = {};\n        }\n        // TODO: if query do modelName + query\n        var key = options.key || options.alias || // TODO: SDKs only pass entry key when given to them, and never when editing...\n        // options.entry ||\n        // TODO: this is ugly - instead of multiple of same model with different options are sent\n        // say requires key/alias. Or if not perhaps make a reliable hash of the options and use that.\n        // TODO: store last user state on last request and if user attributes different now\n        // give a warning that need to use keys to request new contente\n        // (options &&\n        //   Object.keys(options).filter(key => key !== 'model').length &&\n        //   JSON.stringify({ model: modelName, ...options, initialContent: undefined })) ||\n        modelName;\n        var isEditingThisModel = this.editingModel === modelName;\n        // TODO: include params in this key........\n        var currentObservable = this.observersByKey[key];\n        // if (options.query && options.query._id) {\n        //   this.flushGetContentQueue([options])\n        // }\n        if (this.apiKey === 'DEMO' && !this.overrides[key] && !options.initialContent) {\n            options.initialContent = [];\n        }\n        var initialContent = options.initialContent;\n        // TODO: refresh option in options\n        if (currentObservable && (!currentObservable.value || options.cache)) {\n            // TODO: test if this ran, otherwise on 404 some observers may never be called...\n            if (currentObservable.value) {\n                nextTick(function() {\n                    // TODO: return a new observable and only that one fires subscribers, don't refire for existing ones\n                    currentObservable.next(currentObservable.value);\n                });\n            }\n            return currentObservable;\n        }\n        if (isEditingThisModel) {\n            if (Builder1.isBrowser) {\n                parent.postMessage({\n                    type: 'builder.updateContent',\n                    data: {\n                        options: options\n                    }\n                }, '*');\n            }\n        }\n        if (!initialContent /* || isEditingThisModel */ ) {\n            if (!this.getContentQueue) {\n                this.getContentQueue = [];\n            }\n            this.getContentQueue.push((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, options), {\n                model: modelName,\n                key: key\n            }));\n            if (this.getContentQueue && this.getContentQueue.length >= this.contentPerRequest) {\n                var queue_1 = this.getContentQueue.slice();\n                this.getContentQueue = [];\n                nextTick(function() {\n                    _this.flushGetContentQueue(false, queue_1);\n                });\n            } else {\n                nextTick(function() {\n                    _this.flushGetContentQueue();\n                });\n            }\n        }\n        var observable = new BehaviorSubject(null);\n        this.observersByKey[key] = observable;\n        if (options.noEditorUpdates) {\n            this.noEditorUpdates[key] = true;\n        }\n        if (initialContent) {\n            nextTick(function() {\n                // TODO: need to testModify this I think...?\n                observable.next(initialContent);\n            });\n        }\n        return observable;\n    };\n    // this is needed to satisfy the Angular SDK, which used to rely on the more complex version of `requestUrl`.\n    // even though we only use `fetch()` now, we prefer to keep the old behavior and use the `fetch` that comes from\n    // the core SDK for consistency\n    Builder1.prototype.requestUrl = function(url, options) {\n        return getFetch()(url, this.addSdkHeaders(options)).then(function(res) {\n            return res.json();\n        });\n    };\n    Object.defineProperty(Builder1.prototype, \"host\", {\n        get: function() {\n            switch(this.env){\n                case 'qa':\n                    return 'https://qa.builder.io';\n                case 'test':\n                    return 'https://builder-io-test.web.app';\n                case 'fast':\n                    return 'https://fast.builder.io';\n                case 'cloud':\n                    return 'https://cloud.builder.io';\n                case 'cdn2':\n                    return 'https://cdn2.builder.io';\n                case 'cdn-qa':\n                    return 'https://cdn-qa.builder.io';\n                case 'development':\n                case 'dev':\n                    return 'http://localhost:5000';\n                case 'cdn-prod':\n                    return 'https://cdn.builder.io';\n                default:\n                    return Builder1.overrideHost || 'https://cdn.builder.io';\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Builder1.prototype.getSdkHeaders = function() {\n        if (!Builder1.sdkInfo) {\n            return {};\n        }\n        return {\n            'X-Builder-SDK': Builder1.sdkInfo.name,\n            'X-Builder-SDK-GEN': '1',\n            'X-Builder-SDK-Version': Builder1.sdkInfo.version\n        };\n    };\n    Builder1.prototype.addSdkHeaders = function(fetchOptions) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, fetchOptions), {\n            headers: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, fetchOptions.headers), this.getSdkHeaders())\n        });\n    };\n    Builder1.prototype.makeFetchApiCall = function(url, requestOptions) {\n        return getFetch()(url, this.addSdkHeaders(requestOptions));\n    };\n    /**\r\n     * Flatten a nested MongoDB query object into a flat object with dot-separated keys.\r\n     * $ keys are not flattened and are left as is.\r\n     *\r\n     * { foo: { bar: { $gt: 5 }}} -> { 'foo.bar': { '$gt': 5 }}\r\n     * { foo: {'bar.id': { $elemMatch: { 'baz.id': { $in: ['abc', 'bcd'] }}}}} -> { 'foo.bar.id': { '$elemMatch': { 'baz.id': { '$in': ['abc', 'bcd'] }}}}\r\n     */ Builder1.prototype.flattenMongoQuery = function(obj, _current, _res) {\n        if (_res === void 0) {\n            _res = {};\n        }\n        for(var key in obj){\n            var value = obj[key];\n            var newKey = _current ? _current + '.' + key : key;\n            if (value && typeof value === 'object' && !Array.isArray(value) && !Object.keys(value).find(function(item) {\n                return item.startsWith('$');\n            })) {\n                this.flattenMongoQuery(value, newKey, _res);\n            } else {\n                _res[newKey] = value;\n            }\n        }\n        return _res;\n    };\n    Builder1.prototype.flushGetContentQueue = function(usePastQueue, useQueue) {\n        var _this = this;\n        var _a, _b;\n        if (usePastQueue === void 0) {\n            usePastQueue = false;\n        }\n        if (!this.apiKey) {\n            throw new Error(\"Fetching content failed, expected apiKey to be defined instead got: \".concat(this.apiKey));\n        }\n        if (this.apiVersion) {\n            if (![\n                'v1',\n                'v3'\n            ].includes(this.apiVersion)) {\n                throw new Error(\"Invalid apiVersion: expected 'v1' or 'v3', received '\".concat(this.apiVersion, \"'\"));\n            }\n        } else {\n            this.apiVersion = DEFAULT_API_VERSION;\n        }\n        if (!usePastQueue && !this.getContentQueue) {\n            return;\n        }\n        var queue = useQueue || (usePastQueue ? this.priorContentQueue : this.getContentQueue) || [];\n        // TODO: do this on every request send?\n        this.getOverridesFromQueryString();\n        var queryParams = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            // TODO: way to force a request to be in a separate queue. or just lower queue limit to be 1 by default\n            omit: (_a = queue[0].omit) !== null && _a !== void 0 ? _a : 'meta.componentsUsed',\n            apiKey: this.apiKey\n        }, queue[0].options), this.queryOptions);\n        if (queue[0].locale) {\n            queryParams.locale = queue[0].locale;\n        }\n        if (queue[0].fields) {\n            queryParams.fields = queue[0].fields;\n        }\n        if (queue[0].format) {\n            queryParams.format = queue[0].format;\n        }\n        if ('noTraverse' in queue[0]) {\n            queryParams.noTraverse = queue[0].noTraverse;\n        }\n        if ('includeUnpublished' in queue[0]) {\n            queryParams.includeUnpublished = queue[0].includeUnpublished;\n        }\n        if (queue[0].sort) {\n            queryParams.sort = queue[0].sort;\n        }\n        var pageQueryParams = (typeof location !== 'undefined' ? QueryString.parseDeep(location.search.substr(1)) : undefined) || {}; // TODO: WHAT about SSR (this.request) ?\n        var userAttributes = // FIXME: HACK: only checks first in queue for user attributes overrides, should check all\n        // TODO: merge user attributes provided here with defaults and current user attiributes (?)\n        queue && queue[0].userAttributes ? queue[0].userAttributes : this.targetContent ? this.getUserAttributes() : {\n            urlPath: this.getLocation().pathname\n        };\n        var fullUrlQueueItem = queue.find(function(item) {\n            return !!item.includeUrl;\n        });\n        if (fullUrlQueueItem) {\n            var location_1 = this.getLocation();\n            if (location_1.origin) {\n                queryParams.url = \"\".concat(location_1.origin).concat(location_1.pathname).concat(location_1.search);\n            }\n        }\n        var urlQueueItem = useQueue === null || useQueue === void 0 ? void 0 : useQueue.find(function(item) {\n            return item.url;\n        });\n        if (urlQueueItem === null || urlQueueItem === void 0 ? void 0 : urlQueueItem.url) {\n            userAttributes.urlPath = urlQueueItem.url.split('?')[0];\n        }\n        // TODO: merge in the attribute from query string ones\n        // TODO: make this an option per component/request\n        queryParams.userAttributes = JSON.stringify(userAttributes);\n        if (!usePastQueue && !useQueue) {\n            this.priorContentQueue = queue;\n            this.getContentQueue = null;\n        }\n        var cachebust = this.cachebust || isIframe || pageQueryParams.cachebust || pageQueryParams['builder.cachebust'];\n        if (cachebust || this.env !== 'production') {\n            queryParams.cachebust = true;\n        }\n        if (Builder1.isEditing) {\n            queryParams.isEditing = true;\n        }\n        if (this.noCache || this.env !== 'production') {\n            queryParams.noCache = true;\n        }\n        if (size(this.overrides)) {\n            for(var key in this.overrides){\n                if (this.overrides.hasOwnProperty(key)) {\n                    queryParams[\"overrides.\".concat(key)] = this.overrides[key];\n                }\n            }\n        }\n        for(var _i = 0, queue_2 = queue; _i < queue_2.length; _i++){\n            var options = queue_2[_i];\n            var format_1 = options.format;\n            if (format_1) {\n                queryParams.format = format_1;\n            }\n            // TODO: remove me and make permodel\n            if (options.static) {\n                queryParams.static = options.static;\n            }\n            if (options.cachebust) {\n                queryParams.cachebust = options.cachebust;\n            }\n            if (isPositiveNumber(options.cacheSeconds)) {\n                queryParams.cacheSeconds = options.cacheSeconds;\n            }\n            if (isPositiveNumber(options.staleCacheSeconds)) {\n                queryParams.staleCacheSeconds = options.staleCacheSeconds;\n            }\n            if (this.apiEndpoint === 'content') {\n                queryParams.includeRefs = true;\n            }\n            var properties = [\n                'prerender',\n                'extractCss',\n                'limit',\n                'offset',\n                'query',\n                'preview',\n                'model',\n                'entry',\n                'rev',\n                'static',\n                'includeRefs'\n            ];\n            for(var _c = 0, properties_1 = properties; _c < properties_1.length; _c++){\n                var key = properties_1[_c];\n                var value = options[key];\n                if (value !== undefined) {\n                    if (this.apiEndpoint === 'query') {\n                        queryParams.options = queryParams.options || {};\n                        queryParams.options[options.key] = queryParams.options[options.key] || {};\n                        queryParams.options[options.key][key] = JSON.stringify(value);\n                    } else {\n                        queryParams[key] = JSON.stringify(value);\n                    }\n                }\n            }\n        }\n        if (this.preview && this.previewingModel === ((_b = queue === null || queue === void 0 ? void 0 : queue[0]) === null || _b === void 0 ? void 0 : _b.model)) {\n            queryParams.preview = 'true';\n        }\n        var hasParams = Object.keys(queryParams).length > 0;\n        // TODO: option to force dev or qa api here\n        var host = this.host;\n        var keyNames = queue.map(function(item) {\n            return encodeURIComponent(item.key);\n        }).join(',');\n        if (this.overrideParams) {\n            var params = omit(QueryString.parse(this.overrideParams), 'apiKey');\n            assign(queryParams, params);\n        }\n        var format = queryParams.format;\n        var isApiCallForCodegen = format === 'solid' || format === 'react';\n        var isApiCallForCodegenOrQuery = isApiCallForCodegen || this.apiEndpoint === 'query';\n        if (this.apiEndpoint === 'content') {\n            if (queue[0].query) {\n                delete queryParams.query;\n                var objectToFlatten = {\n                    query: queue[0].query\n                };\n                var flattened = this.flattenMongoQuery(objectToFlatten);\n                for(var key in flattened){\n                    queryParams[key] = JSON.stringify(flattened[key]);\n                }\n            }\n        }\n        var queryStr = QueryString.stringifyDeep(queryParams);\n        var fetchOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            headers: {}\n        }, queue[0].fetchOptions);\n        if (this.authToken) {\n            fetchOptions.headers = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, fetchOptions.headers), {\n                Authorization: \"Bearer \".concat(this.authToken)\n            });\n        }\n        var url;\n        if (isApiCallForCodegen) {\n            url = \"\".concat(host, \"/api/v1/codegen/\").concat(this.apiKey, \"/\").concat(keyNames);\n        } else if (this.apiEndpoint === 'query') {\n            url = \"\".concat(host, \"/api/v3/query/\").concat(this.apiKey, \"/\").concat(keyNames);\n        } else {\n            url = \"\".concat(host, \"/api/v3/content/\").concat(queue[0].model);\n        }\n        url = url + (queryParams && hasParams ? \"?\".concat(queryStr) : '');\n        var promise = this.makeFetchApiCall(url, fetchOptions).then(function(res) {\n            return res.json();\n        }).then(function(result) {\n            for(var _i = 0, queue_3 = queue; _i < queue_3.length; _i++){\n                var options = queue_3[_i];\n                var keyName = options.key;\n                if (options.model === _this.blockContentLoading && !options.noEditorUpdates) {\n                    continue;\n                }\n                var isEditingThisModel = _this.editingModel === options.model;\n                if (isEditingThisModel && Builder1.isEditing) {\n                    parent.postMessage({\n                        type: 'builder.updateContent',\n                        data: {\n                            options: options\n                        }\n                    }, '*');\n                // return;\n                }\n                var observer = _this.observersByKey[keyName];\n                if (!observer) {\n                    return;\n                }\n                var data = isApiCallForCodegenOrQuery ? result[keyName] : result.results;\n                var sorted = data; // sortBy(data, item => item.priority);\n                if (data) {\n                    var testModifiedResults = Builder1.isServer ? sorted : _this.processResultsForTests(sorted);\n                    observer.next(testModifiedResults);\n                } else {\n                    var search = _this.getLocation().search;\n                    if ((search || '').includes('builder.preview=' + options.model)) {\n                        var previewData = {\n                            id: 'preview',\n                            name: 'Preview',\n                            data: {}\n                        };\n                        observer.next([\n                            previewData\n                        ]);\n                    }\n                    observer.next([]);\n                }\n            }\n        }, function(err) {\n            for(var _i = 0, queue_4 = queue; _i < queue_4.length; _i++){\n                var options = queue_4[_i];\n                var observer = _this.observersByKey[options.key];\n                if (!observer) {\n                    return;\n                }\n                observer.error(err);\n            }\n        });\n        return promise;\n    };\n    Builder1.prototype.processResultsForTests = function(results) {\n        var _this = this;\n        var _a;\n        var mappedResults = results.map(function(item) {\n            if (!item.variations) {\n                return item;\n            }\n            var cookieValue = _this.getTestCookie(item.id);\n            var cookieVariation = cookieValue === item.id ? item : item.variations[cookieValue];\n            if (cookieVariation) {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, item), {\n                    data: cookieVariation.data,\n                    variationId: cookieValue,\n                    testVariationId: cookieValue,\n                    testVariationName: cookieVariation.name\n                });\n            }\n            if (_this.canTrack && item.variations && size(item.variations)) {\n                var n = 0;\n                var random = Math.random();\n                for(var id in item.variations){\n                    var variation = item.variations[id];\n                    var testRatio = variation.testRatio;\n                    n += testRatio;\n                    if (random < n) {\n                        _this.setTestCookie(item.id, variation.id);\n                        var variationName = variation.name || (variation.id === item.id ? 'Default variation' : '');\n                        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, item), {\n                            data: variation.data,\n                            variationId: variation.id,\n                            testVariationId: variation.id,\n                            variationName: variationName,\n                            testVariationName: variationName\n                        });\n                    }\n                }\n                _this.setTestCookie(item.id, item.id);\n            }\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, item), {\n                variationId: item.id\n            }), item.variations && size(item.variations) && {\n                testVariationId: item.id,\n                testVariationName: 'Default variation'\n            });\n        });\n        if (isIframe) {\n            (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\n                type: 'builder.contentResults',\n                data: {\n                    results: mappedResults\n                }\n            }, '*');\n        }\n        return mappedResults;\n    };\n    Builder1.prototype.getTestCookie = function(contentId) {\n        return this.getCookie(\"\".concat(this.testCookiePrefix, \".\").concat(contentId));\n    };\n    Builder1.prototype.setTestCookie = function(contentId, variationId) {\n        if (!this.canTrack) {\n            this.cookieQueue.push([\n                contentId,\n                variationId\n            ]);\n            return;\n        }\n        // 30 days from now\n        var future = new Date();\n        future.setDate(future.getDate() + 30);\n        return this.setCookie(\"\".concat(this.testCookiePrefix, \".\").concat(contentId), variationId, future);\n    };\n    Builder1.prototype.getCookie = function(name) {\n        if (this.cookies) {\n            return this.cookies.get(name);\n        }\n        return Builder1.isBrowser && getCookie(name);\n    };\n    Builder1.prototype.setCookie = function(name, value, expires) {\n        if (this.cookies && !(Builder1.isServer && Builder1.isStatic)) {\n            return this.cookies.set(name, value, {\n                expires: expires,\n                secure: this.getLocation().protocol === 'https:'\n            });\n        }\n        return Builder1.isBrowser && setCookie(name, value, expires);\n    };\n    Builder1.prototype.getContent = function(modelName, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        if (!this.apiKey) {\n            throw new Error(\"Fetching content from model \".concat(modelName, \" failed, expected apiKey to be defined instead got: \").concat(this.apiKey));\n        }\n        return this.queueGetContent(modelName, options);\n    };\n    Builder1.prototype.getAll = function(modelName, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var instance = this;\n        if (!Builder1.isBrowser) {\n            instance = new Builder1(options.apiKey || this.apiKey, options.req, options.res, false, options.authToken || this.authToken, options.apiVersion || this.apiVersion);\n            instance.setUserAttributes(this.getUserAttributes());\n        } else {\n            // NOTE: All these are when .init is not called and the customer\n            // directly calls .get on the singleton instance of Builder\n            if (options.apiKey && !this.apiKey) {\n                this.apiKey = options.apiKey;\n            }\n            if (options.authToken && !this.authToken) {\n                this.authToken = options.authToken;\n            }\n            if (options.apiVersion && !this.apiVersion) {\n                this.apiVersion = options.apiVersion;\n            }\n        }\n        // Set noTraverse=true if NOT already passed by user, for query performance\n        if (!('noTraverse' in options)) {\n            options.noTraverse = true;\n        }\n        return instance.getContent(modelName, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            limit: 30\n        }, options), {\n            key: options.key || // Make the key include all options, so we don't reuse cache for the same content fetched\n            // with different options\n            Builder1.isBrowser ? \"\".concat(modelName, \":\").concat(hash_sum__WEBPACK_IMPORTED_MODULE_0___default()(omit(options, 'initialContent', 'req', 'res'))) : undefined\n        })).promise();\n    };\n    Builder1.VERSION = SDK_VERSION;\n    Builder1.components = [];\n    /**\r\n     * Makes it so that a/b tests generate code like {@link\r\n     * https://www.builder.io/blog/high-performance-no-code#__next:~:text=Static%20generated%20A%2FB%20testing}\r\n     * instead of the old way where we render only one test group at a time on the\r\n     * server. This is the preferred/better way not and we should ultimately make it\r\n     * the default\r\n     */ Builder1.isStatic = true;\n    Builder1.animator = new Animator();\n    Builder1.nextTick = nextTick;\n    Builder1.throttle = throttle;\n    Builder1.editors = [];\n    Builder1.trustedHosts = [\n        '*.beta.builder.io',\n        'beta.builder.io',\n        'builder.io',\n        'localhost',\n        'qa.builder.io'\n    ];\n    Builder1.plugins = [];\n    Builder1.actions = [];\n    Builder1.registry = {};\n    Builder1.attributesCookieName = 'builder.userAttributes';\n    Builder1.registryChange = new BehaviorSubject({});\n    Builder1._editingPage = false;\n    Builder1.isIframe = isIframe;\n    Builder1.isBrowser = isBrowser;\n    Builder1.isReactNative = isReactNative;\n    Builder1.isServer = !isBrowser && !isReactNative;\n    Builder1.previewingModel = Builder1.isBrowser && getQueryParam(location.href, 'builder.preview');\n    Builder1.settings = {};\n    Builder1.settingsChange = new BehaviorSubject({});\n    // TODO: this is quick and dirty, do better implementation later. Also can be unreliable\n    // if page 301s etc. Use a query param instead? also could have issues with redirects. Injecting var could\n    // work but is async...\n    Builder1.isEditing = Boolean(isIframe && (document.referrer && document.referrer.match(/builder\\.io|localhost:1234/) || location.search.indexOf('builder.frameEditing=') !== -1));\n    Builder1.isPreviewing = Boolean(isBrowser && (location.search.indexOf('builder.preview=') !== -1 || location.search.indexOf('builder.frameEditing=') !== -1));\n    Builder1.isReact = false;\n    Builder1.sdkInfo = undefined;\n    Builder1.overrideUserAttributes = {};\n    return Builder1;\n}();\nvar builder = new Builder(null, undefined, undefined, true);\nBuilder.singletonInstance = builder;\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@builder.io/sdk/dist/index.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@builder.io/react/dist/builder-react.es5.js":
/*!******************************************************************!*\
  !*** ./node_modules/@builder.io/react/dist/builder-react.es5.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Builder: () => (/* reexport safe */ _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder),\n/* harmony export */   BuilderAsyncRequestsContext: () => (/* binding */ BuilderAsyncRequestsContext),\n/* harmony export */   BuilderBlock: () => (/* binding */ BuilderBlock),\n/* harmony export */   BuilderBlockComponent: () => (/* binding */ BuilderBlock$1),\n/* harmony export */   BuilderBlocks: () => (/* binding */ BuilderBlocks),\n/* harmony export */   BuilderComponent: () => (/* binding */ BuilderComponent),\n/* harmony export */   BuilderContent: () => (/* binding */ BuilderContent),\n/* harmony export */   BuilderMetaContext: () => (/* binding */ BuilderMetaContext),\n/* harmony export */   BuilderPage: () => (/* binding */ BuilderComponent),\n/* harmony export */   BuilderStoreContext: () => (/* binding */ BuilderStoreContext),\n/* harmony export */   Button: () => (/* binding */ Button),\n/* harmony export */   Columns: () => (/* binding */ Columns),\n/* harmony export */   Content: () => (/* binding */ BuilderComponent),\n/* harmony export */   CustomCode: () => (/* binding */ CustomCode),\n/* harmony export */   Dropzone: () => (/* binding */ Slot),\n/* harmony export */   Embed: () => (/* binding */ Embed),\n/* harmony export */   Form: () => (/* binding */ Form),\n/* harmony export */   FormInput: () => (/* binding */ FormInput),\n/* harmony export */   FormSelect: () => (/* binding */ FormSelect),\n/* harmony export */   FormSubmitButton: () => (/* binding */ FormSubmitButton),\n/* harmony export */   Fragment: () => (/* binding */ Fragment),\n/* harmony export */   Image: () => (/* binding */ Image),\n/* harmony export */   Img: () => (/* binding */ Img),\n/* harmony export */   Label: () => (/* binding */ Label),\n/* harmony export */   Mutation: () => (/* binding */ Mutation),\n/* harmony export */   PersonalizationContainer: () => (/* binding */ PersonalizationContainer),\n/* harmony export */   RawText: () => (/* binding */ RawText),\n/* harmony export */   Router: () => (/* binding */ Router),\n/* harmony export */   Section: () => (/* binding */ Section),\n/* harmony export */   StateProvider: () => (/* binding */ StateProvider),\n/* harmony export */   Symbol: () => (/* binding */ Symbol$1),\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   TextArea: () => (/* binding */ TextArea),\n/* harmony export */   Video: () => (/* binding */ Video),\n/* harmony export */   builder: () => (/* reexport safe */ _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder),\n/* harmony export */   \"default\": () => (/* reexport safe */ _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder),\n/* harmony export */   getSrcSet: () => (/* binding */ getSrcSet),\n/* harmony export */   noWrap: () => (/* binding */ noWrap),\n/* harmony export */   onChange: () => (/* binding */ onChange),\n/* harmony export */   stringToFunction: () => (/* binding */ stringToFunction),\n/* harmony export */   updateMetadata: () => (/* binding */ updateMetadata),\n/* harmony export */   useIsPreviewing: () => (/* binding */ useIsPreviewing),\n/* harmony export */   withBuilder: () => (/* binding */ withBuilder),\n/* harmony export */   withChildren: () => (/* binding */ withChildren)\n/* harmony export */ });\n/* harmony import */ var _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @builder.io/sdk */ \"(ssr)/./node_modules/@builder.io/sdk/dist/index.esm.js\");\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/core */ \"(ssr)/./node_modules/@emotion/core/dist/core.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var hash_sum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! hash-sum */ \"(ssr)/./node_modules/hash-sum/hash-sum.js\");\n/* harmony import */ var hash_sum__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(hash_sum__WEBPACK_IMPORTED_MODULE_4__);\nvar SDK_VERSION=\"8.2.6\",_a;\"undefined\"!=typeof window&&(null===(_a=window.parent)||void 0===_a||_a.postMessage({type:\"builder.isReactSdk\",data:{value:!0,supportsPatchUpdates:\"v4\",supportsCustomBreakpoints:!0,supportsXSmallBreakpoint:!0,supportsGlobalSymbols:!0,blockLevelPersonalization:!0,version:SDK_VERSION}},\"*\"));var extendStatics=function(e,t){return(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};function __extends(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Class extends value \"+String(t)+\" is not a constructor or null\");function n(){this.constructor=e}extendStatics(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var __assign=function(){return(__assign=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};function __rest(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(i=Object.getOwnPropertySymbols(e);r<i.length;r++)t.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(e,i[r])&&(n[i[r]]=e[i[r]])}return n}function __decorate(e,t,n,i){var r,o=arguments.length,a=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,i);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(a=(o<3?r(a):o>3?r(t,n,a):r(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a}function __metadata(e,t){if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function __awaiter(e,t,n,i){return new(n||(n=Promise))((function(r,o){function a(e){try{l(i.next(e))}catch(e){o(e)}}function s(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}))}function __generator(e,t){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError(\"Generator is already executing.\");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,i&&(r=2&s[0]?i.return:s[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,s[1])).done)return r;switch(i=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,i=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){a.label=s[1];break}if(6===s[0]&&a.label<r[1]){a.label=r[1],r=s;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(s);break}r[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],i=0}finally{n=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}function __spreadArray(e,t,n){if(n||2===arguments.length)for(var i,r=0,o=t.length;r<o;r++)!i&&r in t||(i||(i=Array.prototype.slice.call(t,0,r)),i[r]=t[r]);return e.concat(i||Array.prototype.slice.call(t))}\"function\"==typeof SuppressedError&&SuppressedError;var fastClone=function(e){return JSON.parse(JSON.stringify(e))},omit$2=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var i=Object.assign({},e),r=0,o=t;r<o.length;r++){var a=o[r];delete i[a]}return i},sizeNames=[\"xsmall\",\"small\",\"medium\",\"large\"],sizes={xsmall:{min:0,default:160,max:320},small:{min:321,default:321,max:640},medium:{min:641,default:642,max:991},large:{min:990,default:991,max:1200},getWidthForSize:function(e){return this[e].default},getSizeForWidth:function(e){for(var t=0,n=sizeNames;t<n.length;t++){var i=n[t];if(e<=this[i].max)return i}return\"large\"}},getSizesForBreakpoints=function(e){var t=__assign(__assign({},sizes),fastClone(sizes));if(!e)return t;var n=e.xsmall,i=e.small,r=e.medium;if(n){var o=Math.floor(n/2);t.xsmall={max:n,min:o,default:o+1}}if(!i||!r)return t;var a=n?t.xsmall.max+1:Math.floor(i/2);t.small={max:i,min:a,default:a+1};var s=t.small.max+1;t.medium={max:r,min:s,default:s+1};var l=t.medium.max+1;return t.large={max:2e3,min:l,default:l+1},t},set=function(e,t,n){if(Object(e)!==e)return e;var i=Array.isArray(t)?t:t.toString().match(/[^.[\\]]+/g);return i.slice(0,-1).reduce((function(e,t,n){return Object(e[t])===e[t]?e[t]:e[t]=Math.abs(Number(i[n+1]))>>0==+i[n+1]?[]:{}}),e)[i[i.length-1]]=n,e},noop=function(){return null},safeDynamicRequire;if(\"function\"==typeof(null===globalThis||void 0===globalThis?void 0:globalThis.require)||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer&&\"function\"==\"function\")try{safeDynamicRequire=eval(\"require\")}catch(e){safeDynamicRequire=(null===globalThis||void 0===globalThis?void 0:globalThis.require)?globalThis.require:noop}function isDebug(){return Boolean(\"undefined\"!=typeof process&&void 0!==process.env&&process.env.DEBUG)}function isNodeRuntime(){var e;return\"undefined\"!=typeof process&&Boolean(null===(e=null===process||void 0===process?void 0:process.versions)||void 0===e?void 0:e.node)}null!=safeDynamicRequire||(safeDynamicRequire=noop);var shouldForceBrowserRuntimeInNode=function(){var e;if(!isNodeRuntime())return!1;var t=\"arm64\"===process.arch,n=process.version.startsWith(\"v20\"),i=null===(e=process.env.NODE_OPTIONS)||void 0===e?void 0:e.includes(\"--no-node-snapshot\");return!(!t||!n||i)&&(console.log(\"Skipping usage of `isolated-vm` to avoid crashes in Node v20 on an arm64 machine.\\n    If you would like to use the `isolated-vm` package on this machine, please provide the `NODE_OPTIONS=--no-node-snapshot` config to your Node process.\\n    See https://github.com/BuilderIO/builder/blob/main/packages/react/README.md#node-v20--m1-macs-apple-silicon-support for more information.\\n    \"),!0)},fnCache={},api=function(e){return _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder};function stringToFunction(e,t,n,i){if(void 0===t&&(t=!0),!e||!e.trim())return function(){};var r=e+\":\"+t;if(fnCache[r])return fnCache[r];var o=t&&!(e.includes(\";\")||e.includes(\" return \")||e.trim().startsWith(\"return \"))||e.trim().startsWith(\"builder.run\"),a=function(){};try{_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&(a=new Function(\"state\",\"event\",\"block\",\"builder\",\"Device\",\"update\",\"Builder\",\"context\",\"\\n          var names = [\\n            'state',\\n            'event',\\n            'block',\\n            'builder',\\n            'Device',\\n            'update',\\n            'Builder',\\n            'context'\\n          ];\\n          var rootState = state;\\n          if (typeof Proxy !== 'undefined') {\\n            rootState = new Proxy(rootState, {\\n              set: function () {\\n                return false;\\n              },\\n              get: function (target, key) {\\n                if (names.includes(key)) {\\n                  return undefined;\\n                }\\n                return target[key];\\n              }\\n            });\\n          }\\n          /* Alias */\\n          var ctx = context;\\n          var log = console.log.bind(console);\\n          with (rootState) {\\n            \".concat(o?\"return (\".concat(e,\");\"):e,\";\\n          }\\n        \")))}catch(t){n&&n.push(t);var s=t&&t.message;s&&\"string\"==typeof s&&i&&-1===i.indexOf(s)&&i.push(s),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&console.warn(\"Function compile error in \".concat(e),t)}var l=function(){for(var t=[],i=0;i<arguments.length;i++)t[i]=arguments[i];try{if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser||shouldForceBrowserRuntimeInNode())return a.apply(void 0,t);var r=getIsolateContext(),s=safeDynamicRequire(\"isolated-vm\"),l=r.evalClosureSync(makeFn(e,o),t.map((function(e,t){return\"object\"==typeof e?new s.Reference(t===indexOfBuilderInstance?__assign(__assign({},e),{getUserAttributes:function(){return e.getUserAttributes(\"\")}}):e):null})));try{var u=JSON.parse(l);return u}catch(e){return l}}catch(t){return _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser?console.warn(\"Builder custom code error:\",t.message||t,\"in\",e,t.stack||t):isDebug()&&console.debug(\"Builder custom code error:\",t.message||t,\"in\",e,t.stack||t),n&&n.push(t),null}};return _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&(fnCache[r]=l),l}var indexOfBuilderInstance=3,makeFn=function(e,t,n){var i=n||[\"state\",\"event\",\"block\",\"builder\",\"Device\",\"update\",\"Builder\",\"context\"];return\"\\n\".concat(\"\\n  var refToProxy = (obj) => {\\n    if (typeof obj !== 'object' || obj === null) {\\n      return obj;\\n    }\\n    return new Proxy({}, {\\n        get(target, key) {\\n            if (key === 'copySync') {\\n              return () => obj.copySync();\\n            }\\n            const val = obj.getSync(key);\\n            if (typeof val?.copySync === 'function') {\\n                return JSON.parse(stringify(val));\\n            }\\n            return val;\\n        },\\n        set(target, key, value) {\\n            obj.setSync(key, value);\\n        },\\n        deleteProperty(target, key) {\\n            obj.deleteSync(key);\\n        }\\n      })\\n  }\\n\",\"\\n\").concat(\"\\n    var stringify = (val) => {\\n      if (typeof val === 'object' && val !== null) {\\n        return JSON.stringify(val.copySync ? val.copySync() : val);\\n      }\\n      return val;\\n    }\\n  \",\"\\n\").concat(i.map((function(e,t){return\"var \".concat(e,\" = refToProxy($\").concat(t,\");\")})).join(\"\\n\")).concat(\"\\n\".concat(i.includes(\"context\")?\"var ctx = context;\":\"\",\"\\nvar endResult = function() {\\n  \").concat(t?\"return (\".concat(e,\");\"):e,\";\\n};\\n\\nreturn stringify(endResult());\\n\"))},getIsolateContext=function(){var e=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.serverContext;e||(e=new(safeDynamicRequire(\"isolated-vm\").Isolate)({memoryLimit:128}).createContextSync(),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.setServerContext(e));var t=e.global;return t.setSync(\"global\",t.derefInto()),t.setSync(\"log\",(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];isDebug()&&console.log.apply(console,e)})),e},isPromise=function(e){return\"function\"==typeof e.then},isRequestInfo=function(e){return!isPromise(e)},BuilderAsyncRequestsContext=react__WEBPACK_IMPORTED_MODULE_2___default().createContext({requests:[],errors:[],logs:[]}),BuilderStoreContext=react__WEBPACK_IMPORTED_MODULE_2___default().createContext({state:{},rootState:{},content:{},context:{},update:function(e){return null}}),applyPatchWithMinimalMutationChain=function(e,t,n){if(void 0===n&&(n=!1),Object(e)!==e)return e;var i=t.path,r=t.op,o=t.value,a=i.split(/\\//);\"\"===a[0]&&a.shift();for(var s=n?e:__assign({},e),l=s,u=0;u<a.length;u++){var d=u===a.length-1,c=a[u];if(d){if(\"replace\"===r)l[c]=o;else if(\"add\"===r){var p=Number(c);Array.isArray(l)?\"-\"===c?l.push(o):l.splice(p,0,o):l[c]=o}else if(\"remove\"===r){p=Number(c);Array.isArray(l)?l.splice(p,1):delete l[c]}}else{var f=a[u+1],m=Object(l[c])===l[c]?l[c]:String(Number(f))===f?[]:{};l=l[c]=Array.isArray(m)?__spreadArray([],m,!0):__assign({},m)}}return s},htmlEscape=function(e){return e.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\")},blockToHtmlString=function(e){var t;return\"<\".concat(htmlEscape(e.tagName||\"div\"),' \\n    class=\"builder-block ').concat(e.id,\" \").concat(e.class||\"\",'\"\\n    builder-id=\"').concat(e.id,'\"\\n  ').concat(Object.keys(e.properties||{}).map((function(t){return\"\".concat(htmlEscape(t),'=\"').concat(htmlEscape(e.properties[t]),'\"')})).join(\" \"),\"\\n  >\").concat(\"Text\"===(null===(t=null==e?void 0:e.component)||void 0===t?void 0:t.name)?e.component.options.text:e.children?e.children.map((function(e){return blockToHtmlString(e)})).join(\"\"):\"\",\"</\").concat(e.tagName||\"div\",\">\").replace(/\\s+/g,\" \")},Link=function(e){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderStoreContext.Consumer,null,(function(t){return t.renderLink?t.renderLink(e):react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"a\",__assign({},e))}))};function traverse(e,t,n,i,r){void 0===n&&(n=null),void 0===i&&(i=null),void 0===r&&(r=new WeakSet),null!=e&&\"object\"==typeof e?r.has(e)||(r.add(e),Array.isArray(e)?e.forEach((function(n,i){t(n,(function(t){e[i]=t})),traverse(n,t,e,i,r)})):Object.entries(e).forEach((function(n){var i=n[0],o=n[1];t(o,(function(t){e[i]=t})),traverse(o,t,e,i,r)}))):t(e,(function(e){null!==n&&null!==i&&(n[i]=e)}))}var isLocalizedField=function(e){return e&&\"object\"==typeof e&&\"@builder.io/core:LocalizedValue\"===e[\"@type\"]},containsLocalizedValues=function(e){if(!e||!Object.getOwnPropertyNames(e).length)return!1;var t=!1;return traverse(e,(function(e){isLocalizedField(e)&&(t=!0)})),t},extractLocalizedValues=function(e,t){return e&&Object.getOwnPropertyNames(e).length?(traverse(e,(function(e,n){var i;isLocalizedField(e)&&n(null!==(i=e[t])&&void 0!==i?i:void 0)})),e):{}},camelCaseToKebabCase=function(e){return e?e.replace(/([A-Z])/g,(function(e){return\"-\".concat(e[0].toLowerCase())})):\"\"},kebabCaseToCamelCase=function(e){return void 0===e&&(e=\"\"),e.replace(/-([a-z])/g,(function(e){return e[1].toUpperCase()}))},Device={desktop:0,tablet:1,mobile:2};function deepCloneWithConditions(e){if(null===e||\"object\"!=typeof e)return e;if(Array.isArray(e))return e.map((function(e){return deepCloneWithConditions(e)}));if(\"@builder.io/sdk:Element\"===e[\"@type\"])return e;var t={};for(var n in e)\"meta\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=deepCloneWithConditions(e[n]));return t}var voidElements=new Set([\"area\",\"base\",\"br\",\"col\",\"embed\",\"hr\",\"img\",\"input\",\"link\",\"meta\",\"param\",\"source\",\"track\",\"wbr\",\"textarea\"]),last=function(e){return e[e.length-1]};function omit$1(e,t){for(var n=Object.assign({},e),i=0,r=t;i<r.length;i++){delete n[r[i]]}return n}var cssCase=function(e){if(!e)return e;var t=camelCaseToKebabCase(e);return e[0]===e[0].toUpperCase()&&(t=\"-\"+t),t};function capitalize(e){if(e)return e[0].toUpperCase()+e.slice(1)}var BuilderBlock$1=function(_super){function BuilderBlock(){var _this=null!==_super&&_super.apply(this,arguments)||this;return _this.hydrated=!1,_this.state={hasError:!1,updates:0},_this.privateState={state:{},rootState:{},context:{},update:function(){}},_this.onWindowMessage=function(event){var message=event.data;if(message)switch(message.type){case\"builder.selectionChange\":var data=message.data;if(!data)break;var selection=data.selection,id=_this.block&&_this.block.id;id&&Array.isArray(selection)&&selection.indexOf(id)>-1&&setTimeout((function(){window.$block=_this,window.$blocks||(window.$blocks=[]),window.$blocks.push(_this)}));break;case\"builder.patchUpdates\":var data=message.data;if(!data||!data.data)break;var patches=data.data[_this.block.id];if(!patches)return;location.href.includes(\"builder.debug=true\")&&eval(\"debugger\");for(var _i=0,patches_1=patches;_i<patches_1.length;_i++){var patch=patches_1[_i];applyPatchWithMinimalMutationChain(_this.props.block,patch,!0)}_this.setState({updates:_this.state.updates+1})}},_this}return __extends(BuilderBlock,_super),Object.defineProperty(BuilderBlock.prototype,\"store\",{get:function(){return this.privateState},enumerable:!1,configurable:!0}),BuilderBlock.getDerivedStateFromError=function(e){return{hasError:!0}},BuilderBlock.prototype.componentDidCatch=function(e,t){console.error(\"Builder block error:\",e,t)},BuilderBlock.prototype.stringToFunction=function(e,t){return void 0===t&&(t=!0),stringToFunction(e,t,this._errors,this._logs)},Object.defineProperty(BuilderBlock.prototype,\"block\",{get:function(){return this.props.block},enumerable:!1,configurable:!0}),BuilderBlock.prototype.emotionCss=function(e){var t,n,i,r,o,a,s,l,u=this.block,d=u.animations&&u.animations[0];if(d&&\"hover\"!==d.trigger){var c=d&&d.steps&&d.steps[0],p=c&&c.styles;p&&(l=p)}var f=sizeNames.slice().reverse(),m={};if(e)for(var h=Boolean(null===(i=null===(n=null===(t=this.privateState.context.builderContent)||void 0===t?void 0:t.meta)||void 0===n?void 0:n.breakpoints)||void 0===i?void 0:i.xsmall),v=0,g=f;v<g.length;v++){var b=g[v];if(h||\"xsmall\"!==b)if(\"large\"===b)this.props.emailMode||(m[\"&.builder-block\"]=Object.assign({},e[b],l));else{var y=getSizesForBreakpoints((null===(o=null===(r=this.privateState.context.builderContent)||void 0===r?void 0:r.meta)||void 0===o?void 0:o.breakpoints)||{});m[\"@media only screen and (max-width: \".concat(y[b].max,\"px)\")]={\"&.builder-block\":e[b]}}}var _=u.animations&&u.animations.find((function(e){return\"hover\"===e.trigger}));return _&&(m[\":hover\"]=(null===(s=null===(a=_.steps)||void 0===a?void 0:a[1])||void 0===s?void 0:s.styles)||{},m.transition=\"all \".concat(_.duration,\"s \").concat(camelCaseToKebabCase(_.easing)),_.delay&&(m.transitionDelay=_.delay+\"s\")),m},BuilderBlock.prototype.eval=function(e){return this.stringToFunction(e)(this.privateState.state,void 0,this.block,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder,Device,this.privateState.update,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder,this.privateState.context)},BuilderBlock.prototype.componentWillUnmount=function(){_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&removeEventListener(\"message\",this.onWindowMessage)},BuilderBlock.prototype.componentDidMount=function(){var e,t=this;this.hydrated=!0;var n=this.block,i=n&&n.animations;if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&addEventListener(\"message\",this.onWindowMessage),i){var r={animations:fastClone(i)};if(n.bindings)for(var o in n.bindings)if((null===(e=o.trim)||void 0===e?void 0:e.call(o))&&o.startsWith(\"animations.\")){var a=this.stringToFunction(n.bindings[o]);void 0!==a&&set(r,o,a(this.privateState.state,null,n,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder,null,null,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder,this.privateState.context))}_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.animator.bindAnimations(r.animations.filter((function(e){return\"hover\"!==e.trigger})).map((function(e){return __assign(__assign({},e),{elementId:t.block.id})})))}},BuilderBlock.prototype.getElement=function(e,t){var n,i,r,o,a,s,l=this;void 0===e&&(e=0),void 0===t&&(t=this.privateState.state);var u=this.props;u.child,u.fieldName;var d,c=this.block,p=(c.tagName||\"div\").toLowerCase();if(\"template\"===p){var f=c.children?c.children.map((function(e){return blockToHtmlString(e)})).join(\" \"):\"\";return console.debug(\"template html\",f),(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"template\",__assign({},c.properties,{dangerouslySetInnerHTML:{__html:f}}))}var m=c.component&&(c.component.name||c.component.component),h=null;c.component&&!c.component.class&&(c.component&&c.component.tag?d=c.component.tag:(h=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.components.find((function(e){return e.name===m}))||null)&&h.class?d=h.class:h&&h.tag?d=h.tag:(null==m?void 0:m.startsWith(\"Builder:\"))?console.warn(\"Missing @builder.io/widgets installation, please install and import @builder.io/widgets to use \".concat(m.split(\":\")[1],\" in your content, more info here: https://github.com/BuilderIO/builder/tree/main/packages/widgets\")):m&&console.warn(\"Missing registration for \".concat(m,\", have you included the registration in your bundle?\")));var v=__assign(__assign({},c.properties),{style:{},responsiveStyles:fastClone(c.responsiveStyles||{})});if(v=__assign(__assign({},v.properties),v),c.component&&(v.component=deepCloneWithConditions(c.component)),c.bindings)for(var g in c.bindings)if(null===(i=g.trim)||void 0===i?void 0:i.call(g)){var b=this.stringToFunction(c.bindings[g]);set(v,g,b(t,null,c,api(),Device,null,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder,this.privateState.context))}if(v.hide)return null;if(delete v.hide,(\"show\"in v||c.bindings&&c.bindings.show)&&!v.show)return null;if(delete v.show,c.actions){var y=function(e){if(!(null===(r=e.trim)||void 0===r?void 0:r.call(e)))return\"continue\";var n=c.actions[e];v[\"on\"+capitalize(e)]=function(e){var i=t;return\"undefined\"!=typeof Proxy&&(i=new Proxy(t,{set:function(e,t,n){return e[t]=n,l.privateState.rootState[t]=n,!0}})),l.stringToFunction(n,!1)(i,e,l.block,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder,Device,l.privateState.update,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder,l.privateState.context)}};for(var g in c.actions)y(g)}var _=(v.component||v.options)&&__assign(__assign({},v.options),v.component.options||v.component.data);containsLocalizedValues(_)&&(this.privateState.state.locale||console.warn(\"[Builder.io] In order to use localized fields in Builder, you must pass a locale prop to the BuilderComponent or to options object while fetching the content to resolve localized fields. Learn more: https://www.builder.io/c/docs/localization-inline#targeting-and-inline-localization\"),_=extractLocalizedValues(_,null!==(o=this.privateState.state.locale)&&void 0!==o?o:\"Default\"));var x=voidElements.has(p),S=h&&(h.fragment||h.noWrap),k=(null===(a=v.attr)||void 0===a?void 0:a.style)||(\"string\"==typeof v.style?v.style:\"\")||\"\";if(\"string\"==typeof k){\"object\"!=typeof v.style&&(v.style={});for(var B=0,w=k.split(\";\");B<w.length;B++){var C=w[B].split(\":\");if(!C.length)return;g=C[0],b=C[1];g&&(C.length>2&&(b=C.slice(1).join(\":\")),v.style[kebabCaseToCamelCase(g)]=b)}}var E=__assign(__assign(__assign({},omit$1(v,[\"class\",\"component\",\"attr\",\"responsiveStyles\"])),((n={})[\"string\"!=typeof p||p.includes(\"-\")?\"class\":\"className\"]=\"builder-block \".concat(this.id).concat(c.class?\" \".concat(c.class):\"\").concat(!c.component||[\"Image\",\"Video\",\"Banner\"].indexOf(m)>-1?\"\":\" builder-has-component\")+(v.class?\" \"+v.class:\"\")+(this.hydrated&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&(null===(s=this.privateState.state._spacer)||void 0===s?void 0:s.parent)===c.id?\" builder-spacer-parent\":\"\"),n.key=this.id+e,n[\"builder-id\"]=this.id,n)),0!==e&&{\"builder-index\":e});_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&this.hydrated&&(E[\"builder-inline-styles\"]=v.attr&&v.attr.style?Object.keys(v.style).reduce((function(e,t){return(e?\"\".concat(e,\";\"):\"\")+\"\".concat(cssCase(t),\":\").concat(v.style[t],\";\")}),\"\"):\"\"),(E.properties&&E.properties.href||E.href)&&\"div\"===p&&(p=\"a\"),\"a\"===p&&(p=Link);var R=c.children||E.children||[];return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),null,(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(_emotion_core__WEBPACK_IMPORTED_MODULE_1__.ClassNames,null,(function(e){var t=e.css;if(e.cx,!l.props.emailMode){var n=\" \"+t(l.emotionCss(v.responsiveStyles));E.class&&(E.class+=n),E.className&&(E.className+=n)}return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderAsyncRequestsContext.Consumer,null,(function(e){return l._asyncRequests=e&&e.requests,l._errors=e&&e.errors,l._logs=e&&e.logs,x?(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(p,__assign({},E)):d&&(S||l.props.emailMode)?(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(d,__assign({},_,{attributes:E,builderBlock:c,builderState:l.privateState})):(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(p,__assign({},E),d&&(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(d,__assign({builderState:l.privateState,builderBlock:c},_)),c.text||v.text?v.text:!d&&R&&Array.isArray(R)&&R.length?R.map((function(e,t){return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlock,{key:(l.id||\"\")+t,block:e,index:t,size:l.props.size,fieldName:l.props.fieldName,child:l.props.child,emailMode:l.props.emailMode})})):null)}))})))},Object.defineProperty(BuilderBlock.prototype,\"id\",{get:function(){var e=this.block;return e.id&&!e.id.startsWith(\"builder\")?\"builder-\"+e.id:e.id||\"\"},enumerable:!1,configurable:!0}),BuilderBlock.prototype.contents=function(e){var t=this,n=this.block;if(this.privateState=e,n.repeat&&n.repeat.collection){var i=n.repeat.collection,r=last((i||\"\").trim().split(\"(\")[0].trim().split(\".\")),o=n.repeat.itemName||(r?r+\"Item\":\"item\"),a=this.stringToFunction(i)(e.state,null,n,api(),Device,null,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder,this.privateState.context);return Array.isArray(a)?a.map((function(n,i){var r,a=__assign(__assign({},e.state),((r={$index:i,$item:n})[o]=n,r[\"$\".concat(o,\"Index\")]=i,r));return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderStoreContext.Provider,{key:i,value:__assign(__assign({},e),{state:a})},t.getElement(i,a))})):null}return this.getElement()},BuilderBlock.prototype.render=function(){var e=this;return this.state.hasError?(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\",{css:{display:\"inline-block\",padding:5,color:\"#999\",fontSize:11,fontStyle:\"italic\"}},\"Builder block error :( Check console for details\"):(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderStoreContext.Consumer,null,(function(t){return e.contents(t)}))},BuilderBlock}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),BuilderBlocks=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.hydrated=!1,t.onClickEmptyBlocks=function(){var e;_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isIframe&&t.noBlocks&&(null===(e=window.parent)||void 0===e||e.postMessage({type:\"builder.clickEmptyBlocks\",data:{parentElementId:t.parentId,dataPath:t.path}},\"*\"))},t.onHoverEmptyBlocks=function(){var e;_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&t.noBlocks&&(null===(e=window.parent)||void 0===e||e.postMessage({type:\"builder.hoverEmptyBlocks\",data:{parentElementId:t.parentId,dataPath:t.path}},\"*\"))},t}return __extends(t,e),Object.defineProperty(t.prototype,\"isRoot\",{get:function(){return!this.props.child},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"noBlocks\",{get:function(){var e=this.props.blocks;return!(e&&e.length)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"path\",{get:function(){var e=this.props.dataPath||\"\";return e.trim()&&(e.startsWith(\"this.\")?e=e.replace(\"this.\",\"\"):e.startsWith(\"component.options.\")||(e=\"component.options.\"+e)),e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"parentId\",{get:function(){return this.props.parentElementId?this.props.parentElementId:this.props.parent&&this.props.parent.id},enumerable:!1,configurable:!0}),t.prototype.componentDidMount=function(){this.hydrated=!0},t.prototype.render=function(){var e=this,t=this.props.blocks,n=this.props.emailMode?\"span\":\"div\";return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(n,__assign({className:\"builder-blocks\"+(this.noBlocks?\" no-blocks\":\"\")+(this.props.child?\" builder-blocks-child\":\"\")+(this.props.className?\" \"+this.props.className:\"\"),\"builder-type\":\"blocks\",\"builder-path\":_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isIframe&&this.hydrated?this.path:void 0,\"builder-parent-id\":this.parentId,css:__assign(__assign({},!this.props.emailMode&&{display:\"flex\",flexDirection:\"column\",alignItems:\"stretch\"}),this.props.style),onClick:function(){e.noBlocks&&e.onClickEmptyBlocks()}},_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&{onMouseEnter:function(){return e.onHoverEmptyBlocks()}}),t&&Array.isArray(t)&&t.map((function(t,n){return t&&\"@builder.io/sdk:Element\"===t[\"@type\"]?(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlock$1,{key:t.id,block:t,index:n,fieldName:e.props.fieldName,child:e.props.child,emailMode:e.props.emailMode}):t}))||t)},t.renderInto=function(e,n,i){if(void 0===n&&(n={}),e){var r=null;return\"string\"==typeof e?r=document.querySelector(e):e instanceof Element&&(r=e),react_dom__WEBPACK_IMPORTED_MODULE_3___default().render((0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderStoreContext.Provider,{value:i},(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(t,__assign({},n))),r)}},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),NoWrap=function(e){return e.children};function getData(e){if(void 0!==(null==e?void 0:e.data)){var t=e.data,n=t.blocks,i=t.blocksString,r=Array.isArray(n)||\"string\"==typeof i,o=__assign(__assign({},e.data),r&&{blocks:n||JSON.parse(i)});return delete o.blocksString,o}}var variantsScript=function(e,t){return\"\\n(function() {\\n  if (window.builderNoTrack || !navigator.cookieEnabled) {\\n    return;\\n  }\\n\\n  var variants = \".concat(e,\";\\n  function removeVariants() {\\n    variants.forEach(function (template) {\\n      document.querySelector('template[data-template-variant-id=\\\"' + template.id + '\\\"]').remove();\\n    });\\n    document.getElementById('variants-script-\").concat(t,'\\').remove();\\n  }\\n\\n  if (typeof document.createElement(\"template\").content === \\'undefined\\') {\\n    removeVariants();\\n    return ;\\n  }\\n\\n  function setCookie(name,value,days) {\\n    var expires = \"\";\\n    if (days) {\\n        var date = new Date();\\n        date.setTime(date.getTime() + (days*24*60*60*1000));\\n        expires = \"; expires=\" + date.toUTCString();\\n    }\\n    document.cookie = name + \"=\" + (value || \"\")  + expires + \"; path=/\" + \"; Secure; SameSite=None\";\\n  }\\n\\n  function getCookie(name) {\\n    var nameEQ = name + \"=\";\\n    var ca = document.cookie.split(\\';\\');\\n    for(var i=0;i < ca.length;i++) {\\n        var c = ca[i];\\n        while (c.charAt(0)==\\' \\') c = c.substring(1,c.length);\\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\\n    }\\n    return null;\\n  }\\n  var cookieName = \\'builder.tests.').concat(t,\"';\\n  var variantInCookie = getCookie(cookieName);\\n  var availableIDs = variants.map(function(vr) { return vr.id }).concat('\").concat(t,\"');\\n  var variantId;\\n  if (availableIDs.indexOf(variantInCookie) > -1) {\\n    variantId = variantInCookie;\\n  }\\n  if (!variantId) {\\n    var n = 0;\\n    var random = Math.random();\\n    for (var i = 0; i < variants.length; i++) {\\n      var variant = variants[i];\\n      var testRatio = variant.testRatio;\\n      n += testRatio;\\n      if (random < n) {\\n        setCookie(cookieName, variant.id);\\n        variantId = variant.id;\\n        break;\\n      }\\n    }\\n    if (!variantId) {\\n      variantId = \\\"\").concat(t,'\";\\n      setCookie(cookieName, \"').concat(t,'\");\\n    }\\n  }\\n  if (variantId && variantId !== \"').concat(t,\"\\\") {\\n    var winningTemplate = document.querySelector('template[data-template-variant-id=\\\"' + variantId + '\\\"]');\\n    if (winningTemplate) {\\n      var parentNode = winningTemplate.parentNode;\\n      var newParent = parentNode.cloneNode(false);\\n      newParent.appendChild(winningTemplate.content.firstChild);\\n      parentNode.parentNode.replaceChild(newParent, parentNode);\\n    }\\n  } else if (variants.length > 0) {\\n    removeVariants();\\n  }\\n})()\").replace(/\\s+/g,\" \")},VariantsProvider=function(e){var t=e.initialContent,n=e.children,i=e.nonce;if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.canTrack)return n([t]);if(!Boolean(Object.keys((null==t?void 0:t.variations)||{}).length))return n([t]);var r=Object.keys(t.variations).map((function(e){return __assign(__assign({id:e},t.variations[e]),{data:getData(t.variations[e])})})),o=__spreadArray(__spreadArray([],r,!0),[t],!1);if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer){var a=JSON.stringify(Object.keys(t.variations||{}).map((function(e){return{id:e,testRatio:t.variations[e].testRatio}})));return react__WEBPACK_IMPORTED_MODULE_2__.createElement(react__WEBPACK_IMPORTED_MODULE_2__.Fragment,null,n(o,(function(){return react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"script\",{nonce:i,id:\"variants-script-\".concat(t.id),dangerouslySetInnerHTML:{__html:variantsScript(a,t.id)}})})))}var s=\"builder.tests.\".concat(t.id),l=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.getCookie(s);if(!l&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser)for(var u=0,d=Math.random(),c=0;c<r.length;c++){var p=r[c];if(d<(u+=p.testRatio)){_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.setCookie(s,p.id),l=p.id;break}}return l||(l=t.id,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.setCookie(s,l)),n([o.find((function(e){return e.id===l}))])},BuilderContent=function(_super){function BuilderContent(){var _this=null!==_super&&_super.apply(this,arguments)||this;return _this.ref=null,_this.state={loading:!_this.props.content,data:getContentWithInfo(_this.props.content),updates:1},_this.onWindowMessage=function(event){var _a,_b,isTrusted=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isTrustedHostForEvent(event);if(isTrusted){var message=event.data;if(message)switch(message.type){case\"builder.patchUpdates\":if(null===(_a=_this.props.options)||void 0===_a?void 0:_a.noEditorUpdates)return;var data=message.data;if(!data||!data.data)break;var patches=data.data[null===(_b=_this.state.data)||void 0===_b?void 0:_b.id];if(!patches||!patches.length)return;location.href.includes(\"builder.debug=true\")&&eval(\"debugger\");for(var newData=_this.state.data,_i=0,patches_1=patches;_i<patches_1.length;_i++){var patch=patches_1[_i];newData=applyPatchWithMinimalMutationChain(newData,patch,!1)}_this.setState({updates:_this.state.updates+1,data:newData}),_this.props.contentLoaded&&_this.props.contentLoaded(newData.data,newData)}}},_this.subscriptions=new _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Subscription,_this.firstLoad=!0,_this.clicked=!1,_this.trackedImpression=!1,_this.intersectionObserver=null,_this.onClick=function(e){var t=e.nativeEvent,n=_this.data;n&&(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.autoTrack&&_this.builder.trackInteraction(n.id,_this.renderedVariantId,_this.clicked,t,{content:n}),_this.clicked||(_this.clicked=!0))},_this}return __extends(BuilderContent,_super),Object.defineProperty(BuilderContent.prototype,\"builder\",{get:function(){return this.props.builder||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder},enumerable:!1,configurable:!0}),Object.defineProperty(BuilderContent.prototype,\"name\",{get:function(){var e=this.props;return\"model\"in e?e.model:e.modelName},enumerable:!1,configurable:!0}),Object.defineProperty(BuilderContent.prototype,\"renderedVariantId\",{get:function(){var e,t,n=this.props.isStatic?this.builder.getCookie(\"builder.tests.\".concat(null===(e=this.data)||void 0===e?void 0:e.id)):null===(t=this.data)||void 0===t?void 0:t.variationId;if(null!==n)return n},enumerable:!1,configurable:!0}),Object.defineProperty(BuilderContent.prototype,\"options\",{get:function(){var e,t,n=__assign({},this.props.options||{});return n.key||!(null===(e=this.props.content)||void 0===e?void 0:e.id)||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isPreviewing||(n.key=this.props.content.id),!this.props.content||(null===(t=n.initialContent)||void 0===t?void 0:t.length)||!this.props.inline&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isPreviewing||(n.initialContent=[this.props.content]),n},enumerable:!1,configurable:!0}),Object.defineProperty(BuilderContent.prototype,\"data\",{get:function(){var e=(this.props.inline||!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser||this.firstLoad)&&this.options.initialContent&&this.options.initialContent[0]||this.state.data;return getContentWithInfo(e)},enumerable:!1,configurable:!0}),BuilderContent.prototype.componentDidMount=function(){var e,t;if(!this.props.inline||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isPreviewing)this.subscribeToContent();else if(this.props.inline&&(null===(t=null===(e=this.options)||void 0===e?void 0:e.initialContent)||void 0===t?void 0:t.length)){var n=this.options.initialContent[0];(null==n?void 0:n.id)&&this.builder.trackImpression(n.id,this.renderedVariantId,void 0,{content:n})}_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&addEventListener(\"message\",this.onWindowMessage)},BuilderContent.prototype.subscribeToContent=function(){var e=this;\"_inline\"!==this.name&&this.subscriptions.add(this.builder.queueGetContent(this.name,this.options).subscribe((function(t){var n=t&&t[0];e.setState({data:n,loading:!1});var i=(e.builder.editingModel||e.builder.previewingModel)===e.name;if(!e.props.inline&&e.props.content&&e.firstLoad&&i&&(e.firstLoad=!1,e.subscriptions.unsubscribe(),e.subscribeToContent()),n&&e.firstLoad&&(e.firstLoad=!1,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.autoTrack&&!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing)){var r=!1;if(\"function\"==typeof IntersectionObserver&&e.ref)try{(e.intersectionObserver=new IntersectionObserver((function(t,i){t.forEach((function(t){t.intersectionRatio>0&&!e.trackedImpression&&(e.builder.trackImpression(n.id,e.renderedVariantId,void 0,{content:e.data}),e.data,e.trackedImpression=!0,e.ref&&i.unobserve(e.ref))}))}))).observe(e.ref),r=!0}catch(e){console.warn(\"Could not bind intersection observer\")}r||(e.trackedImpression=!0,e.builder.trackImpression(n.id,e.renderedVariantId,void 0,{content:n}))}e.props.contentLoaded&&e.props.contentLoaded(n&&n.data,n)}),(function(t){e.props.contentError&&(e.props.contentError(t),e.setState({loading:!1}))})))},BuilderContent.prototype.componentWillUnmount=function(){_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&removeEventListener(\"message\",this.onWindowMessage),this.subscriptions.unsubscribe(),this.intersectionObserver&&this.ref&&this.intersectionObserver.unobserve(this.ref)},BuilderContent.prototype.render=function(){var e=this;if(this.props.dataOnly)return null;var t=this.state.loading,n=this.data,i=this.props.dataOnly?NoWrap:\"div\";return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(VariantsProvider,{initialContent:n,nonce:this.props.nonce},(function(r,o){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),null,r.map((function(a,s){var l=s===r.length-1?(react__WEBPACK_IMPORTED_MODULE_2___default().Fragment):\"template\";return react__WEBPACK_IMPORTED_MODULE_2___default().createElement((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),{key:String((null==a?void 0:a.id)+s)},\"template\"!==l&&(null==o?void 0:o()),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(l,__assign({key:String((null==a?void 0:a.id)+s)},\"template\"===l&&{\"data-template-variant-id\":null==a?void 0:a.id}),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(i,__assign({},0===s&&!e.props.dataOnly&&{ref:function(t){return e.ref=t}},{className:\"builder-content\",onClick:e.onClick,\"builder-content-id\":null==a?void 0:a.id,\"builder-model\":e.name}),e.props.children(null==a?void 0:a.data,!e.props.inline&&t,n))))})))}))},BuilderContent}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),getContentWithInfo=function(e){var t;if(e){var n=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.getCookie(\"builder.tests.\".concat(e.id)),i=n===e.id?e:null===(t=e.variations)||void 0===t?void 0:t[n],r=(null==i?void 0:i.name)||((null==i?void 0:i.id)===e.id?\"Default variation\":\"\");return __assign(__assign({},e),{variationId:n,testVariationId:n,testVariationName:r})}return null};function unwrapExports(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\"default\")?e.default:e}function createCommonjsModule(e,t){return e(t={exports:{}},t.exports),t.exports}var onChange_1=createCommonjsModule((function(e,t){Object.defineProperty(t,\"__esModule\",{value:!0});var n=Symbol(\"target\"),i=Symbol(\"unsubscribe\"),r=function(e,t){return t&&t.toString&&(e&&(e+=\".\"),e+=t.toString()),e},o=function(e){return Array.isArray(e)?e.slice():Object.assign({},e)},a=function(e,t,a){if(\"undefined\"==typeof Proxy)return e;void 0===a&&(a={});var s,l,u=Symbol(\"ProxyTarget\"),d=!1,c=!1,p=!1,f=a.equals||Object.is,m=new WeakMap,h=new WeakMap,v=new WeakMap,g=function(e,n,i,a){if(!p)if(d){if(d&&l&&void 0!==i&&void 0!==a&&\"length\"!==n){var u=l;e!==s&&function(e,t){for(var n;e;)-1===(n=e.indexOf(\".\"))&&(n=e.length),t(e.slice(0,n)),e=e.slice(n+1)}(e=e.replace(s,\"\").slice(1),(function(e){u[e]=o(u[e]),u=u[e]})),u[n]=i}c=!0}else t(r(e,n),a,i)},b=function(e,t){var n=m?m.get(e):void 0;n&&n.delete(t)},y=function(e,t){if(p)return e;h.set(e,t);var n=v.get(e);return void 0===n&&(n=new Proxy(e,x),v.set(e,n)),n},_=function(e){return p||!0===a.ignoreSymbols&&\"symbol\"==typeof e},x={get:function(e,t,o){if(t===u||t===n)return e;if(t===i&&\"\"===h.get(e))return function(e){return p=!0,m=null,h=null,v=null,e}(e);var s=Reflect.get(e,t,o);if(function(e){return null===e||\"object\"!=typeof e&&\"function\"!=typeof e}(s)||function(e){return e instanceof RegExp||e instanceof Number}(s)||\"constructor\"===t||!0===a.isShallow)return s;var l=function(e,t){var n=m?m.get(e):void 0;if(n)return n;n=new Map,m.set(e,n);var i=n.get(t);return i||(i=Reflect.getOwnPropertyDescriptor(e,t),n.set(t,i)),i}(e,t);if(l&&!l.configurable){if(l.set&&!l.get)return;if(!1===l.writable)return s}return y(s,r(h.get(e),t))},set:function(e,t,n,i){n&&void 0!==n[u]&&(n=n[u]);var r=_(t),o=r?null:Reflect.get(e,t,i),a=Reflect.set(e[u]||e,t,n);return r||f(o,n)||g(h.get(e),t,o,n),a},defineProperty:function(e,t,n){var i=Reflect.defineProperty(e,t,n);return _(t)||(b(e,t),g(h.get(e),t,void 0,n.value)),i},deleteProperty:function(e,t){if(!Reflect.has(e,t))return!0;var n=_(t),i=n?null:Reflect.get(e,t),r=Reflect.deleteProperty(e,t);return n||(b(e,t),g(h.get(e),t,i)),r},apply:function(e,t,n){var i=t instanceof Date;if(i&&(t=t[u]),!d){d=!0,i&&(l=t.valueOf()),(Array.isArray(t)||\"[object Object]\"===toString.call(t))&&(l=o(t[u])),s=(s=h.get(e)).slice(0,Math.max(s.lastIndexOf(\".\"),0));var r=Reflect.apply(e,t,n);return d=!1,(c||i&&!f(l,t.valueOf()))&&(g(s,\"\",l,t[u]||t),l=null,c=!1),r}return Reflect.apply(e,t,n)}},S=y(e,\"\");return t=t.bind(S),S};a.target=function(e){return e[n]||e},a.unsubscribe=function(e){return e[i]||e},e.exports=a,t.default=a})),onChange=unwrapExports(onChange_1),nextTick=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.nextTick;function debounceNextTick(e,t,n){return void 0===t&&\"function\"==typeof e?debounceNextTickImpl(e):{configurable:!0,enumerable:n.enumerable,get:function(){return Object.defineProperty(this,t,{configurable:!0,enumerable:n.enumerable,value:debounceNextTickImpl(n.value)}),this[t]}}}function debounceNextTickImpl(e){var t=null,n=null;return function(){var e=t;if(t=[].slice.call(arguments),n=this,null!==e)return;nextTick(i)};function i(){e.apply(n,t),t=null,n=null}}function throttle(e,t,n){var i,r,o;void 0===n&&(n={});var a=null,s=0,l=function(){s=!1===n.leading?0:Date.now(),a=null,o=e.apply(i,r),a||(i=r=null)};return function(){var u=Date.now();s||!1!==n.leading||(s=u);var d=t-(u-s);return i=this,r=arguments,d<=0||d>t?(a&&(clearTimeout(a),a=null),s=u,o=e.apply(i,r),a||(i=r=null)):a||!1===n.trailing||(a=setTimeout(l,d)),o}}var BuilderMetaContext=react__WEBPACK_IMPORTED_MODULE_2___default().createContext({emailMode:!1,ampMode:!1,isServer:!1}),tryEval=function(e,t,n){void 0===t&&(t={});var i=e;if(\"string\"==typeof i&&i.trim()){var r=!(i.includes(\";\")||i.includes(\" return \")),o=function(){};try{_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&(o=new Function(\"state\",\"var rootState = state;\\n        if (typeof Proxy !== 'undefined') {\\n          rootState = new Proxy(rootState, {\\n            set: function () {\\n              return false;\\n            },\\n            get: function (target, key) {\\n              if (key === 'state') {\\n                return state;\\n              }\\n              return target[key]\\n            }\\n          });\\n        }\\n        with (rootState) {\\n          \".concat(r?\"return (\".concat(e,\");\"):e,\";\\n        }\")))}catch(e){_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&console.warn(\"Could not compile javascript\",e)}try{if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser||shouldForceBrowserRuntimeInNode())return o(t||{});var a=safeDynamicRequire(\"isolated-vm\"),s=getIsolateContext(),l=makeFn(e,r,[\"state\"]),u=s.evalClosureSync(l,[new a.Reference(t||{})]);try{return JSON.parse(u)}catch(e){return u}}catch(t){n&&n.push(t),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser?console.warn(\"Builder custom code error:\",t.message,\"in\",e,t.stack):isDebug()&&console.debug(\"Builder custom code error:\",t.message,\"in\",e,t.stack)}}};function toError(e){return e instanceof Error?e:new Error(String(e))}function getBuilderPixel(e){return{id:\"builder-pixel-\"+Math.random().toString(36).split(\".\")[1],\"@type\":\"@builder.io/sdk:Element\",tagName:\"img\",properties:{role:\"presentation\",\"aria-hidden\":\"true\",src:\"https://cdn.builder.io/api/v1/pixel?apiKey=\".concat(e)},responsiveStyles:{large:{height:\"0\",width:\"0\",display:\"inline-block\",opacity:\"0\",overflow:\"hidden\",pointerEvents:\"none\"}}}}function pick(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var i={};return t.forEach((function(t){i[t]=e[t]})),i}function omit(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var i=__assign({},e);return t.forEach((function(e){delete i[e]})),i}var instancesMap=new Map,wrapComponent=function(e){return function(t){var n,i=t.builderTag||\"div\",r=[\"children\"].concat((null===(n=e.inputs)||void 0===n?void 0:n.map((function(e){return e.name})))||[]),o=omit.apply(void 0,__spreadArray(__spreadArray([t],r,!1),[\"attributes\"],!1)),a=t;return e.noWrap?react__WEBPACK_IMPORTED_MODULE_2___default().createElement(e.class,__assign({attributes:o},a)):react__WEBPACK_IMPORTED_MODULE_2___default().createElement(i,__assign({},o),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(e.class,__assign({},a)))}},size$1=function(e){return Object.keys(e).length};function debounce(e,t,n){var i;return void 0===n&&(n=!1),function(){var r=this,o=arguments;clearTimeout(i),i=setTimeout((function(){i=null,n||e.apply(r,o)}),t),n&&!i&&e.apply(r,o)}}var fontsLoaded=new Set,fetch$1;globalThis.fetch&&(fetch$1=globalThis.fetch),null!=fetch$1||(fetch$1=__webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\"));var sizeMap={desktop:\"large\",tablet:\"medium\",mobile:\"small\",xsmall:\"xsmall\"},fetchCache={};function searchToObject$1(e){var t=(e.search||\"\").substring(1).split(\"&\"),n={};for(var i in t)if(t[i]&&\"string\"==typeof t[i]){var r=t[i].split(\"=\");n[decodeURIComponent(r[0])]=decodeURIComponent(r[1])}return n}var BuilderComponent=function(e){function t(t){var n,i,r=this;(r=e.call(this,t)||this).subscriptions=new _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Subscription,r.onStateChange=new _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.BehaviorSubject(null),r.asServer=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer,r.contentRef=null,r.styleRef=null,r.rootState=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer?{}:onChange({},(function(){return r.updateState()})),r.lastJsCode=\"\",r.lastHttpRequests={},r.httpSubscriptionPerKey={},r.firstLoad=!0,r.ref=null,r.messageListener=function(e){var t;if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isTrustedHostForEvent(e)){var n=e.data;switch(n.type){case\"builder.configureSdk\":var i=n.data;if(!i.contentId||i.contentId!==(null===(t=r.useContent)||void 0===t?void 0:t.id))return;r.sizes=getSizesForBreakpoints(i.breakpoints||{}),r.setState({state:Object.assign(r.rootState,{deviceSize:r.deviceSizeState,device:r.device}),updates:(r.state&&r.state.updates||0)+1,breakpoints:i.breakpoints});break;case\"builder.updateSpacer\":var o=n.data;r.rootState._spacer,r.updateState((function(e){e._spacer=o}));break;case\"builder.resetState\":var a=n.data,s=a.state;if(a.model===r.name){for(var l in r.rootState)\"function\"!=typeof r.rootState[l]&&delete r.rootState[l];Object.assign(r.rootState,s),r.setState(__assign(__assign({},r.state),{state:r.rootState,updates:(r.state&&r.state.updates||0)+1}))}break;case\"builder.resetSymbolState\":var u=n.data.state,d=(s=u.state,u.model,u.id);if(r.props.builderBlock&&r.props.builderBlock===d){for(var l in r.rootState)delete r.rootState[l];Object.assign(r.rootState,s),r.setState(__assign(__assign({},r.state),{state:r.rootState,updates:(r.state&&r.state.updates||0)+1}))}}}},r.resizeFn=function(){var e=r.deviceSizeState;e!==r.state.state.deviceSize&&r.setState(__assign(__assign({},r.state),{updates:(r.state&&r.state.updates||0)+1,state:Object.assign(r.rootState,__assign(__assign({},r.state.state),{deviceSize:e}))}))},r.resizeListener=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing?throttle(r.resizeFn,200):debounce(r.resizeFn,400),r.mounted=!1,r.updateState=function(e){var t=r.rootState;e&&e(t),r.mounted?r.setState({update:r.updateState,state:t,updates:(r.state&&r.state.updates||0)+1}):r.state=__assign(__assign({},r.state),{update:r.updateState,state:t,updates:(r.state&&r.state.updates||0)+1}),r.notifyStateChange()},r.onContentLoaded=function(e,t){if(\"page\"===r.name&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&e){var n=e.title,i=e.pageTitle,o=e.description,a=e.pageDescription;if((n||i)&&(document.title=n||i),o||a){var s=document.querySelector('meta[name=\"description\"]');s||((s=document.createElement(\"meta\")).setAttribute(\"name\",\"description\"),document.head.appendChild(s)),s.setAttribute(\"content\",o||a)}}if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&r.notifyStateChange(),r.props.contentLoaded&&r.props.contentLoaded(e,t),e&&e.inputs&&Array.isArray(e.inputs)&&e.inputs.length&&(e.state||(e.state={}),e.inputs.forEach((function(t){t&&t.name&&void 0!==t.defaultValue&&void 0===e.state[t.name]&&(e.state[t.name]=t.defaultValue)}))),e&&e.state){var l=__assign(__assign({},r.state),{updates:(r.state&&r.state.updates||0)+1,state:Object.assign(r.rootState,__assign(__assign(__assign(__assign(__assign({},r.state.state),{location:r.locationState,device:r.device}),e.state),r.externalState),{deviceSize:r.deviceSizeState}))});r.mounted?r.setState(l):r.state=l}if(e&&e.jsCode&&!r.options.codegen){var u=!1;if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&(r.lastJsCode===e.jsCode?u=!0:r.lastJsCode=e.jsCode),!u){var d=r.state.state;try{new Function(\"data\",\"ref\",\"state\",\"update\",\"element\",\"Builder\",\"builder\",\"context\",e.jsCode)(e,r,d,r.state.update,r.ref,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder,r.state.context)}catch(t){var c=toError(t);_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser?console.warn(\"Builder custom code error:\",c.message,\"in\",e.jsCode,c.stack):isDebug()&&console.debug(\"Builder custom code error:\",c.message,\"in\",e.jsCode,c.stack)}}}if(e&&e.httpRequests&&!r.props.noAsync&&!(u=!1)){var p=function(t){var n=e.httpRequests[t];if(n&&(!r.data[t]||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing)){var i=\"object\"==typeof n&&\"@builder.io/core:Request\"===n[\"@type\"];if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser){var o=i?r.evalExpression(n.request.url):r.evalExpression(n);if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&r.lastHttpRequests[t]===o)return\"continue\";r.lastHttpRequests[t]=o,i?r.handleRequest(t,{url:o,method:n.request.method,body:n.request.body,headers:n.request.headers}):r.handleRequest(t,{url:o,method:\"GET\"});var a=r.httpSubscriptionPerKey[t];a&&a.unsubscribe();var s=r.httpSubscriptionPerKey[t]=r.onStateChange.subscribe((function(){var e=i?r.evalExpression(n.request.url):r.evalExpression(n);e!==o&&(i?r.handleRequest(t,{url:e,method:n.request.method,body:n.request.body,headers:n.request.headers}):r.handleRequest(t,{url:e,method:\"GET\"}),r.lastHttpRequests[t]=e)}));r.subscriptions.add(s)}else i?r.handleRequest(t,{url:r.evalExpression(n.request.url),method:n.request.method,body:n.request.body,headers:n.request.headers}):r.handleRequest(t,{url:r.evalExpression(n),method:\"GET\"})}};for(var f in e.httpRequests)p(f)}};var o=r.inlinedContent;o&&o.content&&(o=o.content),r.sizes=getSizesForBreakpoints((null===(n=null==o?void 0:o.meta)||void 0===n?void 0:n.breakpoints)||{});var a=null===(i=r.inlinedContent)||void 0===i?void 0:i.data;a&&Array.isArray(a.inputs)&&a.inputs.length>0&&(a.state||(a.state={}),a.inputs.forEach((function(e){e&&e.name&&void 0!==e.defaultValue&&void 0===a.state[e.name]&&(a.state[e.name]=e.defaultValue)}))),r.state={context:__assign(__assign({},t.context),{apiKey:r.props.apiKey||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.apiKey,nonce:r.props.nonce}),state:Object.assign(r.rootState,__assign(__assign(__assign(__assign({},r.inlinedContent&&r.inlinedContent.data&&r.inlinedContent.data.state),{isBrowser:_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser,isServer:!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser,_hydrate:t.hydrate,location:r.locationState,deviceSize:r.deviceSizeState,device:r.device}),r.getHtmlData()),t.data)),updates:0,key:0,update:r.updateState};var s=r.props.apiKey;if(s&&s!==r.builder.apiKey&&!instancesMap.has(s)){var l=new _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder(s,void 0,void 0,!0);instancesMap.set(s,l)}if(r.inlinedContent){var u=r.inlinedContent.content||r.inlinedContent;r.onContentLoaded(null==u?void 0:u.data,getContentWithInfo(u))}return r.registerCustomComponents(),r}return __extends(t,e),Object.defineProperty(t.prototype,\"options\",{get:function(){return __assign(__assign({},t.defaults),this.props)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"name\",{get:function(){return this.props.model||this.props.modelName||this.props.name},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"element\",{get:function(){return this.ref},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"inlinedContent\",{get:function(){if(!this.isPreviewing||this.props.inlineContent)return this.props.content},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"builder\",{get:function(){return this.props.apiKey&&instancesMap.get(this.props.apiKey)||this.props.builder||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder},enumerable:!1,configurable:!0}),t.prototype.getHtmlData=function(){var e=this.inlinedContent&&this.inlinedContent.id||this.props.entry,t=e&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&document.querySelector('script[data-builder-json=\"'.concat(e,'\"],script[data-builder-state=\"').concat(e,'\"]'));if(t)try{return JSON.parse(t.innerText)}catch(e){console.warn(\"Could not parse Builder.io HTML data transfer\",e,t.innerText)}return{}},Object.defineProperty(t.prototype,\"device\",{get:function(){return this.builder.getUserAttributes().device||\"desktop\"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"locationState\",{get:function(){return __assign(__assign({},pick(this.location,\"pathname\",\"hostname\",\"search\",\"host\")),{path:this.location.pathname&&this.location.pathname.split(\"/\").slice(1)||\"\",query:searchToObject$1(this.location)})},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"deviceSizeState\",{get:function(){return _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser?this.sizes.getSizeForWidth(window.innerWidth):sizeMap[this.device]||\"large\"},enumerable:!1,configurable:!0}),t.renderInto=function(e,n,i,r){if(void 0===n&&(n={}),void 0===i&&(i=!0),void 0===r&&(r=!1),console.debug(\"BuilderPage.renderInto\",e,n,i,this),e){var o=null;if(\"string\"==typeof e?o=document.querySelector(e):e instanceof Element&&(o=e),o){var a=o.classList.contains(\"builder-hydrated\");if(!a||r){o.classList.add(\"builder-hydrated\");var s=i&&o.innerHTML.includes(\"builder-block\");if(!o.classList.contains(\"builder-component\")){var l=o.querySelector(\".builder-api-styles\")||(o.previousElementSibling&&o.previousElementSibling.matches(\".builder-api-styles\")?o.previousElementSibling:null),u=\"\";if(l)l.innerHTML.replace(/\\/\\*start:([^\\*]+?)\\*\\/([\\s\\S]*?)\\/\\*end:([^\\*]+?)\\*\\//g,(function(e,t,n){var i=null;try{i=document.querySelector('[data-emotion-css=\"'.concat(t,'\"]'))}catch(e){console.warn(e)}return i?i.innerHTML=n:_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing||(u+=e),e})),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.nextTick((function(){l.innerHTML=u}));var d=o.querySelector(\".builder-component\");d?o=d:s=!1}location.search.includes(\"builder.debug=true\")&&console.debug(\"hydrate\",s,o);var c=o;if(!a){var p=document.createElement(\"div\");o.insertAdjacentElement(\"beforebegin\",p),p.appendChild(o),c=p}if((_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&location.search.includes(\"builder.preview=\"))&&(s=!1),s&&o){var f=react_dom__WEBPACK_IMPORTED_MODULE_3___default().render(react__WEBPACK_IMPORTED_MODULE_2___default().createElement(t,__assign({},n)),c,c.builderRootRef);return c.builderRootRef=f,f}var m=react_dom__WEBPACK_IMPORTED_MODULE_3___default().render(react__WEBPACK_IMPORTED_MODULE_2___default().createElement(t,__assign({},n)),c,c.builderRootRef);return c.builderRootRef=m,m}console.debug(\"Tried to hydrate multiple times\")}}},t.prototype.registerCustomComponents=function(){if(this.props.customComponents)for(var e=0,t=this.props.customComponents;e<t.length;e++){var n=t[e];if(n){var i=n.component,r=__rest(n,[\"component\"]);_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.registerComponent(i,r)}}},t.prototype.componentDidMount=function(){var e,t=this;this.mounted=!0,this.asServer&&(this.asServer=!1,this.updateState((function(e){e.isBrowser=!0,e.isServer=!1}))),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isIframe&&(null===(e=window.parent)||void 0===e||e.postMessage({type:\"builder.sdkInjected\",data:{modelName:this.name,apiKey:this.props.apiKey||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.apiKey}},\"*\")),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&(window.addEventListener(\"resize\",this.resizeListener),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&window.addEventListener(\"message\",this.messageListener),(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isPreviewing)&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.nextTick((function(){t.firstLoad=!1,t.reload()})),setTimeout((function(){window.dispatchEvent(new CustomEvent(\"builder:component:load\",{detail:{ref:t}}))})))},Object.defineProperty(t.prototype,\"isPreviewing\",{get:function(){return(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isPreviewing&&!this.firstLoad)&&(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.previewingModel===this.name||\"BUILDER_STUDIO\"===_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.previewingModel)},enumerable:!1,configurable:!0}),t.prototype.notifyStateChange=function(){if(!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer&&this&&this.state){var e=this.state.state;this.props.onStateChange&&this.props.onStateChange(e),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&window.dispatchEvent(new CustomEvent(\"builder:component:stateChange\",{detail:{state:e,ref:this}})),this.onStateChange.next(e)}},t.prototype.processStateFromApi=function(e){return e},Object.defineProperty(t.prototype,\"location\",{get:function(){return this.props.location||(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser?location:{})},enumerable:!1,configurable:!0}),t.prototype.getCssFromFont=function(e,t){var n=e.family+(e.kind&&!e.kind.includes(\"#\")?\", \"+e.kind:\"\"),i=n.split(\",\")[0],r=e.fileUrl?e.fileUrl:e.files&&e.files.regular,o=\"\";if(r&&n&&i&&(o+='\\n@font-face {\\n  font-family: \"'.concat(n,'\";\\n  src: local(\"').concat(i,\"\\\"), url('\").concat(r,\"') format('woff2');\\n  font-display: fallback;\\n  font-weight: 400;\\n}\\n        \").trim()),e.files)for(var a in e.files){if(String(Number(a))===a){var s=e.files[a];s&&s!==r&&(o+='\\n@font-face {\\n  font-family: \"'.concat(n,\"\\\";\\n  src: url('\").concat(s,\"') format('woff2');\\n  font-display: fallback;\\n  font-weight: \").concat(a,\";\\n}\\n          \").trim())}}return o},t.prototype.componentWillUnmount=function(){this.unsubscribe(),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&(window.removeEventListener(\"resize\",this.resizeListener),window.removeEventListener(\"message\",this.messageListener))},t.prototype.getFontCss=function(e){var t=this;return this.builder.allowCustomFonts&&(null==e?void 0:e.customFonts)&&e.customFonts.length&&e.customFonts.map((function(n){return t.getCssFromFont(n,e)})).join(\" \")||\"\"},t.prototype.ensureFontsLoaded=function(e){if(this.builder.allowCustomFonts&&(null==e?void 0:e.customFonts)&&Array.isArray(e.customFonts))for(var t=0,n=e.customFonts;t<n.length;t++){var i=n[t],r=i.fileUrl?i.fileUrl:i.files&&i.files.regular;if(!fontsLoaded.has(r)){var o=this.getCssFromFont(i,e);if(fontsLoaded.add(r),!o)continue;var a=document.createElement(\"style\");a.className=\"builder-custom-font\",a.setAttribute(\"data-builder-custom-font\",r),a.innerHTML=o,document.head.appendChild(a)}}},t.prototype.getCss=function(e){var t,n=null===(t=this.useContent)||void 0===t?void 0:t.id,i=(null==e?void 0:e.cssCode)||\"\";return n&&(i=i.replace(/&/g,\".builder-component-\".concat(n))),i+this.getFontCss(e)},Object.defineProperty(t.prototype,\"data\",{get:function(){var e,t=__assign(__assign(__assign({},this.inlinedContent&&(null===(e=this.inlinedContent.data)||void 0===e?void 0:e.state)),this.externalState),this.state.state);return Object.assign(this.rootState,t),t},enumerable:!1,configurable:!0}),t.prototype.componentDidUpdate=function(e){var t=this;this.props.data&&e.data!==this.props.data&&this.state.update((function(e){Object.assign(e,t.externalState)})),this.props.customComponents&&this.props.customComponents!==e.customComponents&&this.registerCustomComponents(),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&this.inlinedContent&&e.content!==this.inlinedContent&&this.onContentLoaded(this.inlinedContent.data,this.inlinedContent)},t.prototype.checkStyles=function(e){if(this.styleRef){var t=this.getCss(e);this.styleRef.innerHTML!==t&&(this.styleRef.innerHTML=t)}},t.prototype.reload=function(){this.setState({key:this.state.key+1})},Object.defineProperty(t.prototype,\"content\",{get:function(){var e=this.inlinedContent;return e&&e.content&&(e=__assign(__assign({},e),{data:e.content})),e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"externalState\",{get:function(){return __assign(__assign({},this.props.data),this.props.locale?{locale:this.props.locale}:{})},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"useContent\",{get:function(){return this.content||this.state.context.builderContent},enumerable:!1,configurable:!0}),t.prototype.render=function(){var e,t=this,n=this.content,i=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&this.externalState&&size$1(this.externalState)&&hash_sum__WEBPACK_IMPORTED_MODULE_4___default()(this.externalState),r=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing?this.name:this.props.entry;r&&!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&i&&i.length<300&&(r+=\":\"+i);var o=this.props.dataOnly?(react__WEBPACK_IMPORTED_MODULE_2___default().Fragment):\"div\",a=null===(e=this.useContent)||void 0===e?void 0:e.id;return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(o,{onClick:function(e){!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing||t.props.isChild||t.props.stopClickPropagationWhenEditing||e.stopPropagation()},className:\"builder-component \".concat(a?\"builder-component-\".concat(a):\"\"),\"data-name\":this.name,\"data-source\":\"Rendered by Builder.io\",key:this.state.key,ref:function(e){return t.ref=e}},react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderMetaContext.Consumer,null,(function(e){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderMetaContext.Provider,{value:\"boolean\"==typeof t.props.ampMode?__assign(__assign({},e),{ampMode:t.props.ampMode}):e},react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderAsyncRequestsContext.Consumer,null,(function(e){var i;return t._asyncRequests=e&&e.requests,t._errors=e&&e.errors,t._logs=e&&e.logs,react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderContent,{isStatic:t.props.isStatic||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isStatic,key:(null===(i=t.inlinedContent)||void 0===i?void 0:i.id)||(\"content\"in t.props&&!t.isPreviewing?\"null-content-prop\":\"no-content-prop\"),builder:t.builder,ref:function(e){return t.contentRef=e},contentLoaded:function(e,n){return t.onContentLoaded(e,n)},options:__assign(__assign(__assign(__assign(__assign(__assign({key:r,entry:t.props.entry},n&&{initialContent:[n]}),!n&&\"content\"in t.props&&!t.isPreviewing&&{initialContent:[]}),t.props.url&&{url:t.props.url}),t.props.options),t.props.locale?{locale:t.props.locale}:{}),t.options.codegen&&{format:\"react\"}),inline:t.props.inlineContent||!t.isPreviewing&&\"content\"in t.props,contentError:t.props.contentError,modelName:t.name||\"page\",nonce:t.props.nonce},(function(e,n,i){var r;if(t.props.dataOnly)return null;i&&i.id&&(t.state.breakpoints&&(i.meta=i.meta||{},i.meta.breakpoints=t.state.breakpoints),t.state.context.builderContent=i),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.nextTick((function(){t.checkStyles(e)}));var o=t.options.codegen;if(o&&!t.Component&&(null==e?void 0:e.blocksJs)){var a=Array.from(new Set(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.components.map((function(e){return e.name})))),s=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.components.slice().reverse(),l=a.map((function(e){return s.find((function(t){return t.class&&t.name===e}))})),u=a.map((function(e){return(e||\"\").replace(/[^\\w]+/gi,\"\")})),d=l.map((function(e){return wrapComponent(e)}));t.Component=(new(Function.bind.apply(Function,__spreadArray(__spreadArray([void 0,\"jsx\",\"_css\",\"Builder\",\"builder\",\"React\",\"useBuilderState\"],u,!1),[e.blocksJs],!1)))).apply(void 0,__spreadArray([_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.css,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder,(react__WEBPACK_IMPORTED_MODULE_2___default()),function(e){var t=react__WEBPACK_IMPORTED_MODULE_2___default().useState(0)[1];return react__WEBPACK_IMPORTED_MODULE_2___default().useState((function(){return onChange(e,(function(){t((function(e){return e+1}))}))}))[0]}],d,!1))}var c=(null==e?void 0:e.blocks)||[],p=c.find((function(e){var t;return null===(t=e.id)||void 0===t?void 0:t.startsWith(\"builder-pixel\")}));return e&&!p&&c.length>0&&c.push(getBuilderPixel(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.apiKey)),e?react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"div\",__assign({\"data-builder-component\":t.name,\"data-builder-content-id\":i.id},t.isPreviewing?{\"data-builder-variation-id\":i.testVariationId||i.variationId||i.id}:{}),!o&&t.getCss(e)&&react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"style\",{nonce:t.props.nonce,ref:function(e){return t.styleRef=e},className:\"builder-custom-styles\",dangerouslySetInnerHTML:{__html:t.getCss(e)}}),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderStoreContext.Provider,{value:__assign(__assign({},t.state),{rootState:t.rootState,state:t.data,content:i,renderLink:t.props.renderLink})},o&&t.Component?react__WEBPACK_IMPORTED_MODULE_2___default().createElement(t.Component,{data:t.data,context:t.state.context}):react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlocks,{key:String(!!(null===(r=null==e?void 0:e.blocks)||void 0===r?void 0:r.length)),emailMode:t.props.emailMode,fieldName:\"blocks\",blocks:c}))):n?react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"div\",{\"data-builder-component\":t.name,className:\"builder-loading\"},t.props.children):react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"div\",{\"data-builder-component\":t.name,className:\"builder-no-content\"})}))})))})))},t.prototype.evalExpression=function(e){var t=this,n=this.data;return String(e).replace(/{{([^}]+)}}/g,(function(e,i){return tryEval(i,n,t._errors)}))},t.prototype.handleRequest=function(e,t){return __awaiter(this,void 0,void 0,(function(){var n,i,r,o,a,s,l,u,d,c=this;return __generator(this,(function(p){return n=t.url,i=t.method,r=t.body,o=t.headers,a=JSON.stringify({url:n,method:i,body:r,headers:o}),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isIframe&&fetchCache[a]?(this.updateState((function(t){t[e]=fetchCache[a]})),[2,fetchCache[a]]):(s=function(){return __awaiter(c,void 0,void 0,(function(){var t,s,l,u,d;return __generator(this,(function(c){switch(c.label){case 0:t=Date.now(),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser||console.time(\"Fetch \"+a),c.label=1;case 1:return c.trys.push([1,4,5,6]),l={method:i,headers:o,body:r},\"GET\"===i&&delete l.body,[4,fetch$1(n,l)];case 2:return[4,c.sent().json()];case 3:return s=c.sent(),[3,6];case 4:return u=c.sent(),d=toError(u),this._errors&&this._errors.push(d),this._logs&&this._logs.push(\"Fetch to \".concat(a,\" errored in \").concat(Date.now()-t,\"ms\")),[2];case 5:return _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser||(console.timeEnd(\"Fetch \"+a),this._logs&&this._logs.push(\"Fetched \".concat(a,\" in \").concat(Date.now()-t,\"ms\"))),[7];case 6:return s&&(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isIframe&&(fetchCache[a]=s),this.updateState((function(t){t[e]=s}))),[2,s]}}))}))},(l=this._asyncRequests&&this._asyncRequests.find((function(e){return isRequestInfo(e)&&e.url===n})))?((u=l.promise).then((function(t){t&&c.updateState((function(n){n[e]=t}))})),[2,u]):(d=s(),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.nextTick((function(){c._asyncRequests&&c._asyncRequests.push(d)})),[2,d]))}))}))},t.prototype.unsubscribe=function(){this.subscriptions&&(this.subscriptions.unsubscribe(),this.subscriptions=new _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Subscription)},t.prototype.handleBuilderRequest=function(e,t){var n=this,i=tryEval(t,this.data,this._errors);this.subscriptions&&this.unsubscribe(),i&&this.subscriptions.add(this.builder.queueGetContent(i.model,i).subscribe((function(t){t&&n.updateState((function(n){n[e]=t}))})))},t.defaults={codegen:Boolean(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&location.href.includes(\"builder.codegen=true\"))},__decorate([debounceNextTick,__metadata(\"design:type\",Function),__metadata(\"design:paramtypes\",[]),__metadata(\"design:returntype\",void 0)],t.prototype,\"notifyStateChange\",null),t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component));function BuilderBlock(e){return e.type=\"react\",_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.Component(e)}function updateMetadata(e,t){var n=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.components.find((function(t){return\"string\"==typeof e?t.name===e:t.class===t}))||null,i=t(n);n&&i?_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.registerComponent(i.class||n.class,i):n&&!i||!n&&i&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.registerComponent(i.class,i)}function withBuilder(e,t){return BuilderBlock(t)(e),e}var isBuilderElement=function(e){return Boolean(\"object\"==typeof e&&e&&\"@builder.io/sdk:Element\"===(null==e?void 0:e[\"@type\"]))},withChildren=function(e){var t=react__WEBPACK_IMPORTED_MODULE_2___default().forwardRef((function(t,n){var i,r,o=__assign({},t),a=t.children||t.builderBlock&&t.builderBlock.children&&t.builderBlock.children.map((function(e){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlock$1,{key:e.id,block:e})})),s=null===(r=null===(i=t.builderBlock)||void 0===i?void 0:i.component)||void 0===r?void 0:r.options;return s&&Object.keys(s).forEach((function(e){var t=s[e];Array.isArray(t)&&t.every(isBuilderElement)?o[e]=t.map((function(e){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlock$1,{key:e.id,block:e})})):isBuilderElement(t)&&(o[e]=react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlock$1,{block:t}))})),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(e,__assign({},o,{ref:n}),a)}));return t.builderOptions={canHaveChildren:!0},t},noWrap=function(e){var t=react__WEBPACK_IMPORTED_MODULE_2___default().forwardRef((function(t,n){var i=__assign(__assign({},t),t.attributes);return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(e,__assign({},i,{ref:n}))}));return t.builderOptions={noWrap:!0},t},iconUrl=\"https://firebasestorage.googleapis.com/v0/b/builder-3b0a2.appspot.com/o/images%2Fbaseline-text_fields-24px%20(1).svg?alt=media&token=12177b73-0ee3-42ca-98c6-0dd003de1929\",TextComponent=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.textRef=null,t}return __extends(t,e),t.prototype.componentDidMount=function(){this.textRef&&!/{{([^}]+)}}/.test(this.props.text)&&(this.textRef.innerHTML=this.props.text)},t.prototype.evalExpression=function(e,t){return this.allowTextEdit?String(e):String(e).replace(/{{([^}]+)}}/g,(function(e,n){return tryEval(n,t)}))},Object.defineProperty(t.prototype,\"allowTextEdit\",{get:function(){return _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&location.search.includes(\"builder.allowTextEdit=true\")&&!(this.props.builderBlock&&this.props.builderBlock.bindings&&(this.props.builderBlock.bindings[\"component.options.text\"]||this.props.builderBlock.bindings[\"options.text\"]||this.props.builderBlock.bindings.text))},enumerable:!1,configurable:!0}),t.prototype.render=function(){var e=this,t={outline:\"none\",\"& p:first-of-type, & .builder-paragraph:first-of-type\":{margin:0},\"& > p, & .builder-paragraph\":{color:\"inherit\",lineHeight:\"inherit\",letterSpacing:\"inherit\",fontWeight:\"inherit\",fontSize:\"inherit\",textAlign:\"inherit\",fontFamily:\"inherit\"}};return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderStoreContext.Consumer,null,(function(n){var i;return(null===(i=n.content.meta)||void 0===i?void 0:i.rtlMode)&&(t.direction=\"rtl\"),(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),null,(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\",__assign({ref:function(t){e.textRef=t},css:t,className:\"builder-text\"},{dangerouslySetInnerHTML:{__html:e.evalExpression(e.props.text||e.props.content||\"\",n.state)}})))}))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Text=withBuilder(TextComponent,{name:\"Text\",static:!0,image:iconUrl,inputs:[{name:\"text\",type:\"html\",required:!0,autoFocus:!0,bubble:!0,defaultValue:\"Enter some text...\"}],defaultStyles:{lineHeight:\"normal\",height:\"auto\",textAlign:\"center\"}});function Slot(e){var t=e.name,n=(0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(BuilderStoreContext),i=!n.context.symbolId;return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",__assign({css:{pointerEvents:\"auto\"}},i&&{\"builder-slot\":t}),(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlocks,{child:!0,parentElementId:n.context.symbolId,dataPath:\"symbol.data.\".concat(t),blocks:n.state[t]||[]}))}_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.registerComponent(Slot,{name:\"Slot\",description:\"Allow child blocks to be inserted into this content when used as a Symbol\",docsLink:\"https://www.builder.io/c/docs/symbols-with-blocks\",image:\"https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F3aad6de36eae43b59b52c85190fdef56\",inputs:[{name:\"name\",type:\"string\",required:!0,defaultValue:\"children\"}]});var FragmentComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(){return this.props.builderBlock&&this.props.builderBlock.children&&this.props.builderBlock.children.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlock$1,{block:e,key:e.id,index:t})}))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Fragment=withBuilder(FragmentComponent,{name:\"Core:Fragment\",canHaveChildren:!0,noWrap:!0,static:!0,hideFromInsertMenu:!0}),DEFAULT_ASPECT_RATIO$2=.7004048582995948,defaultBlocks=[{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{display:\"flex\",flexDirection:\"column\",alignItems:\"stretch\",flexShrink:\"0\",position:\"relative\",marginTop:\"30px\",textAlign:\"center\",lineHeight:\"normal\",height:\"auto\",minHeight:\"20px\",minWidth:\"20px\",overflow:\"hidden\"}},component:{name:\"Image\",options:{image:\"https://builder.io/api/v1/image/assets%2Fpwgjf0RoYWbdnJSbpBAjXNRMe9F2%2Ffb27a7c790324294af8be1c35fe30f4d\",backgroundPosition:\"center\",backgroundSize:\"cover\",aspectRatio:DEFAULT_ASPECT_RATIO$2}}},{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{display:\"flex\",flexDirection:\"column\",alignItems:\"stretch\",flexShrink:\"0\",position:\"relative\",marginTop:\"30px\",textAlign:\"center\",lineHeight:\"normal\",height:\"auto\"}},component:{name:\"Text\",options:{text:\"<p>Enter some text...</p>\"}}}],ColumnsComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),Object.defineProperty(t.prototype,\"columns\",{get:function(){return this.props.columns||[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"gutterSize\",{get:function(){return\"number\"==typeof this.props.space?this.props.space||0:20},enumerable:!1,configurable:!0}),t.prototype.getWidth=function(e){return this.columns[e]&&this.columns[e].width||100/this.columns.length},t.prototype.getColumnWidth=function(e){var t=this.columns,n=this.gutterSize,i=this.getWidth(e),r=n*(t.length-1)*(i/100);return\"calc(\".concat(i,\"% - \").concat(r,\"px)\")},t.prototype.render=function(){var e,t,n,i,r=this,o=this.columns,a=this.gutterSize,s=(null===(i=null===(n=null===(t=this.props.builderState)||void 0===t?void 0:t.context.builderContent)||void 0===n?void 0:n.meta)||void 0===i?void 0:i.breakpoints)||{},l=getSizesForBreakpoints(s);return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),null,(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{className:\"builder-columns\",css:__assign({display:\"flex\",height:\"100%\"},\"never\"!==this.props.stackColumnsAt&&(e={},e[\"@media (max-width: \".concat(\"tablet\"!==this.props.stackColumnsAt?l.small.max:l.medium.max,\"px)\")]={flexDirection:this.props.reverseColumnsWhenStacked?\"column-reverse\":\"column\",alignItems:\"stretch\"},e))},o.map((function(e,t){var n,i,o=e.link?Link:\"div\";return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),{key:t},(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(o,__assign({className:\"builder-column\"},e.link?{href:e.link}:null,{css:__assign((n={display:\"flex\",flexDirection:\"column\",alignItems:\"stretch\",lineHeight:\"normal\"},n[\"& > .builder-blocks\"]={flexGrow:1},n.width=r.getColumnWidth(t),n.marginLeft=0===t?0:a,n),\"never\"!==r.props.stackColumnsAt&&(i={},i[\"@media (max-width: \".concat(\"tablet\"!==r.props.stackColumnsAt?l.small.max:l.medium.max,\"px)\")]={width:\"100%\",marginLeft:0},i))}),(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlocks,{key:t,child:!0,parentElementId:r.props.builderBlock&&r.props.builderBlock.id,blocks:e.blocks,dataPath:\"component.options.columns.\".concat(t,\".blocks\")})))}))))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Columns=withBuilder(ColumnsComponent,{name:\"Columns\",static:!0,inputs:[{name:\"columns\",type:\"array\",broadcast:!0,subFields:[{name:\"blocks\",type:\"array\",hideFromUI:!0,defaultValue:defaultBlocks},{name:\"width\",type:\"number\",hideFromUI:!0,helperText:\"Width %, e.g. set to 50 to fill half of the space\"},{name:\"link\",type:\"url\",helperText:\"Optionally set a url that clicking this column will link to\"}],defaultValue:[{blocks:defaultBlocks},{blocks:defaultBlocks}],onChange:function(e){function t(){n.forEach((function(e){e.delete(\"width\")}))}var n=e.get(\"columns\");Array.isArray(n)&&(!n.find((function(e){return e.get(\"width\")}))||(n.find((function(e){return!e.get(\"width\")}))||100!==n.reduce((function(e,t){return e+t.get(\"width\")}),0))&&t())}},{name:\"space\",type:\"number\",defaultValue:20,helperText:\"Size of gap between columns\",advanced:!0},{name:\"stackColumnsAt\",type:\"string\",defaultValue:\"tablet\",helperText:\"Convert horizontal columns to vertical at what device size\",enum:[\"tablet\",\"mobile\",\"never\"],advanced:!0},{name:\"reverseColumnsWhenStacked\",type:\"boolean\",defaultValue:!1,helperText:\"When stacking columns for mobile devices, reverse the ordering\",advanced:!0}]}),EmbedComponent=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.elementRef=null,t.scriptsInserted=new Set,t.scriptsRun=new Set,t}return __extends(t,e),t.prototype.shouldComponentUpdate=function(e){return e.content!==this.props.content},t.prototype.componentDidUpdate=function(e){this.props.content!==e.content&&this.findAndRunScripts()},t.prototype.componentDidMount=function(){this.findAndRunScripts()},t.prototype.findAndRunScripts=function(){if(this.elementRef&&\"undefined\"!=typeof window)for(var e=this.elementRef.getElementsByTagName(\"script\"),t=0;t<e.length;t++){var n=e[t];if(n.src){if(this.scriptsInserted.has(n.src))continue;this.scriptsInserted.add(n.src);var i=document.createElement(\"script\");i.async=!0,i.src=n.src,document.head.appendChild(i)}else{if(this.scriptsRun.has(n.innerText))continue;this.scriptsRun.add(n.innerText);try{new Function(n.innerText)()}catch(e){console.warn(\"Builder custom code component error:\",e)}}}},Object.defineProperty(t.prototype,\"content\",{get:function(){return _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer?(this.props.content||\"\").replace(/<script[\\s\\S]*?<\\/script>/g,\"\"):this.props.content},enumerable:!1,configurable:!0}),t.prototype.render=function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"div\",{ref:function(t){return e.elementRef=t},className:\"builder-embed\",dangerouslySetInnerHTML:{__html:this.content}})},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Embed=withBuilder(EmbedComponent,{name:\"Embed\",static:!0,inputs:[{name:\"url\",type:\"url\",required:!0,defaultValue:\"\",helperText:\"e.g. enter a youtube url, google map, etc\"},{name:\"content\",type:\"html\",defaultValue:'<div style=\"padding: 20px; text-align: center\">(Choose an embed URL)<div>',hideFromUI:!0}]}),globalReplaceNodes={}||null,isShopify$1=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&\"Shopify\"in window;if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&globalReplaceNodes){var customCodeQuerySelector_1=\".builder-custom-code\";try{var allCustomCodeElements_1=Array.from(document.querySelectorAll(customCodeQuerySelector_1)),builderTemplates=document.querySelectorAll(\"template[data-template-variant-id]\");builderTemplates.length&&Array.from(builderTemplates).forEach((function(e){var t=e.content.querySelectorAll(customCodeQuerySelector_1);t.length&&(allCustomCodeElements_1=allCustomCodeElements_1.concat(Array.from(t)))})),allCustomCodeElements_1.forEach((function(e){var t=e.parentElement,n=t&&t.getAttribute(\"builder-id\");n&&(globalReplaceNodes[n]=globalReplaceNodes[n]||[],globalReplaceNodes[n].push(isShopify$1?e:e.cloneNode(!0)))}))}catch(e){console.error(\"Builder replace nodes error:\",e)}}var CustomCodeComponent=function(e){function t(t){var n,i=this;if((i=e.call(this,t)||this).elementRef=null,i.originalRef=null,i.scriptsInserted=new Set,i.scriptsRun=new Set,i.firstLoad=!0,i.replaceNodes=!1,i.state={hydrated:!1},_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser){var r=null===(n=i.props.builderBlock)||void 0===n?void 0:n.id;if(i.replaceNodes=Boolean(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&(t.replaceNodes||isShopify$1)&&r&&(null==globalReplaceNodes?void 0:globalReplaceNodes[r])),i.firstLoad&&i.props.builderBlock)if(r&&(null==globalReplaceNodes?void 0:globalReplaceNodes[r])){var o=globalReplaceNodes[r].shift()||null;i.originalRef=o,0===globalReplaceNodes[r].length&&delete globalReplaceNodes[r]}else if(i.replaceNodes){var a=document.querySelectorAll(\".\".concat(i.props.builderBlock.id,\" .builder-custom-code\"));if(1===a.length){var s=a[0];i.originalRef=s,i.originalRef.remove()}}}return i}return __extends(t,e),t.prototype.shouldComponentUpdate=function(e){return e.code!==this.props.code},Object.defineProperty(t.prototype,\"noReactRender\",{get:function(){var e;return Boolean(isShopify$1&&(null===(e=this.props.code)||void 0===e?void 0:e.match(/{[{%]/g)))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"isHydrating\",{get:function(){return!isShopify$1&&this.originalRef},enumerable:!1,configurable:!0}),t.prototype.componentDidUpdate=function(e){this.props.code!==e.code&&this.findAndRunScripts()},t.prototype.componentDidMount=function(){var e=this;this.firstLoad=!1,this.replaceNodes||(this.isHydrating?(this.setState({hydrated:!0}),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.nextTick((function(){return e.findAndRunScripts()}))):this.findAndRunScripts()),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&this.replaceNodes&&this.originalRef&&this.elementRef&&this.elementRef.appendChild(this.originalRef)},t.prototype.findAndRunScripts=function(){if(this.elementRef&&\"undefined\"!=typeof window)for(var e=this.elementRef.getElementsByTagName(\"script\"),t=0;t<e.length;t++){var n=e[t];if(n.src){if(this.scriptsInserted.has(n.src))continue;this.scriptsInserted.add(n.src);var i=document.createElement(\"script\");i.async=!0,i.src=n.src,document.head.appendChild(i)}else if(!n.type||[\"text/javascript\",\"application/javascript\",\"application/ecmascript\"].includes(n.type)){if(this.scriptsRun.has(n.innerText))continue;try{this.scriptsRun.add(n.innerText),new Function(n.innerText)()}catch(e){console.warn(\"Builder custom code component error:\",e)}}}},Object.defineProperty(t.prototype,\"code\",{get:function(){return(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer||this.isHydrating&&this.firstLoad)&&this.props.scriptsClientOnly?(this.props.code||\"\").replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\"\"):this.props.code},enumerable:!1,configurable:!0}),t.prototype.render=function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"div\",__assign({ref:function(t){return e.elementRef=t},className:\"builder-custom-code\"},!this.replaceNodes&&!this.noReactRender&&{dangerouslySetInnerHTML:{__html:this.code}}))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),CustomCode=withBuilder(CustomCodeComponent,{name:\"Custom Code\",static:!0,requiredPermissions:[\"editCode\"],inputs:[{name:\"code\",type:\"html\",required:!0,defaultValue:\"<p>Hello there, I am custom HTML code!</p>\",code:!0},__assign({name:\"replaceNodes\",type:\"boolean\",helperText:\"Preserve server rendered dom nodes\",advanced:!0},isShopify$1&&{defaultValue:!0}),__assign({name:\"scriptsClientOnly\",type:\"boolean\",helperText:\"Only print and run scripts on the client. Important when scripts influence DOM that could be replaced when client loads\",advanced:!0},!isShopify$1&&{defaultValue:!0})]}),IMAGE_FILE_TYPES=[\"jpeg\",\"jpg\",\"png\",\"svg\",\"webp\",\"gif\",\"jfif\",\"pjpeg\",\"pjp\",\"apng\",\"avif\",\"tif\",\"tiff\",\"heif\",\"bmp\",\"eps\",\"raw\",\"cr2\",\"nef\",\"orf\",\"sr2\",\"psd\",\"heic\",\"dib\",\"ai\"],VIDEO_FILE_TYPES=[\"mp4\",\"webm\",\"mkv\",\"flv\",\"vob\",\"ogv\",\"ogg\",\"drc\",\"gif\",\"gifv\",\"mng\",\"avi\",\"mov\",\"qt\",\"mts\",\"m2ts\",\"ts\",\"wmv\",\"yuv\",\"rm\",\"rmvb\",\"viv\",\"asf\",\"amv\",\"m4p\",\"mpeg\",\"mpe\",\"m2v\",\"m4v\",\"svi\",\"3gp\",\"3g2\",\"mxf\",\"roq\",\"nsv\",\"f4v\",\"f4p\",\"f4a\",\"f4b\"];function removeProtocol(e){return e.replace(/http(s)?:/,\"\")}function isElementInViewport(e){var t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)}function getShopifyImageUrl(e,t){if(!e||!(null==e?void 0:e.match(/cdn\\.shopify\\.com/))||!t)return e;if(\"master\"===t)return removeProtocol(e);var n=e.match(/(_\\d+x(\\d+)?)?(\\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\\?v=\\d+)?)/i);if(n){var i=e.split(n[0]),r=n[3],o=t.match(\"x\")?t:\"\".concat(t,\"x\");return removeProtocol(\"\".concat(i[0],\"_\").concat(o).concat(r))}return null}var DEFAULT_ASPECT_RATIO$1=.7041;function updateQueryParam(e,t,n){void 0===e&&(e=\"\");var i=new RegExp(\"([?&])\"+t+\"=.*?(&|$)\",\"i\"),r=-1!==e.indexOf(\"?\")?\"&\":\"?\";return e.match(i)?e.replace(i,\"$1\"+t+\"=\"+encodeURIComponent(n)+\"$2\"):e+r+t+\"=\"+encodeURIComponent(n)}function getSrcSet(e){if(!e)return e;var t=[100,200,400,800,1200,1600,2e3];if(e.match(/builder\\.io/)){var n=e,i=Number(e.split(\"?width=\")[1]);return isNaN(i)||(n=\"\".concat(n,\" \").concat(i,\"w\")),t.filter((function(e){return e!==i})).map((function(t){return\"\".concat(updateQueryParam(e,\"width\",t),\" \").concat(t,\"w\")})).concat([n]).join(\", \")}return e.match(/cdn\\.shopify\\.com/)?t.map((function(t){return[getShopifyImageUrl(e,\"\".concat(t,\"x\").concat(t)),t]})).filter((function(e){return!!e[0]})).map((function(e){var t=e[0],n=e[1];return\"\".concat(t,\" \").concat(n,\"w\")})).concat([e]).join(\", \"):e}var getSizes=function(e,t,n){var i,r,o,a,s,l,u,d;void 0===n&&(n={});var c=\"\";if(e){var p=e.split(\",\"),f=p.length;c=p.map((function(e,t){return f===t+1?e.replace(/\\([\\s\\S]*?\\)/g,\"\").trim():e})).join(\", \")}else if(t&&t.responsiveStyles){var m=[],h=!1,v=/^\\d+/,g=getSizesForBreakpoints(n);if(null===(o=null===(r=null===(i=t.responsiveStyles)||void 0===i?void 0:i.small)||void 0===r?void 0:r.width)||void 0===o?void 0:o.match(v)){h=!0;var b=\"(max-width: \".concat(g.small.max,\"px)\"),y=\"\".concat(b,\" \").concat(t.responsiveStyles.small.width.replace(\"%\",\"vw\"));m.push(y)}if(null===(l=null===(s=null===(a=t.responsiveStyles)||void 0===a?void 0:a.medium)||void 0===s?void 0:s.width)||void 0===l?void 0:l.match(v)){h=!0;b=\"(max-width: \".concat(g.medium.max,\"px)\"),y=\"\".concat(b,\" \").concat(t.responsiveStyles.medium.width.replace(\"%\",\"vw\"));m.push(y)}if(null===(d=null===(u=t.responsiveStyles)||void 0===u?void 0:u.large)||void 0===d?void 0:d.width){var _=t.responsiveStyles.large.width.replace(\"%\",\"vw\");m.push(_)}else h&&m.push(\"100vw\");m.length&&(c=m.join(\", \"))}return c},ImageComponent=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.state={imageLoaded:!t.useLazyLoading,load:!t.useLazyLoading},t.pictureRef=null,t.scrollListener=null,t.intersectionObserver=null,t}return __extends(t,e),Object.defineProperty(t.prototype,\"useLazyLoading\",{get:function(){return!this.props.highPriority&&((!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser||!location.search.includes(\"builder.lazyLoadImages=false\"))&&(!(!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser||!location.href.includes(\"builder.lazyLoadImages=true\"))||this.props.lazy))},enumerable:!1,configurable:!0}),t.prototype.componentWillUnmount=function(){_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&(this.scrollListener&&(window.removeEventListener(\"scroll\",this.scrollListener),this.scrollListener=null),this.intersectionObserver&&this.pictureRef&&this.intersectionObserver.unobserve(this.pictureRef))},t.prototype.componentDidMount=function(){var e=this;if(this.props.lazy&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser)if(this.pictureRef&&isElementInViewport(this.pictureRef))this.setState({load:!0});else if(\"function\"==typeof IntersectionObserver&&this.pictureRef){(this.intersectionObserver=new IntersectionObserver((function(t,n){t.forEach((function(t){t.intersectionRatio>0&&(e.setState({load:!0}),e.pictureRef&&n.unobserve(e.pictureRef))}))}))).observe(this.pictureRef)}else{var t=throttle((function(n){if(e.pictureRef){var i=e.pictureRef.getBoundingClientRect(),r=window.innerHeight/2;i.top<window.innerHeight+r&&(e.setState(__assign(__assign({},e.state),{load:!0})),window.removeEventListener(\"scroll\",t),e.scrollListener=null)}}),400,{leading:!1,trailing:!0});this.scrollListener=t,window.addEventListener(\"scroll\",t,{capture:!0,passive:!0}),t()}},Object.defineProperty(t.prototype,\"image\",{get:function(){return this.props.image||this.props.src},enumerable:!1,configurable:!0}),t.prototype.getSrcSet=function(){var e=this.image;if(e&&\"string\"==typeof e&&!this.props.noWebp&&(e.match(/builder\\.io/)||e.match(/cdn\\.shopify\\.com/)))return getSrcSet(e)},t.prototype.render=function(){var e,t,n=this,i=this.props,r=i.aspectRatio,o=i.lazy,a=i.builderBlock,s=i.builderState,l=this.props.builderBlock&&this.props.builderBlock.children,u=this.props.srcset,d=getSizes(this.props.sizes,a,(null===(t=null===(e=null==s?void 0:s.context.builderContent)||void 0===e?void 0:e.meta)||void 0===t?void 0:t.breakpoints)||{}),c=this.image;u&&c&&c.includes(\"builder.io/api/v1/image\")?u.includes(c.split(\"?\")[0])||(console.debug(\"Removed given srcset\"),u=this.getSrcSet()):c&&!u&&(u=this.getSrcSet());var p=(null==a?void 0:a.id.startsWith(\"builder-pixel-\"))||this.props.highPriority,f=this.props.fitContent;return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderMetaContext.Consumer,null,(function(e){var t,i=e.ampMode,a=i?\"amp-img\":\"img\",s=(!o||n.state.load||i)&&(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(a,__assign({},i?{layout:\"responsive\",height:n.props.height||(r?Math.round(1e3*r):void 0),width:n.props.width||(r?Math.round(1e3/r):void 0)}:null,{alt:n.props.altText,title:n.props.title,key:_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&\"string\"==typeof n.image&&n.image.split(\"?\")[0]||void 0,role:n.props.altText?void 0:\"presentation\",css:__assign(__assign({opacity:i?1:n.useLazyLoading&&!n.state.imageLoaded?0:1,transition:\"opacity 0.2s ease-in-out\",objectFit:n.props.backgroundSize||\"cover\",objectPosition:n.props.backgroundPosition||\"center\"},r&&!i&&{position:\"absolute\",height:\"100%\",width:\"100%\",left:0,top:0}),i&&(t={},t[\"& img\"]={objectFit:n.props.backgroundSize,objectPosition:n.props.backgroundPosition},t)),loading:p?\"eager\":\"lazy\",fetchPriority:p?\"high\":\"auto\",className:\"builder-image\"+(n.props.className?\" \"+n.props.className:\"\"),src:n.image},!i&&{onLoad:function(){return n.setState({imageLoaded:!0})}},{srcSet:u,sizes:!i&&d?d:void 0}));return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),null,i?s:(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"picture\",{ref:function(e){return n.pictureRef=e}},u&&u.match(/builder\\.io/)&&!n.props.noWebp&&(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"source\",{srcSet:u.replace(/\\?/g,\"?format=webp&\"),type:\"image/webp\"}),s),!r||i||f&&l&&l.length?null:(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{className:\"builder-image-sizer\",css:{width:\"100%\",paddingTop:100*r+\"%\",pointerEvents:\"none\",fontSize:0}},\" \"),l&&l.length?f?l.map((function(e,t){return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlock$1,{key:e.id,block:e})})):(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{css:{display:\"flex\",flexDirection:\"column\",alignItems:\"stretch\",position:\"absolute\",top:0,left:0,width:\"100%\",height:\"100%\"}},l.map((function(e,t){return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlock$1,{key:e.id,block:e})}))):null)}))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Image=withBuilder(ImageComponent,{name:\"Image\",static:!0,image:\"https://firebasestorage.googleapis.com/v0/b/builder-3b0a2.appspot.com/o/images%2Fbaseline-insert_photo-24px.svg?alt=media&token=4e5d0ef4-f5e8-4e57-b3a9-38d63a9b9dc4\",defaultStyles:{position:\"relative\",minHeight:\"20px\",minWidth:\"20px\",overflow:\"hidden\"},canHaveChildren:!0,inputs:[{name:\"image\",type:\"file\",bubble:!0,allowedFileTypes:IMAGE_FILE_TYPES,required:!0,defaultValue:\"https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F72c80f114dc149019051b6852a9e3b7a\",onChange:function(e){e.delete(\"srcset\"),e.delete(\"noWebp\");var t,n,i=e.get(\"image\"),r=e.get(\"aspectRatio\");if(fetch(i).then((function(e){return e.blob()})).then((function(t){t.type.includes(\"svg\")&&e.set(\"noWebp\",!0)})),i&&(!r||.7041===r))return(t=i,void 0===n&&(n=6e4),new Promise((function(e,i){var r=document.createElement(\"img\"),o=!1;r.onload=function(){o=!0,e(r)},r.addEventListener(\"error\",(function(e){console.warn(\"Image load failed\",e.error),i(e.error)})),r.src=t,setTimeout((function(){o||i(new Error(\"Image load timed out\"))}),n)}))).then((function(t){var n,r=e.get(\"aspectRatio\");e.get(\"image\")!==i||r&&.7041!==r||t.width&&t.height&&(e.set(\"aspectRatio\",(n=t.height/t.width,Math.round(1e3*n)/1e3)),e.set(\"height\",t.height),e.set(\"width\",t.width))}))}},{name:\"backgroundSize\",type:\"text\",defaultValue:\"cover\",enum:[{label:\"contain\",value:\"contain\",helperText:\"The image should never get cropped\"},{label:\"cover\",value:\"cover\",helperText:\"The image should fill its box, cropping when needed\"}]},{name:\"backgroundPosition\",type:\"text\",defaultValue:\"center\",enum:[\"center\",\"top\",\"left\",\"right\",\"bottom\",\"top left\",\"top right\",\"bottom left\",\"bottom right\"]},{name:\"altText\",type:\"string\",helperText:\"Text to display when the user has images off\"},{name:\"title\",type:\"string\",helperText:\"Text to display when hovering over the asset\"},{name:\"highPriority\",type:\"boolean\",advanced:!0,helperText:\"Mark this image as high priority compared to other images on the page. This prevents lazy loading of the image and tells the browser to load this image before others on the page.\"},{name:\"height\",type:\"number\",hideFromUI:!0},{name:\"width\",type:\"number\",hideFromUI:!0},{name:\"sizes\",type:\"string\",hideFromUI:!0},{name:\"srcset\",type:\"string\",hideFromUI:!0},{name:\"lazy\",type:\"boolean\",defaultValue:!0,hideFromUI:!0},{name:\"fitContent\",type:\"boolean\",helperText:\"When child blocks are provided, fit to them instead of using the image's aspect ratio\",defaultValue:!0},{name:\"aspectRatio\",type:\"number\",helperText:\"This is the ratio of height/width, e.g. set to 1.5 for a 300px wide and 200px tall photo. Set to 0 to not force the image to maintain it's aspect ratio\",advanced:!0,defaultValue:DEFAULT_ASPECT_RATIO$1}]}),DEFAULT_ASPECT_RATIO=.7004048582995948,VideoComponent=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.video=null,t.containerRef=null,t.lazyVideoObserver=null,t.state={load:!t.lazyLoad},t}return __extends(t,e),Object.defineProperty(t.prototype,\"lazyLoad\",{get:function(){return!1!==this.props.lazyLoad},enumerable:!1,configurable:!0}),t.prototype.updateVideo=function(){var e=this,t=this.video;if(t){[\"muted\",\"playsInline\",\"autoPlay\"].forEach((function(n){var i=n.toLowerCase();e.props[n]?t.setAttribute(i,i):t.removeAttribute(i)}))}},t.prototype.componentDidUpdate=function(){this.updateVideo()},t.prototype.componentDidMount=function(){var e=this;if(this.updateVideo(),this.lazyLoad&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser){var t=new IntersectionObserver((function(t){t.forEach((function(t){t.isIntersecting&&(e.setState((function(e){return __assign(__assign({},e),{load:!0})})),e.lazyVideoObserver&&(e.lazyVideoObserver.disconnect(),e.lazyVideoObserver=null))}))}));this.containerRef&&(t.observe(this.containerRef),this.lazyVideoObserver=t)}},t.prototype.componentWillUnmount=function(){this.lazyVideoObserver&&(this.lazyVideoObserver.disconnect(),this.lazyVideoObserver=null)},t.prototype.render=function(){var e=this,t=this.props,n=t.aspectRatio,i=t.children;return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{ref:function(t){return e.containerRef=t},css:{position:\"relative\"}},(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"video\",{key:this.props.video||\"no-src\",poster:this.props.posterImage,ref:function(t){return e.video=t},autoPlay:this.props.autoPlay,muted:this.props.muted,controls:this.props.controls,loop:this.props.loop,preload:this.props.preload||\"metadata\",className:\"builder-video\",css:__assign({width:\"100%\",height:\"100%\",objectFit:this.props.fit,objectPosition:this.props.position,borderRadius:1},n?{position:\"absolute\"}:null)},(!this.lazyLoad||this.state.load)&&(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"source\",{type:\"video/mp4\",src:this.props.video})),!n||this.props.fitContent&&i?null:(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{css:{width:\"100%\",paddingTop:100*n+\"%\",pointerEvents:\"none\",fontSize:0}}),i&&this.props.fitContent?(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{css:{display:\"flex\",flexDirection:\"column\",alignItems:\"stretch\"}},i):i?(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{css:{pointerEvents:\"none\",display:\"flex\",flexDirection:\"column\",alignItems:\"stretch\",position:\"absolute\",top:0,left:0,width:\"100%\",height:\"100%\"}},i):null)},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Video=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.registerComponent(withChildren(VideoComponent),{name:\"Video\",canHaveChildren:!0,defaultStyles:{minHeight:\"20px\",minWidth:\"20px\"},image:\"https://firebasestorage.googleapis.com/v0/b/builder-3b0a2.appspot.com/o/images%2Fbaseline-videocam-24px%20(1).svg?alt=media&token=49a84e4a-b20e-4977-a650-047f986874bb\",inputs:[{name:\"video\",type:\"file\",allowedFileTypes:VIDEO_FILE_TYPES,bubble:!0,defaultValue:\"https://cdn.builder.io/o/assets%2FYJIGb4i01jvw0SRdL5Bt%2Fd27731a526464deba0016216f5f9e570%2Fcompressed?apiKey=YJIGb4i01jvw0SRdL5Bt&token=d27731a526464deba0016216f5f9e570&alt=media&optimized=true\",required:!0},{name:\"posterImage\",type:\"file\",allowedFileTypes:IMAGE_FILE_TYPES,helperText:\"Image to show before the video plays\"},{name:\"autoPlay\",type:\"boolean\",defaultValue:!0},{name:\"controls\",type:\"boolean\",defaultValue:!1},{name:\"muted\",type:\"boolean\",defaultValue:!0},{name:\"loop\",type:\"boolean\",defaultValue:!0},{name:\"playsInline\",type:\"boolean\",defaultValue:!0},{name:\"fit\",type:\"text\",defaultValue:\"cover\",enum:[\"contain\",\"cover\",\"fill\",\"auto\"]},{name:\"preload\",type:\"text\",defaultValue:\"metadata\",enum:[\"auto\",\"metadata\",\"none\"]},{name:\"fitContent\",type:\"boolean\",helperText:\"When child blocks are provided, fit to them instead of using the aspect ratio\",defaultValue:!0,advanced:!0},{name:\"position\",type:\"text\",defaultValue:\"center\",enum:[\"center\",\"top\",\"left\",\"right\",\"bottom\",\"top left\",\"top right\",\"bottom left\",\"bottom right\"]},{name:\"height\",type:\"number\",advanced:!0},{name:\"width\",type:\"number\",advanced:!0},{name:\"aspectRatio\",type:\"number\",advanced:!0,defaultValue:DEFAULT_ASPECT_RATIO},{name:\"lazyLoad\",type:\"boolean\",helperText:'Load this video \"lazily\" - as in only when a user scrolls near the video. Recommended for optmized performance and bandwidth consumption',defaultValue:!0,advanced:!0}]}),size=function(e){return Object.keys(e).length},isShopify=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&\"Shopify\"in window,refs={};if(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser)try{Array.from(document.querySelectorAll(\"[builder-static-symbol]\")).forEach((function(e){var t=e.getAttribute(\"builder-static-symbol\");t&&(refs[t]=e)}))}catch(e){console.error(\"Builder replace nodes error:\",e)}var SymbolComponent=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.ref=null,t.staticRef=null,t.isEditingThisSymbol=!1,t}return __extends(t,e),Object.defineProperty(t.prototype,\"placeholder\",{get:function(){return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{css:{padding:10}},\"Symbols let you reuse dynamic elements across your content. Please choose a model and entry for this symbol.\")},enumerable:!1,configurable:!0}),t.prototype.componentDidMount=function(){var e,t,n,i=this;this.useStatic&&this.staticRef&&refs[null===(e=this.props.builderBlock)||void 0===e?void 0:e.id]&&(null===(t=this.staticRef.parentNode)||void 0===t||t.replaceChild(refs[null===(n=this.props.builderBlock)||void 0===n?void 0:n.id],this.staticRef)),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.nextTick((function(){var e=i.props.symbol||{},t=e.model,n=e.entry;i.isEditingThisSymbol=Boolean(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&t===_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.editingModel&&n&&location.search.includes(\"overrides.\".concat(n)))}))},Object.defineProperty(t.prototype,\"useStatic\",{get:function(){var e;return Boolean(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&refs[null===(e=this.props.builderBlock)||void 0===e?void 0:e.id]&&!(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isPreviewing))},enumerable:!1,configurable:!0}),t.prototype.render=function(){var e,t,n=this;if(this.useStatic)return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{ref:function(e){return n.staticRef=e}});var i=this.props.symbol,r=!1;i||(r=!0);var o=this.props.dataOnly?NoWrap:this.props.builderBlock&&this.props.builderBlock.tagName||\"div\",a=i||{},s=a.model,l=a.entry,u=a.data,d=a.content,c=a.inline,p=a.ownerId,f=(null==i?void 0:i.dynamic)||this.props.dynamic;s&&(l||f)||(null===(e=null==d?void 0:d.data)||void 0===e?void 0:e.blocksJs)||c||(r=!0),this.isEditingThisSymbol&&(r=!1);var m=f?null===(t=this.props.builderBlock)||void 0===t?void 0:t.id:[s,l].join(\":\"),h=u&&size(u)&&hash_sum__WEBPACK_IMPORTED_MODULE_4___default()(u);m&&h&&h.length<300&&(m+=\":\"+h);var v=this.props.attributes||{};return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderStoreContext.Consumer,{key:(s||\"no model\")+\":\"+(l||\"no entry\"+this.isEditingThisSymbol)},(function(e){var t,a,c,f,h,g,b,y,_,x,S,k=\"\".concat(m,\"_\").concat((null===(t=null==e?void 0:e.state)||void 0===t?void 0:t.locale)||\"Default\");return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(o,__assign({\"data-model\":s},v,{className:(v.class||v.className||\"\")+\" builder-symbol\"+((null==i?void 0:i.inline)?\" builder-inline-symbol\":\"\")+((null==i?void 0:i.dynamic)||n.props.dynamic?\" builder-dynamic-symbol\":\"\")}),r?n.placeholder:(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderComponent,__assign({},p&&{apiKey:p},(null===(a=e.state)||void 0===a?void 0:a.locale)&&{locale:e.state.locale},{isChild:!0,ref:function(e){return n.ref=e},context:__assign(__assign({},e.context),{symbolId:null===(c=n.props.builderBlock)||void 0===c?void 0:c.id}),model:s,entry:l,data:__assign(__assign(__assign({},u),!!n.props.inheritState&&omit$2(e.state,\"children\")),null===(_=null===(y=null===(b=null===(g=null===(h=null===(f=n.props.builderBlock)||void 0===f?void 0:f.component)||void 0===h?void 0:h.options)||void 0===g?void 0:g.symbol)||void 0===b?void 0:b.content)||void 0===y?void 0:y.data)||void 0===_?void 0:_.state),renderLink:e.renderLink,inlineContent:null==i?void 0:i.inline},d&&{content:d},{key:k,options:__assign(__assign({},!n.isEditingThisSymbol&&{key:k,noEditorUpdates:!0}),\"content\"===_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.singletonInstance.apiEndpoint&&l&&{query:{id:l}}),codegen:!!(null===(x=null==d?void 0:d.data)||void 0===x?void 0:x.blocksJs),hydrate:null===(S=e.state)||void 0===S?void 0:S._hydrate,builderBlock:n.props.builderBlock,dataOnly:n.props.dataOnly,nonce:e.context.nonce}),n.props.children))}))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Symbol$1=withBuilder(SymbolComponent,{name:\"Symbol\",noWrap:!0,static:!0,inputs:[{name:\"symbol\",type:\"uiSymbol\"},{name:\"dataOnly\",helperText:\"Make this a data symbol that doesn't display any UI\",type:\"boolean\",defaultValue:!1,advanced:!0,hideFromUI:!0},{name:\"inheritState\",helperText:\"Inherit the parent component state and data\",type:\"boolean\",defaultValue:isShopify,advanced:!0},{name:\"renderToLiquid\",helperText:\"Render this symbols contents to liquid. Turn off to fetch with javascript and use custom targeting\",type:\"boolean\",defaultValue:isShopify,advanced:!0,hideFromUI:!0},{name:\"useChildren\",hideFromUI:!0,type:\"boolean\"}]}),ButtonComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(){var e=this.props.link?Link:\"span\";return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(e,__assign({role:\"button\",href:this.props.link,target:this.props.openLinkInNewTab?\"_blank\":void 0},this.props.attributes),this.props.text)},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Button=withBuilder(ButtonComponent,{name:\"Core:Button\",image:\"https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2F81a15681c3e74df09677dfc57a615b13\",defaultStyles:{appearance:\"none\",paddingTop:\"15px\",paddingBottom:\"15px\",paddingLeft:\"25px\",paddingRight:\"25px\",backgroundColor:\"#000000\",color:\"white\",borderRadius:\"4px\",textAlign:\"center\",cursor:\"pointer\"},inputs:[{name:\"text\",type:\"text\",defaultValue:\"Click me!\",bubble:!0},{name:\"link\",type:\"url\",bubble:!0},{name:\"openLinkInNewTab\",type:\"boolean\",defaultValue:!1,friendlyName:\"Open link in new tab\"}],static:!0,noWrap:!0}),SectionComponent=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.ref=null,t.unmountCallbacks=[],t.state={inView:!1},t}return __extends(t,e),Object.defineProperty(t.prototype,\"renderContents\",{get:function(){return!0!==this.props.lazyLoad||this.state.inView},enumerable:!1,configurable:!0}),t.prototype.componentWillUnmount=function(){this.unmountCallbacks.forEach((function(e){return e()}))},t.prototype.componentDidMount=function(){var e=this;if(this.props.lazyLoad)if(\"undefined\"!=typeof IntersectionObserver&&this.ref){var t=new IntersectionObserver((function(t,n){t.forEach((function(t){t.intersectionRatio>0&&(e.setState({inView:!0}),e.ref&&n.unobserve(e.ref))}))}),{rootMargin:\"10px\"});t.observe(this.ref),this.unmountCallbacks.push((function(){e.ref&&t.unobserve(e.ref)}))}else this.setState({inView:!0})},t.prototype.render=function(){var e=this;return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"section\",{ref:function(t){return e.ref=t},css:__assign({width:\"100%\",alignSelf:\"stretch\",flexGrow:1,boxSizing:\"border-box\",maxWidth:this.props.maxWidth,display:\"flex\",flexDirection:\"column\",alignItems:\"stretch\",marginLeft:\"auto\",marginRight:\"auto\"},this.renderContents?null:this.props.lazyStyles)},this.renderContents?(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),null,this.props.children,this.props.builderBlock&&this.props.builderBlock.children&&this.props.builderBlock.children.map((function(e,t){return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlock$1,{key:e.id,block:e})}))):null)},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Section=withBuilder(SectionComponent,{name:\"Core:Section\",static:!0,image:\"https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2F682efef23ace49afac61748dd305c70a\",inputs:[{name:\"maxWidth\",type:\"number\",defaultValue:1200},{name:\"lazyLoad\",type:\"boolean\",defaultValue:!1,advanced:!0,description:\"Only render this section when in view\"}],defaultStyles:{paddingLeft:\"20px\",paddingRight:\"20px\",paddingTop:\"50px\",paddingBottom:\"50px\",marginTop:\"0px\",width:\"100vw\",marginLeft:\"calc(50% - 50vw)\"},canHaveChildren:!0,defaultChildren:[{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{textAlign:\"center\"}},component:{name:\"Text\",options:{text:\"<p><b>I am a section! My content keeps from getting too wide, so that it's easy to read even on big screens.</b></p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur</p>\"}}}]}),StateProviderComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderStoreContext.Consumer,null,(function(t){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderStoreContext.Provider,{value:__assign(__assign({},t),{state:__assign(__assign({},t.state),e.props.state),context:__assign(__assign({},t.context),e.props.context)})},e.props.builderBlock&&e.props.builderBlock.children&&e.props.builderBlock.children.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlock$1,{block:e,key:e.id,index:t,child:!0})})),e.props.children)}))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),StateProvider=withBuilder(StateProviderComponent,{name:\"Builder:StateProvider\",canHaveChildren:!0,static:!0,noWrap:!0,hideFromInsertMenu:!0}),prefetched=new Set;function searchToObject(e){var t=(e.search||\"\").substring(1).split(\"&\"),n={};for(var i in t)if(t[i]&&\"string\"==typeof t[i]){var r=t[i].split(\"=\");n[decodeURIComponent(r[0])]=decodeURIComponent(r[1])}return n}var RouterComponent=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.builder=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder,t.routed=!1,t.preloadQueue=0,t.onPopState=function(e){t.updateLocationState()},t.onMouseOverOrTouchStart=function(e){if(!(t.preloadQueue>4)&&!1!==t.props.preloadOnHover){var n=t.findHrefTarget(e);if(n){var i=n.getAttribute(\"href\");if(i){if(!t.isRelative(i)){var r=t.convertToRelative(i);if(!r)return;i=r}if(!i.startsWith(\"#\")&&!prefetched.has(i)){prefetched.add(i);var o=t.parseUrl(i);t.preloadQueue++;var a=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.getUserAttributes();a.urlPath=o.pathname,a.queryString=o.search;var s=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.get(t.model,{userAttributes:a,key:t.model+\":\"+o.pathname+o.search}).subscribe((function(){t.preloadQueue--,s.unsubscribe()}))}}}}},t.onClick=function(e){return __awaiter(t,void 0,void 0,(function(){var t,n,i,r;return __generator(this,(function(o){if(!1===this.props.handleRouting)return[2];if(0!==e.button||e.ctrlKey||e.defaultPrevented||e.metaKey)return[2];if(!(t=this.findHrefTarget(e)))return[2];if(t.target&&\"_client\"!==t.target)return[2];if(!(n=t.getAttribute(\"href\")))return[2];if(this.props.onRoute&&(i={url:n,anchorNode:t,preventDefault:function(){this.defaultPrevented=!0},defaultPrevented:!1},this.props.onRoute(i),i.defaultPrevented))return[2];if(!this.isRelative(n)){if(!(r=this.convertToRelative(n)))return[2];n=r}return n.startsWith(\"#\")||(e.preventDefault(),this.route(n)),[2]}))}))},t.privateState=null,t}return __extends(t,e),t.prototype.route=function(e){var t;return this.routed=!0,\"function\"==typeof(null===(t=window.history)||void 0===t?void 0:t.pushState)?(history.pushState(null,\"\",e),this.updateLocationState(),!0):(location.href=e,!1)},t.prototype.updateLocationState=function(){this.privateState&&this.privateState.update((function(e){e.location=__assign(__assign({},e.location),{pathname:location.pathname,search:location.search,path:location.pathname.split(\"/\").slice(1),query:searchToObject(location)})}))},Object.defineProperty(t.prototype,\"model\",{get:function(){return this.props.model||\"page\"},enumerable:!1,configurable:!0}),t.prototype.componentDidMount=function(){\"undefined\"!=typeof document&&(document.addEventListener(\"click\",this.onClick),window.addEventListener(\"popstate\",this.onPopState),document.addEventListener(\"mouseover\",this.onMouseOverOrTouchStart),document.addEventListener(\"touchstart\",this.onMouseOverOrTouchStart))},t.prototype.componentWillUnmount=function(){\"undefined\"!=typeof document&&(document.removeEventListener(\"click\",this.onClick),document.removeEventListener(\"mouseover\",this.onMouseOverOrTouchStart),window.removeEventListener(\"popstate\",this.onPopState),document.removeEventListener(\"touchstart\",this.onMouseOverOrTouchStart))},t.prototype.render=function(){var e=this,t=this.model;return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderStoreContext.Consumer,null,(function(n){e.privateState=n;var i=n.state&&n.state.location&&n.state.location.pathname+n.state.location.search;return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{className:\"builder-router\",\"data-model\":t},(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"style\",{nonce:n.context.nonce},\"\\n                @keyframes builderLoadingSpinner {\\n                  0% {\\n                    transform: rotate(0deg);\\n                  }\\n                  100% {\\n                    transform: rotate(360deg);\\n                  }\\n                }\\n                /* TODO: overridable tag */\\n                .builder-page-loading {\\n                  -webkit-animation: builderLoadingSpinner 1s infinite linear;\\n                  animation: builderLoadingSpinner 1s infinite linear;\\n                  -webkit-transform: translateZ(0);\\n                  transform: translateZ(0);\\n                  border-radius: 50%;\\n                  width: 36px;\\n                  height: 36px;\\n                  margin: 6px auto;\\n                  position: relative;\\n                  border: 1px solid transparent;\\n                  border-left: 1px solid #808284;\\n                }\\n              \"),(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderComponent,{key:i,data:e.props.data,content:e.routed?void 0:e.props.content,modelName:t,options:{key:_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing?void 0:e.model+\":\"+i},nonce:n.context.nonce},e.props.children||(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{css:{display:\"flex\"}},(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\",{css:{margin:\"40vh auto\"},className:\"builder-page-loading\"}))))}))},t.prototype.findHrefTarget=function(e){for(var t=e.target;t;){if(t instanceof HTMLAnchorElement&&t.getAttribute(\"href\"))return t;if(t===e.currentTarget)break;t=t.parentElement}return null},t.prototype.isRelative=function(e){return!e.match(/^(\\/\\/|https?:\\/\\/)/i)},t.prototype.parseUrl=function(e){var t=document.createElement(\"a\");return t.href=e,t},t.prototype.convertToRelative=function(e){var t=this.parseUrl(location.href),n=this.parseUrl(e);if(t.host===n.host){var i=n.pathname+(n.search?n.search:\"\");return i.startsWith(\"#\")?null:i||\"/\"}return null},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Router=withBuilder(RouterComponent,{name:\"Core:Router\",hideFromInsertMenu:!0,inputs:[{name:\"model\",type:\"string\",defaultValue:\"page\",advanced:!0},{name:\"handleRouting\",type:\"boolean\",defaultValue:!0,advanced:!0},{name:\"preloadOnHover\",type:\"boolean\",defaultValue:!0,advanced:!0},{name:\"onRoute\",type:\"function\",advanced:!0}]});function Mutation(e){var t,n,i=react__WEBPACK_IMPORTED_MODULE_2___default().useRef(null);useWaitForSelector(e.selector,(function(t){\"afterEnd\"!==e.type&&(t.innerHTML=\"\"),t.appendChild(i.current.firstElementChild)}));var r=null===(t=e.builderBlock)||void 0===t?void 0:t.children;return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\",{style:{display:\"none\"},ref:i},(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlocks,{style:{display:\"inline\"},child:!0,parentElementId:null===(n=e.builderBlock)||void 0===n?void 0:n.id,dataPath:\"this.children\",blocks:r}))}function useWaitForSelector(e,t){react__WEBPACK_IMPORTED_MODULE_2___default().useLayoutEffect((function(){try{var n=document.querySelector(e);if(n)return void t(n)}catch(e){console.warn(e)}var i=new MutationObserver((function(){try{var n=document.querySelector(e);n&&(i.disconnect(),t(n))}catch(e){console.warn(e)}}));return i.observe(document.body,{attributes:!0,subtree:!0,characterData:!0}),function(){i.disconnect()}}),[e])}_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.registerComponent(Mutation,{name:\"Builder:Mutation\",canHaveChildren:!0,noWrap:!0,hideFromInsertMenu:!0,inputs:[{name:\"type\",type:\"string\",defaultValue:\"replace\",enum:[{label:\"Replace\",value:\"replace\",helperText:\"Replace the contents of this site region with content from Builder\"},{label:\"Append\",value:\"afterEnd\",helperText:\"Append Builder content after the chosen site region\"}]},{name:\"selector\",type:\"builder:domSelector\"}]});var get=function(e,t,n){var i=String.prototype.split.call(t,/[,[\\].]+?/).filter(Boolean).reduce((function(e,t){return null!=e?e[t]:e}),e);return void 0===i||i===e?n:i},MULTIPART_CONTENT_TYPE=\"multipart/form-data\",JSON_CONTENT_TYPE=\"application/json\",ENCODED_CONTENT_TYPE=\"application/x-www-form-urlencoded\",FormComponent=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.ref=null,t.state={state:\"unsubmitted\",responseData:null,formErrorMessage:\"\"},t}return __extends(t,e),Object.defineProperty(t.prototype,\"submissionState\",{get:function(){return _builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&this.props.previewState||this.state.state},enumerable:!1,configurable:!0}),t.prototype.render=function(){var e=this;return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderStoreContext.Consumer,null,(function(t){return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderStoreContext.Provider,{value:__assign(__assign({},t),{state:__assign(__assign({},t.state),{formErrorMessage:e.state.formErrorMessage})})},(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"form\",__assign({},e.props.validate?{}:{noValidate:!0},{ref:function(t){return e.ref=t},action:!e.props.sendWithJs&&e.props.action?e.props.action:void 0,method:e.props.method,name:e.props.name,onSubmit:function(t){var n,i=e.props.sendWithJs||\"email\"===e.props.sendSubmissionsTo;if(\"zapier\"===e.props.sendSubmissionsTo)t.preventDefault();else if(i){if(!e.props.action&&\"email\"!==e.props.sendSubmissionsTo)return void t.preventDefault();t.preventDefault();var r=t.currentTarget,o=e.props.customHeaders||{},a=void 0,s=new FormData(r),l=Array.from(t.currentTarget.querySelectorAll(\"input,select,textarea\")).filter((function(e){return!!e.name})).filter((function(e){return!!e.name&&(\"radio\"!==e.type||e.checked)})).map((function(e){var t,n=e.name;if(e instanceof HTMLInputElement)if(\"radio\"===e.type){if(e.checked)return{key:n,value:t=e.value}}else if(\"checkbox\"===e.type)t=e.checked;else if(\"number\"===e.type||\"range\"===e.type){var i=e.valueAsNumber;isNaN(i)||(t=i)}else t=\"file\"===e.type?e.files:e.value;else t=e.value;return{key:n,value:t}})),u=e.props.contentType;if(\"email\"===e.props.sendSubmissionsTo&&(u=MULTIPART_CONTENT_TYPE),Array.from(l).forEach((function(e){var t=e.value;(t instanceof File||Array.isArray(t)&&t[0]instanceof File||t instanceof FileList)&&(u=MULTIPART_CONTENT_TYPE)})),u===MULTIPART_CONTENT_TYPE)a=s;else if(u===JSON_CONTENT_TYPE){var d={};Array.from(l).forEach((function(e){var t=e.value,n=e.key;set(d,n,t)})),a=JSON.stringify(d)}else{if(u!==ENCODED_CONTENT_TYPE)return void console.error(\"Unsupported content type: \",u);a=Array.from(l).map((function(e){var t=e.value,n=e.key;return encodeURIComponent(n)+\"=\"+encodeURIComponent(t)})).join(\"&\")}u&&u!==MULTIPART_CONTENT_TYPE&&(i&&(null===(n=e.props.action)||void 0===n?void 0:n.includes(\"zapier.com\"))||(o[\"content-type\"]=u));var c=new CustomEvent(\"presubmit\",{detail:{body:a}});if(e.ref&&(e.ref.dispatchEvent(c),c.defaultPrevented))return;e.setState(__assign(__assign({},e.state),{state:\"sending\"}));var p=\"\".concat(\"dev\"===_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.env?\"http://localhost:5000\":\"https://builder.io\",\"/api/v1/form-submit?apiKey=\").concat(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.apiKey,\"&to=\").concat(btoa(e.props.sendSubmissionsToEmail||\"\"),\"&name=\").concat(encodeURIComponent(e.props.name||\"\"));fetch(\"email\"===e.props.sendSubmissionsTo?p:e.props.action,{body:a,headers:o,method:e.props.method||\"post\"}).then((function(t){return __awaiter(e,void 0,void 0,(function(){var e,n,i,r,o;return __generator(this,(function(a){switch(a.label){case 0:return(n=t.headers.get(\"content-type\"))&&-1!==n.indexOf(JSON_CONTENT_TYPE)?[4,t.json()]:[3,2];case 1:return e=a.sent(),[3,4];case 2:return[4,t.text()];case 3:e=a.sent(),a.label=4;case 4:if(!t.ok&&this.props.errorMessagePath&&(i=get(e,this.props.errorMessagePath))&&(\"string\"!=typeof i&&(i=JSON.stringify(i)),this.setState(__assign(__assign({},this.state),{formErrorMessage:i}))),this.setState(__assign(__assign({},this.state),{responseData:e,state:t.ok?\"success\":\"error\"})),t.ok){if(r=new CustomEvent(\"submit:success\",{detail:{res:t,body:e}}),this.ref){if(this.ref.dispatchEvent(r),r.defaultPrevented)return[2];!1!==this.props.resetFormOnSubmit&&this.ref.reset()}this.props.successUrl&&(this.ref?(o=new CustomEvent(\"route\",{detail:{url:this.props.successUrl}}),this.ref.dispatchEvent(o),o.defaultPrevented||(location.href=this.props.successUrl)):location.href=this.props.successUrl)}return[2]}}))}))}),(function(t){var n=new CustomEvent(\"submit:error\",{detail:{error:t}});e.ref&&(e.ref.dispatchEvent(n),n.defaultPrevented)||e.setState(__assign(__assign({},e.state),{responseData:t,state:\"error\"}))}))}}},e.props.attributes),e.props.builderBlock&&e.props.builderBlock.children&&e.props.builderBlock.children.map((function(e,t){return (0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlock$1,{key:e.id,block:e})})),\"error\"===e.submissionState&&(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlocks,{dataPath:\"errorMessage\",blocks:e.props.errorMessage}),\"sending\"===e.submissionState&&(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlocks,{dataPath:\"sendingMessage\",blocks:e.props.sendingMessage}),\"error\"===e.submissionState&&e.state.responseData&&(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"pre\",{className:\"builder-form-error-text\",css:{padding:10,color:\"red\",textAlign:\"center\"}},JSON.stringify(e.state.responseData,null,2)),\"success\"===e.submissionState&&(0,_emotion_core__WEBPACK_IMPORTED_MODULE_1__.jsx)(BuilderBlocks,{dataPath:\"successMessage\",blocks:e.props.successMessage})))}))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Form=withBuilder(FormComponent,{name:\"Form:Form\",defaults:{responsiveStyles:{large:{marginTop:\"15px\",paddingBottom:\"15px\"}}},image:\"https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2Fef36d2a846134910b64b88e6d18c5ca5\",inputs:[{name:\"sendSubmissionsTo\",type:\"string\",enum:[{label:\"Send to email\",value:\"email\",helperText:\"Send form submissions to the email address of your choosing\"},{label:\"Custom\",value:\"custom\",helperText:\"Handle where the form requests go manually with a little code, e.g. to your own custom backend\"}],defaultValue:\"email\"},{name:\"sendSubmissionsToEmail\",type:\"string\",required:!0,defaultValue:\"your@email.com\",showIf:'options.get(\"sendSubmissionsTo\") === \"email\"'},{name:\"sendWithJs\",type:\"boolean\",helperText:\"Set to false to use basic html form action\",defaultValue:!0,showIf:'options.get(\"sendSubmissionsTo\") === \"custom\"'},{name:\"name\",type:\"string\",defaultValue:\"My form\"},{name:\"action\",type:\"string\",helperText:\"URL to send the form data to\",showIf:'options.get(\"sendSubmissionsTo\") === \"custom\"'},{name:\"contentType\",type:\"string\",defaultValue:JSON_CONTENT_TYPE,advanced:!0,enum:[JSON_CONTENT_TYPE,MULTIPART_CONTENT_TYPE,ENCODED_CONTENT_TYPE],showIf:'options.get(\"sendSubmissionsTo\") === \"custom\" && options.get(\"sendWithJs\") === true'},{name:\"method\",type:\"string\",showIf:'options.get(\"sendSubmissionsTo\") === \"custom\"',defaultValue:\"POST\",advanced:!0},{name:\"previewState\",type:\"string\",enum:[\"unsubmitted\",\"sending\",\"success\",\"error\"],defaultValue:\"unsubmitted\",helperText:'Choose a state to edit, e.g. choose \"success\" to show what users see on success and edit the message',showIf:'options.get(\"sendSubmissionsTo\") !== \"zapier\" && options.get(\"sendWithJs\") === true'},{name:\"successUrl\",type:\"url\",helperText:\"Optional URL to redirect the user to on form submission success\",showIf:'options.get(\"sendSubmissionsTo\") !== \"zapier\" && options.get(\"sendWithJs\") === true'},{name:\"resetFormOnSubmit\",type:\"boolean\",showIf:function(e){return\"custom\"===e.get(\"sendSubmissionsTo\")&&!0===e.get(\"sendWithJs\")},advanced:!0},{name:\"successMessage\",type:\"uiBlocks\",hideFromUI:!0,defaultValue:[{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{marginTop:\"10px\"}},component:{name:\"Text\",options:{text:\"<span>Thanks!</span>\"}}}]},{name:\"validate\",type:\"boolean\",defaultValue:!0,advanced:!0},{name:\"errorMessagePath\",type:\"text\",advanced:!0,helperText:'Path to where to get the error message from in a JSON response to display to the user, e.g. \"error.message\" for a response like { \"error\": { \"message\": \"this username is taken\" }}'},{name:\"errorMessage\",type:\"uiBlocks\",hideFromUI:!0,defaultValue:[{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{marginTop:\"10px\"}},bindings:{\"component.options.text\":\"state.formErrorMessage || block.component.options.text\"},component:{name:\"Text\",options:{text:\"<span>Form submission error :( Please check your answers and try again</span>\"}}}]},{name:\"sendingMessage\",type:\"uiBlocks\",hideFromUI:!0,defaultValue:[{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{marginTop:\"10px\"}},component:{name:\"Text\",options:{text:\"<span>Sending...</span>\"}}}]},__assign(__assign({name:\"customHeaders\",type:\"map\"},{valueType:{type:\"string\"}}),{advanced:!0,showIf:'options.get(\"sendSubmissionsTo\") === \"custom\" && options.get(\"sendWithJs\") === true'})],noWrap:!0,canHaveChildren:!0,defaultChildren:[{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{marginTop:\"10px\"}},component:{name:\"Text\",options:{text:\"<span>Enter your name</span>\"}}},{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{marginTop:\"10px\"}},component:{name:\"Form:Input\",options:{name:\"name\",placeholder:\"Jane Doe\"}}},{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{marginTop:\"10px\"}},component:{name:\"Text\",options:{text:\"<span>Enter your email</span>\"}}},{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{marginTop:\"10px\"}},component:{name:\"Form:Input\",options:{name:\"email\",placeholder:\"jane@doe.com\"}}},{\"@type\":\"@builder.io/sdk:Element\",responsiveStyles:{large:{marginTop:\"10px\"}},component:{name:\"Form:SubmitButton\",options:{text:\"Submit\"}}}]}),FormInputComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"input\",__assign({key:_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&this.props.defaultValue?this.props.defaultValue:\"default-key\",placeholder:this.props.placeholder,type:this.props.type,name:this.props.name},void 0===this.props.value?{defaultValue:this.props.defaultValue}:{value:this.props.value},{required:this.props.required},this.props.attributes))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),FormInput=withBuilder(FormInputComponent,{name:\"Form:Input\",image:\"https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2Fad6f37889d9e40bbbbc72cdb5875d6ca\",inputs:[{name:\"type\",type:\"text\",enum:[\"text\",\"number\",\"email\",\"url\",\"checkbox\",\"radio\",\"range\",\"date\",\"datetime-local\",\"search\",\"tel\",\"time\",\"file\",\"month\",\"week\",\"password\",\"color\",\"hidden\"],defaultValue:\"text\"},{name:\"name\",type:\"string\",required:!0,helperText:'Every input in a form needs a unique name describing what it takes, e.g. \"email\"'},{name:\"placeholder\",type:\"string\",defaultValue:\"Hello there\",helperText:\"Text to display when there is no value\"},{name:\"defaultValue\",type:\"string\"},{name:\"value\",type:\"string\",advanced:!0},{name:\"required\",type:\"boolean\",helperText:\"Is this input required to be filled out to submit a form\",defaultValue:!1}],noWrap:!0,static:!0,defaultStyles:{paddingTop:\"10px\",paddingBottom:\"10px\",paddingLeft:\"10px\",paddingRight:\"10px\",borderRadius:\"3px\",borderWidth:\"1px\",borderStyle:\"solid\",borderColor:\"#ccc\"}}),FormSubmitButtonComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"button\",__assign({type:\"submit\"},this.props.attributes),this.props.text)},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),FormSubmitButton=withBuilder(FormSubmitButtonComponent,{name:\"Form:SubmitButton\",image:\"https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2Fdf2820ffed1f4349a94c40b3221f5b98\",defaultStyles:{appearance:\"none\",paddingTop:\"15px\",paddingBottom:\"15px\",paddingLeft:\"25px\",paddingRight:\"25px\",backgroundColor:\"#3898EC\",color:\"white\",borderRadius:\"4px\",cursor:\"pointer\"},inputs:[{name:\"text\",type:\"text\",defaultValue:\"Click me\"}],static:!0,noWrap:!0}),LabelComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"label\",__assign({htmlFor:this.props.for},this.props.attributes),this.props.text&&react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"span\",{className:\"builder-label-text\",dangerouslySetInnerHTML:{__html:this.props.text}}),this.props.builderBlock&&this.props.builderBlock.children&&this.props.builderBlock.children.map((function(e){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlock$1,{key:e.id,block:e})})))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Label=withBuilder(LabelComponent,{name:\"Form:Label\",image:\"https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2F9322342f04b545fb9a8091cd801dfb5b\",inputs:[{name:\"text\",type:\"html\",richText:!0,defaultValue:\"Label\"},{name:\"for\",type:\"text\",helperText:\"The name of the input this label is for\",advanced:!0}],noWrap:!0,static:!0,canHaveChildren:!0}),FormSelectComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(){var e=this.props.options;return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"select\",__assign({value:this.props.value,key:_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&this.props.defaultValue?this.props.defaultValue:\"default-key\",defaultValue:this.props.defaultValue,name:this.props.name,required:this.props.required},this.props.attributes),e&&e.map((function(e){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"option\",{value:e.value},e.name||e.value)})))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),FormSelect=withBuilder(FormSelectComponent,{name:\"Form:Select\",image:\"https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2F83acca093fb24aaf94dee136e9a4b045\",defaultStyles:{alignSelf:\"flex-start\"},inputs:[{name:\"options\",type:\"list\",required:!0,subFields:[{name:\"value\",type:\"text\",required:!0},{name:\"name\",type:\"text\"}],defaultValue:[{value:\"option 1\"},{value:\"option 2\"}]},{name:\"name\",type:\"string\",required:!0,helperText:'Every select in a form needs a unique name describing what it gets, e.g. \"email\"'},{name:\"defaultValue\",type:\"string\"},{name:\"value\",type:\"string\",advanced:!0},{name:\"required\",type:\"boolean\",defaultValue:!1}],static:!0,noWrap:!0}),TextAreaComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(){return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"textarea\",__assign({placeholder:this.props.placeholder,name:this.props.name,value:this.props.value,defaultValue:this.props.defaultValue,required:this.props.required},this.props.attributes))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),TextArea=withBuilder(TextAreaComponent,{name:\"Form:TextArea\",image:\"https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2Ff74a2f3de58c4c3e939204e5b6b8f6c3\",inputs:[{advanced:!0,name:\"value\",type:\"string\"},{name:\"name\",type:\"string\",required:!0,helperText:'Every input in a form needs a unique name describing what it gets, e.g. \"email\"'},{name:\"defaultValue\",type:\"string\"},{name:\"placeholder\",type:\"string\",defaultValue:\"Hello there\"},{name:\"required\",type:\"boolean\",defaultValue:!1}],defaultStyles:{paddingTop:\"10px\",paddingBottom:\"10px\",paddingLeft:\"10px\",paddingRight:\"10px\",borderRadius:\"3px\",borderWidth:\"1px\",borderStyle:\"solid\",borderColor:\"#ccc\"},static:!0,noWrap:!0}),ImgComponent=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.getSrcSet=function(){var e=this.props.image;if(e&&\"string\"==typeof e&&e.match(/builder\\.io/))return getSrcSet(e)},t.prototype.render=function(){var e=this.props.attributes||{},t=this.getSrcSet(),n=e.style,i=__rest(e,[\"style\"]),r={objectFit:this.props.backgroundSize,objectPosition:this.props.backgroundPosition,aspectRatio:this.props.aspectRatio},o=__assign(__assign({},r),n);return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"img\",__assign({loading:\"lazy\"},i,{src:this.props.image||e.src,srcSet:t,alt:this.props.altText,title:this.props.title,style:o,className:\"builder-raw-img\"}))},t}((react__WEBPACK_IMPORTED_MODULE_2___default().Component)),Img=withBuilder(ImgComponent,{name:\"Raw:Img\",hideFromInsertMenu:!0,image:\"https://firebasestorage.googleapis.com/v0/b/builder-3b0a2.appspot.com/o/images%2Fbaseline-insert_photo-24px.svg?alt=media&token=4e5d0ef4-f5e8-4e57-b3a9-38d63a9b9dc4\",inputs:[{name:\"image\",bubble:!0,type:\"file\",allowedFileTypes:IMAGE_FILE_TYPES,required:!0},{name:\"backgroundSize\",type:\"text\",defaultValue:\"cover\",enum:[{label:\"contain\",value:\"contain\",helperText:\"The image should never get cropped\"},{label:\"cover\",value:\"cover\",helperText:\"The image should fill it's box, cropping when needed\"}]},{name:\"backgroundPosition\",type:\"text\",defaultValue:\"center\",enum:[\"center\",\"top\",\"left\",\"right\",\"bottom\",\"top left\",\"top right\",\"bottom left\",\"bottom right\"]},{name:\"altText\",type:\"string\",helperText:\"Text to display when the user has images off\"},{name:\"title\",type:\"string\",helperText:\"Text to display when hovering over the asset\"},{name:\"aspectRatio\",type:\"number\",helperText:\"This is the ratio of height/width, e.g. set to 1.5 for a 300px wide and 200px tall photo. Set to 0 to not force the image to maintain it's aspect ratio\",advanced:!0,defaultValue:.7041}],noWrap:!0}),RawText=function(e){var t=e.attributes||{};return react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"span\",{className:(null==t?void 0:t.class)||(null==t?void 0:t.className),dangerouslySetInnerHTML:{__html:e.text||\"\"}})};_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.registerComponent(RawText,{name:\"Builder:RawText\",hideFromInsertMenu:!0,inputs:[{name:\"text\",bubble:!0,type:\"longText\",required:!0}]});var filterWithCustomTargetingScript='function filterWithCustomTargeting(e,t,n,r){var i={query:t,startDate:n,endDate:r},o=e.date&&new Date(e.date)||new Date;return!(i.startDate&&new Date(i.startDate)>o)&&(!(i.endDate&&new Date(i.endDate)<o)&&(!i.query||!i.query.length||i.query.every((function(t){return objectMatchesQuery(e,t)}))))}function isString(e){return\"string\"==typeof e}function isNumber(e){return\"number\"==typeof e}function objectMatchesQuery(e,t){return function(){var n=t.property,r=t.operator,i=t.value;if(t&&\"urlPath\"===t.property&&t.value&&\"string\"==typeof t.value&&\"/\"!==t.value&&t.value.endsWith(\"/\")&&(i=t.value.slice(0,-1)),!n||!r)return!0;if(Array.isArray(i))return\"isNot\"===r?i.every((function(t){return objectMatchesQuery(e,{property:n,operator:r,value:t})})):!!i.find((function(t){return objectMatchesQuery(e,{property:n,operator:r,value:t})}));var o=e[n];if(Array.isArray(o))return o.includes(i);switch(r){case\"is\":return o===i;case\"isNot\":return o!==i;case\"contains\":return(isString(o)||Array.isArray(o))&&o.includes(String(i));case\"startsWith\":return isString(o)&&o.startsWith(String(i));case\"endsWith\":return isString(o)&&o.endsWith(String(i));case\"greaterThan\":return isNumber(o)&&isNumber(i)&&o>i;case\"lessThan\":return isNumber(o)&&isNumber(i)&&o<i;case\"greaterThanOrEqualTo\":return isNumber(o)&&isNumber(i)&&o>=i;case\"lessThanOrEqualTo\":return isNumber(o)&&isNumber(i)&&o<=i}return!1}()}';function filterWithCustomTargeting(e,t,n,i){var r={query:t,startDate:n,endDate:i},o=e.date&&new Date(e.date)||new Date;return!(r.startDate&&new Date(r.startDate)>o)&&(!(r.endDate&&new Date(r.endDate)<o)&&(!r.query||!r.query.length||r.query.every((function(t){return objectMatchesQuery(e,t)}))))}function isString(e){return\"string\"==typeof e}function isNumber(e){return\"number\"==typeof e}function objectMatchesQuery(e,t){return function(){var n=t.property,i=t.operator,r=t.value;if(t&&\"urlPath\"===t.property&&t.value&&\"string\"==typeof t.value&&\"/\"!==t.value&&t.value.endsWith(\"/\")&&(r=t.value.slice(0,-1)),!n||!i)return!0;if(Array.isArray(r))return\"isNot\"===i?r.every((function(t){return objectMatchesQuery(e,{property:n,operator:i,value:t})})):!!r.find((function(t){return objectMatchesQuery(e,{property:n,operator:i,value:t})}));var o=e[n];if(Array.isArray(o))return o.includes(r);switch(i){case\"is\":return o===r;case\"isNot\":return o!==r;case\"contains\":return(isString(o)||Array.isArray(o))&&o.includes(String(r));case\"startsWith\":return isString(o)&&o.startsWith(String(r));case\"endsWith\":return isString(o)&&o.endsWith(String(r));case\"greaterThan\":return isNumber(o)&&isNumber(r)&&o>r;case\"lessThan\":return isNumber(o)&&isNumber(r)&&o<r;case\"greaterThanOrEqualTo\":return isNumber(o)&&isNumber(r)&&o>=r;case\"lessThanOrEqualTo\":return isNumber(o)&&isNumber(r)&&o<=r}return!1}()}function PersonalizationContainer(e){var t,n,i,r,o,a,s,l,u,d,c,p,f,m,h,v,g,b,y,_,x,S=Boolean(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isBrowser&&(null===(t=window.__hydrated)||void 0===t?void 0:t[null===(n=e.builderBlock)||void 0===n?void 0:n.id])),k=(0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null),B=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(S),w=B[0],C=B[1],E=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(!1),R=E[0],T=E[1],I=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(0);I[0];var j=I[1],O=(0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(BuilderStoreContext);if((0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)((function(){var e;C(!0),T(!0);var t=_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.userAttributesChanged.subscribe((function(){j((function(e){return e+1}))})),n=[function(){return t.unsubscribe()}];if(!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&!_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isPreviewing){var i=P[0];null===(e=k.current)||void 0===e||e.dispatchEvent(new CustomEvent(\"builder.variantLoaded\",{detail:{variant:i||\"default\",content:O.content},bubbles:!0}));var r=new IntersectionObserver((function(e){e.forEach((function(e){var t;e.isIntersecting&&(null===(t=k.current)||void 0===t||t.dispatchEvent(new CustomEvent(\"builder.variantDisplayed\",{detail:{variant:i||\"default\",content:O.content},bubbles:!0})))}))}));r.observe(k.current),n.push((function(){return r.disconnect()}))}return function(){n.forEach((function(e){return e()}))}}),[]),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isServer)return react__WEBPACK_IMPORTED_MODULE_2___default().createElement((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),null,react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"div\",__assign({},e.attributes,{style:__assign({opacity:1,transition:\"opacity 0.2s ease-in-out\"},null===(i=e.attributes)||void 0===i?void 0:i.style),className:\"builder-personalization-container \".concat(e.attributes.className)}),null===(r=e.variants)||void 0===r?void 0:r.map((function(t,n){var i,r;return react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"template\",{key:n,\"data-variant-id\":(null===(i=e.builderBlock)||void 0===i?void 0:i.id)+n},react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlocks,{blocks:t.blocks,parentElementId:null===(r=e.builderBlock)||void 0===r?void 0:r.id,dataPath:\"component.options.variants.\".concat(n,\".blocks\"),child:!0}))})),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"script\",{nonce:O.context.nonce,id:\"variants-script-\".concat(null===(o=e.builderBlock)||void 0===o?void 0:o.id),dangerouslySetInnerHTML:{__html:getPersonalizationScript(e.variants,(null===(a=e.builderBlock)||void 0===a?void 0:a.id)||\"none\",null===(s=e.builderState.state)||void 0===s?void 0:s.locale)}}),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlocks,{blocks:null===(l=e.builderBlock)||void 0===l?void 0:l.children,parentElementId:null===(u=e.builderBlock)||void 0===u?void 0:u.id,dataPath:\"this.children\",child:!0})),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"script\",{nonce:O.context.nonce,dangerouslySetInnerHTML:{__html:\"\\n         window.__hydrated = window.__hydrated || {};\\n         window.__hydrated['\".concat(null===(d=e.builderBlock)||void 0===d?void 0:d.id,\"'] = true;\\n        \").replace(/\\s+/g,\" \")}}));var P=(e.variants||[]).filter((function(t){var n;return filterWithCustomTargeting(__assign(__assign({},(null===(n=e.builderState.state)||void 0===n?void 0:n.locale)?{locale:e.builderState.state.locale}:{}),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.builder.getUserAttributes()),t.query,t.startDate,t.endDate)}));return react__WEBPACK_IMPORTED_MODULE_2___default().createElement((react__WEBPACK_IMPORTED_MODULE_2___default().Fragment),null,react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"div\",__assign({ref:k},e.attributes,{style:__assign({opacity:w?1:0,transition:\"opacity 0.2s ease-in-out\"},null===(c=e.attributes)||void 0===c?void 0:c.style),className:\"builder-personalization-container \".concat(e.attributes.className).concat(w?\"\":\" builder-personalization-container-loading\")}),R&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&\"number\"==typeof e.previewingIndex&&e.previewingIndex<((null===(p=e.variants)||void 0===p?void 0:p.length)||0)?react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlocks,{blocks:null===(m=null===(f=e.variants)||void 0===f?void 0:f[e.previewingIndex])||void 0===m?void 0:m.blocks,parentElementId:null===(h=e.builderBlock)||void 0===h?void 0:h.id,dataPath:\"component.options.variants.\".concat(e.previewingIndex,\".blocks\"),child:!0}):R&&_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing&&\"number\"!=typeof e.previewingIndex||!w||!P.length?react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlocks,{blocks:null===(v=e.builderBlock)||void 0===v?void 0:v.children,parentElementId:null===(g=e.builderBlock)||void 0===g?void 0:g.id,dataPath:\"this.children\",child:!0}):react__WEBPACK_IMPORTED_MODULE_2___default().createElement(BuilderBlocks,{blocks:null===(b=P[0])||void 0===b?void 0:b.blocks,parentElementId:null===(y=e.builderBlock)||void 0===y?void 0:y.id,dataPath:\"component.options.variants.\".concat(null===(_=e.variants)||void 0===_?void 0:_.indexOf(P[0]),\".blocks\"),child:!0})),react__WEBPACK_IMPORTED_MODULE_2___default().createElement(\"script\",{nonce:O.context.nonce,dangerouslySetInnerHTML:{__html:\"\\n         window.__hydrated = window.__hydrated || {};\\n         window.__hydrated['\".concat(null===(x=e.builderBlock)||void 0===x?void 0:x.id,\"'] = true;\\n        \").replace(/\\s+/g,\" \")}}))}function getPersonalizationScript(e,t,n){return\"\\n      (function() {\\n        function getCookie(name) {\\n          var nameEQ = name + \\\"=\\\";\\n          var ca = document.cookie.split(';');\\n          for(var i=0;i < ca.length;i++) {\\n              var c = ca[i];\\n              while (c.charAt(0)==' ') c = c.substring(1,c.length);\\n              if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\\n          }\\n          return null;\\n        }\\n        function removeVariants() {\\n          variants.forEach(function (template, index) {\\n            document.querySelector('template[data-variant-id=\\\"' + \\\"\".concat(t,\"\\\" + index + '\\\"]').remove();\\n          });\\n          document.getElementById('variants-script-\").concat(t,\"').remove();\\n        }\\n\\n        var attributes = JSON.parse(getCookie(\\\"\").concat(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.attributesCookieName,'\") || \"{}\");\\n        ').concat(n?'attributes.locale = \"'.concat(n,'\";'):\"\",\"\\n        var variants = \").concat(JSON.stringify(null==e?void 0:e.map((function(e){return{query:e.query,startDate:e.startDate,endDate:e.endDate}}))),\";\\n        var winningVariantIndex = variants.findIndex(function(variant) {\\n          return filterWithCustomTargeting(\\n            attributes,\\n            variant.query,\\n            variant.startDate,\\n            variant.endDate\\n          );\\n        });\\n        var isDebug = location.href.includes('builder.debug=true');\\n        if (isDebug) {\\n          console.debug('PersonalizationContainer', {\\n            attributes: attributes,\\n            variants: variants,\\n            winningVariantIndex: winningVariantIndex,\\n            });\\n        }\\n        if (winningVariantIndex !== -1) {\\n          var winningVariant = document.querySelector('template[data-variant-id=\\\"' + \\\"\").concat(t,\"\\\" + winningVariantIndex + '\\\"]');\\n          if (winningVariant) {\\n            var parentNode = winningVariant.parentNode;\\n            var newParent = parentNode.cloneNode(false);\\n            newParent.appendChild(winningVariant.content.firstChild);\\n            parentNode.parentNode.replaceChild(newParent, parentNode);\\n            if (isDebug) {\\n              console.debug('PersonalizationContainer', 'Winning variant Replaced:', winningVariant);\\n            }\\n          }\\n        } else if (variants.length > 0) {\\n          removeVariants();\\n        }\\n        \").concat(filterWithCustomTargetingScript,\"\\n      })();\\n    \").replace(/\\s+/g,\" \")}function useIsPreviewing(){var e=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(!1),t=e[0],n=e[1];return (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)((function(){(_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isEditing||_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isPreviewing)&&n(!0)}),[]),t}_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.registerComponent(PersonalizationContainer,{name:\"PersonalizationContainer\",noWrap:!0,friendlyName:\"Dynamic Container\",image:\"https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F37229ed30d8c41dfb10b8cca1992053a\",canHaveChildren:!0,inputs:[{name:\"variants\",defaultValue:[],behavior:\"personalizationVariantList\",type:\"list\",subFields:[{name:\"name\",type:\"text\",localized:!1},{name:\"query\",friendlyName:\"Targeting rules\",type:\"BuilderQuery\",defaultValue:[],localized:!1},{name:\"startDate\",type:\"date\",localized:!1},{name:\"endDate\",type:\"date\",localized:!1},{name:\"blocks\",type:\"UiBlocks\",hideFromUI:!0,defaultValue:[]}]}]}),_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.isReact=!0,_builder_io_sdk__WEBPACK_IMPORTED_MODULE_0__.Builder.sdkInfo={name:\"react\",version:SDK_VERSION};\n//# sourceMappingURL=builder-react.es5.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@builder.io/react/dist/builder-react.es5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@builder.io/sdk/dist/index.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/@builder.io/sdk/dist/index.esm.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BehaviorSubject: () => (/* binding */ BehaviorSubject),\n/* harmony export */   Builder: () => (/* binding */ Builder),\n/* harmony export */   BuilderComponent: () => (/* binding */ BuilderComponent),\n/* harmony export */   Subscription: () => (/* binding */ Subscription),\n/* harmony export */   builder: () => (/* binding */ builder),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var hash_sum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hash-sum */ \"(ssr)/./node_modules/hash-sum/hash-sum.js\");\n/* harmony import */ var hash_sum__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hash_sum__WEBPACK_IMPORTED_MODULE_0__);\n\n\n(function() {\n    if (true) return false;\n    function CustomEvent(event, params) {\n        params = params || {\n            bubbles: false,\n            cancelable: false,\n            detail: null\n        };\n        var evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    }\n    window.CustomEvent = CustomEvent;\n})();\nvar isSafari =  false && 0;\nvar isClient = \"undefined\" !== 'undefined';\n// TODO: queue all of these in a debounceNextTick\nfunction nextTick(fn) {\n    // if (typeof process !== 'undefined' && process.nextTick) {\n    //   console.log('process.nextTick?');\n    //   process.nextTick(fn);\n    //   return;\n    // }\n    // FIXME: fix the real safari issue of this randomly not working\n    if (!isClient || isSafari || typeof MutationObserver === 'undefined') {\n        setTimeout(fn);\n        return;\n    }\n    var called = 0;\n    var observer = new MutationObserver(function() {\n        return fn();\n    });\n    var element = document.createTextNode('');\n    observer.observe(element, {\n        characterData: true\n    });\n    // tslint:disable-next-line\n    element.data = String(called = ++called);\n}\nvar PROPERTY_NAME_DENY_LIST = Object.freeze([\n    '__proto__',\n    'prototype',\n    'constructor'\n]);\n// TODO: unit tests\nvar QueryString = /** @class */ function() {\n    function QueryString1() {}\n    QueryString1.parseDeep = function(queryString) {\n        var obj = this.parse(queryString);\n        return this.deepen(obj);\n    };\n    QueryString1.stringifyDeep = function(obj) {\n        var map = this.flatten(obj);\n        return this.stringify(map);\n    };\n    QueryString1.parse = function(queryString) {\n        var query = {};\n        var pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');\n        for(var i = 0; i < pairs.length; i++){\n            var pair = pairs[i].split('=');\n            // TODO: node support?\n            try {\n                query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');\n            } catch (error) {\n            // Ignore malformed URI components\n            }\n        }\n        return query;\n    };\n    QueryString1.stringify = function(map) {\n        var str = '';\n        for(var key in map){\n            if (map.hasOwnProperty(key)) {\n                var value = map[key];\n                if (str) {\n                    str += '&';\n                }\n                str += encodeURIComponent(key) + '=' + encodeURIComponent(value);\n            }\n        }\n        return str;\n    };\n    QueryString1.deepen = function(map) {\n        // FIXME; Should be type Tree = Record<string, string | Tree>\n        // requires a typescript upgrade.\n        var output = {};\n        for(var k in map){\n            var t = output;\n            var parts = k.split('.');\n            var key = parts.pop();\n            for(var _i = 0, parts_1 = parts; _i < parts_1.length; _i++){\n                var part = parts_1[_i];\n                assertAllowedPropertyName(part);\n                t = t[part] = t[part] || {};\n            }\n            t[key] = map[k];\n        }\n        return output;\n    };\n    QueryString1.flatten = function(obj, _current, _res) {\n        if (_res === void 0) {\n            _res = {};\n        }\n        for(var key in obj){\n            var value = obj[key];\n            var newKey = _current ? _current + '.' + key : key;\n            if (value && typeof value === 'object') {\n                this.flatten(value, newKey, _res);\n            } else {\n                _res[newKey] = value;\n            }\n        }\n        return _res;\n    };\n    return QueryString1;\n}();\nfunction assertAllowedPropertyName(name) {\n    if (PROPERTY_NAME_DENY_LIST.indexOf(name) >= 0) throw new Error(\"Property name \\\"\".concat(name, \"\\\" is not allowed\"));\n}\nvar Subscription = /** @class */ function() {\n    function Subscription1(listeners, listener) {\n        this.listeners = listeners;\n        this.listener = listener;\n        this.unsubscribed = false;\n        this.otherSubscriptions = [];\n    }\n    Object.defineProperty(Subscription1.prototype, \"closed\", {\n        get: function() {\n            return this.unsubscribed;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Subscription1.prototype.add = function(subscription) {\n        this.otherSubscriptions.push(subscription);\n    };\n    Subscription1.prototype.unsubscribe = function() {\n        if (this.unsubscribed) {\n            return;\n        }\n        if (this.listener && this.listeners) {\n            var index = this.listeners.indexOf(this.listener);\n            if (index > -1) {\n                this.listeners.splice(index, 1);\n            }\n        }\n        this.otherSubscriptions.forEach(function(sub) {\n            return sub.unsubscribe();\n        });\n        this.unsubscribed = true;\n    };\n    return Subscription1;\n}();\n// TODO: follow minimal basic spec: https://github.com/tc39/proposal-observable\nvar BehaviorSubject = /** @class */ function() {\n    function BehaviorSubject1(value) {\n        var _this = this;\n        this.value = value;\n        this.listeners = [];\n        this.errorListeners = [];\n        this.then = function() {\n            var _a;\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            return (_a = _this.toPromise()).then.apply(_a, args);\n        };\n    }\n    BehaviorSubject1.prototype.next = function(value) {\n        this.value = value;\n        for(var _i = 0, _a = this.listeners; _i < _a.length; _i++){\n            var listener = _a[_i];\n            listener(value);\n        }\n    };\n    // TODO: implement this as PIPE instead\n    BehaviorSubject1.prototype.map = function(fn) {\n        var newSubject = new BehaviorSubject1(fn(this.value));\n        // TODO: on destroy delete these\n        this.subscribe(function(val) {\n            newSubject.next(fn(val));\n        });\n        this.catch(function(err) {\n            newSubject.error(err);\n        });\n        return newSubject;\n    };\n    BehaviorSubject1.prototype.catch = function(errorListener) {\n        this.errorListeners.push(errorListener);\n        return new Subscription(this.errorListeners, errorListener);\n    };\n    BehaviorSubject1.prototype.error = function(error) {\n        for(var _i = 0, _a = this.errorListeners; _i < _a.length; _i++){\n            var listener = _a[_i];\n            listener(error);\n        }\n    };\n    BehaviorSubject1.prototype.subscribe = function(listener, errorListener) {\n        this.listeners.push(listener);\n        if (errorListener) {\n            this.errorListeners.push(errorListener);\n        }\n        return new Subscription(this.listeners, listener);\n    };\n    BehaviorSubject1.prototype.toPromise = function() {\n        var _this = this;\n        return new Promise(function(resolve, reject) {\n            var subscription = _this.subscribe(function(value) {\n                resolve(value);\n                subscription.unsubscribe();\n            }, function(err) {\n                reject(err);\n                subscription.unsubscribe();\n            });\n        });\n    };\n    BehaviorSubject1.prototype.promise = function() {\n        return this.toPromise();\n    };\n    return BehaviorSubject1;\n}();\nvar State = {\n    Pending: 'Pending',\n    Fulfilled: 'Fulfilled',\n    Rejected: 'Rejected'\n};\nfunction isFunction(val) {\n    return val && typeof val === 'function';\n}\nfunction isObject(val) {\n    return val && typeof val === 'object';\n}\nvar TinyPromise = /** @class */ function() {\n    function TinyPromise1(executor) {\n        this._state = State.Pending;\n        this._handlers = [];\n        this._value = null;\n        executor(this._resolve.bind(this), this._reject.bind(this));\n    }\n    TinyPromise1.prototype._resolve = function(x) {\n        var _this = this;\n        if (x instanceof TinyPromise1) {\n            x.then(this._resolve.bind(this), this._reject.bind(this));\n        } else if (isObject(x) || isFunction(x)) {\n            var called_1 = false;\n            try {\n                var thenable = x.then;\n                if (isFunction(thenable)) {\n                    thenable.call(x, function(result) {\n                        if (!called_1) _this._resolve(result);\n                        called_1 = true;\n                        return undefined;\n                    }, function(error) {\n                        if (!called_1) _this._reject(error);\n                        called_1 = true;\n                        return undefined;\n                    });\n                } else {\n                    this._fulfill(x);\n                }\n            } catch (ex) {\n                if (!called_1) {\n                    this._reject(ex);\n                }\n            }\n        } else {\n            this._fulfill(x);\n        }\n    };\n    TinyPromise1.prototype._fulfill = function(result) {\n        var _this = this;\n        this._state = State.Fulfilled;\n        this._value = result;\n        this._handlers.forEach(function(handler) {\n            return _this._callHandler(handler);\n        });\n    };\n    TinyPromise1.prototype._reject = function(error) {\n        var _this = this;\n        this._state = State.Rejected;\n        this._value = error;\n        this._handlers.forEach(function(handler) {\n            return _this._callHandler(handler);\n        });\n    };\n    TinyPromise1.prototype._isPending = function() {\n        return this._state === State.Pending;\n    };\n    TinyPromise1.prototype._isFulfilled = function() {\n        return this._state === State.Fulfilled;\n    };\n    TinyPromise1.prototype._isRejected = function() {\n        return this._state === State.Rejected;\n    };\n    TinyPromise1.prototype._addHandler = function(onFulfilled, onRejected) {\n        this._handlers.push({\n            onFulfilled: onFulfilled,\n            onRejected: onRejected\n        });\n    };\n    TinyPromise1.prototype._callHandler = function(handler) {\n        if (this._isFulfilled() && isFunction(handler.onFulfilled)) {\n            handler.onFulfilled(this._value);\n        } else if (this._isRejected() && isFunction(handler.onRejected)) {\n            handler.onRejected(this._value);\n        }\n    };\n    TinyPromise1.prototype.then = function(onFulfilled, onRejected) {\n        var _this = this;\n        switch(this._state){\n            case State.Pending:\n                {\n                    return new TinyPromise1(function(resolve, reject) {\n                        _this._addHandler(function(value) {\n                            nextTick(function() {\n                                try {\n                                    if (isFunction(onFulfilled)) {\n                                        resolve(onFulfilled(value));\n                                    } else {\n                                        resolve(value);\n                                    }\n                                } catch (ex) {\n                                    reject(ex);\n                                }\n                            });\n                        }, function(error) {\n                            nextTick(function() {\n                                try {\n                                    if (isFunction(onRejected)) {\n                                        resolve(onRejected(error));\n                                    } else {\n                                        reject(error);\n                                    }\n                                } catch (ex) {\n                                    reject(ex);\n                                }\n                            });\n                        });\n                    });\n                }\n            case State.Fulfilled:\n                {\n                    return new TinyPromise1(function(resolve, reject) {\n                        nextTick(function() {\n                            try {\n                                if (isFunction(onFulfilled)) {\n                                    resolve(onFulfilled(_this._value));\n                                } else {\n                                    resolve(_this._value);\n                                }\n                            } catch (ex) {\n                                reject(ex);\n                            }\n                        });\n                    });\n                }\n            case State.Rejected:\n                {\n                    return new TinyPromise1(function(resolve, reject) {\n                        nextTick(function() {\n                            try {\n                                if (isFunction(onRejected)) {\n                                    resolve(onRejected(_this._value));\n                                } else {\n                                    reject(_this._value);\n                                }\n                            } catch (ex) {\n                                reject(ex);\n                            }\n                        });\n                    });\n                }\n        }\n    };\n    return TinyPromise1;\n}();\nvar Promise$1 = typeof Promise !== 'undefined' ? Promise : TinyPromise;\n// Webpack workaround to conditionally require certain external modules\n// only on the server and not bundle them on the client\nvar serverOnlyRequire;\ntry {\n    // tslint:disable-next-line:no-eval\n    serverOnlyRequire = eval('require');\n} catch (err) {\n    // all good\n    serverOnlyRequire = function() {\n        return null;\n    };\n}\nvar serverOnlyRequire$1 = serverOnlyRequire;\nfunction promiseResolve(value) {\n    return new Promise$1(function(resolve) {\n        return resolve(value);\n    });\n}\n// Adapted from https://raw.githubusercontent.com/developit/unfetch/master/src/index.mjs\nfunction tinyFetch(url, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return new Promise$1(function(resolve, reject) {\n        var request = new XMLHttpRequest();\n        request.open(options.method || 'get', url, true);\n        if (options.headers) {\n            for(var i in options.headers){\n                request.setRequestHeader(i, options.headers[i]);\n            }\n        }\n        request.withCredentials = options.credentials === 'include';\n        request.onload = function() {\n            resolve(response());\n        };\n        request.onerror = reject;\n        request.send(options.body);\n        function response() {\n            var keys = [];\n            var all = [];\n            var headers = {};\n            var header = undefined;\n            request.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, function(_match, _key, value) {\n                var key = _key;\n                keys.push(key = key.toLowerCase());\n                all.push([\n                    key,\n                    value\n                ]);\n                header = headers[key];\n                headers[key] = header ? \"\".concat(header, \",\").concat(value) : value;\n                return '';\n            });\n            return {\n                ok: (request.status / 100 | 0) === 2,\n                status: request.status,\n                statusText: request.statusText,\n                url: request.responseURL,\n                clone: response,\n                text: function() {\n                    return promiseResolve(request.responseText);\n                },\n                json: function() {\n                    return promiseResolve(request.responseText).then(JSON.parse);\n                },\n                blob: function() {\n                    return promiseResolve(new Blob([\n                        request.response\n                    ]));\n                },\n                headers: {\n                    keys: function() {\n                        return keys;\n                    },\n                    entries: function() {\n                        return all;\n                    },\n                    get: function(n) {\n                        return headers[n.toLowerCase()];\n                    },\n                    has: function(n) {\n                        return n.toLowerCase() in headers;\n                    }\n                }\n            };\n        }\n    });\n}\nfunction getFetch() {\n    // If fetch is defined, in the browser, via polyfill, or in a Cloudflare worker, use it.\n    var _fetch = undefined;\n    if (globalThis.fetch) {\n        _fetch !== null && _fetch !== void 0 ? _fetch : _fetch = globalThis.fetch;\n    } else if (true) {\n        // If fetch is not defined, in a Node.js environment, use node-fetch.\n        try {\n            // node-fetch@^3 is ESM only, and will throw error on require.\n            _fetch !== null && _fetch !== void 0 ? _fetch : _fetch = serverOnlyRequire$1('node-fetch');\n        } catch (e) {\n            // If node-fetch is not installed, use tiny-fetch.\n            console.warn('node-fetch is not installed. consider polyfilling fetch or installing node-fetch.');\n            console.warn(e);\n        }\n    }\n    // Otherwise, use tiny-fetch.\n    return _fetch !== null && _fetch !== void 0 ? _fetch : tinyFetch;\n}\nfunction assign(target) {\n    var to = Object(target);\n    for(var index = 1; index < arguments.length; index++){\n        var nextSource = arguments[index];\n        if (nextSource != null) {\n            // Skip over if undefined or null\n            for(var nextKey in nextSource){\n                // Avoid bugs when hasOwnProperty is shadowed\n                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                    to[nextKey] = nextSource[nextKey];\n                }\n            }\n        }\n    }\n    return to;\n}\nfunction throttle(func, wait, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var context;\n    var args;\n    var result;\n    var timeout = null;\n    var previous = 0;\n    var later = function() {\n        previous = options.leading === false ? 0 : Date.now();\n        timeout = null;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n    };\n    return function() {\n        var now = Date.now();\n        if (!previous && options.leading === false) previous = now;\n        var remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0 || remaining > wait) {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            previous = now;\n            result = func.apply(context, args);\n            if (!timeout) context = args = null;\n        } else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\nvar camelCaseToKebabCase = function(str) {\n    return str ? str.replace(/([A-Z])/g, function(g) {\n        return \"-\".concat(g[0].toLowerCase());\n    }) : '';\n};\nvar Animator = /** @class */ function() {\n    function Animator1() {}\n    Animator1.prototype.bindAnimations = function(animations) {\n        for(var _i = 0, animations_1 = animations; _i < animations_1.length; _i++){\n            var animation = animations_1[_i];\n            switch(animation.trigger){\n                case 'pageLoad':\n                    this.triggerAnimation(animation);\n                    break;\n                case 'hover':\n                    this.bindHoverAnimation(animation);\n                    break;\n                case 'scrollInView':\n                    this.bindScrollInViewAnimation(animation);\n                    break;\n            }\n        }\n    };\n    Animator1.prototype.warnElementNotPresent = function(id) {\n        console.warn(\"Cannot animate element: element with ID \".concat(id, \" not found!\"));\n    };\n    Animator1.prototype.augmentAnimation = function(animation, element) {\n        var stylesUsed = this.getAllStylesUsed(animation);\n        var computedStyle = getComputedStyle(element);\n        // const computedStyle = getComputedStyle(element);\n        // // FIXME: this will break if original load is in one reponsive size then resize to another hmmm\n        // Need to use transform instead of left since left can change on screen sizes\n        var firstStyles = animation.steps[0].styles;\n        var lastStyles = animation.steps[animation.steps.length - 1].styles;\n        var bothStyles = [\n            firstStyles,\n            lastStyles\n        ];\n        // FIXME: this won't work as expected for augmented animations - may need the editor itself to manage this\n        for(var _i = 0, bothStyles_1 = bothStyles; _i < bothStyles_1.length; _i++){\n            var styles = bothStyles_1[_i];\n            for(var _a = 0, stylesUsed_1 = stylesUsed; _a < stylesUsed_1.length; _a++){\n                var style = stylesUsed_1[_a];\n                if (!(style in styles)) {\n                    styles[style] = computedStyle[style];\n                }\n            }\n        }\n    };\n    Animator1.prototype.getAllStylesUsed = function(animation) {\n        var properties = [];\n        for(var _i = 0, _a = animation.steps; _i < _a.length; _i++){\n            var step = _a[_i];\n            for(var key in step.styles){\n                if (properties.indexOf(key) === -1) {\n                    properties.push(key);\n                }\n            }\n        }\n        return properties;\n    };\n    Animator1.prototype.triggerAnimation = function(animation) {\n        var _this = this;\n        // TODO: do for ALL elements\n        var elements = Array.prototype.slice.call(document.getElementsByClassName(animation.elementId || animation.id || ''));\n        if (!elements.length) {\n            this.warnElementNotPresent(animation.elementId || animation.id || '');\n            return;\n        }\n        Array.from(elements).forEach(function(element) {\n            _this.augmentAnimation(animation, element);\n            // TODO: do this properly, may have other animations of different properties\n            // TODO: only override the properties\n            // TODO: if there is an entrance and hover animation, the transition duration will get effed\n            // element.setAttribute('style', '');\n            // const styledUsed = this.getAllStylesUsed(animation);\n            element.style.transition = 'none';\n            element.style.transitionDelay = '0';\n            assign(element.style, animation.steps[0].styles);\n            // TODO: queue/batch these timeouts\n            // TODO: only include properties explicitly set in the animation\n            // using Object.keys(styles)\n            setTimeout(function() {\n                element.style.transition = \"all \".concat(animation.duration, \"s \").concat(camelCaseToKebabCase(animation.easing));\n                if (animation.delay) {\n                    element.style.transitionDelay = animation.delay + 's';\n                }\n                assign(element.style, animation.steps[1].styles);\n                // TODO: maybe remove/reset transitoin property after animation duration\n                // TODO: queue timers\n                setTimeout(function() {\n                    // TODO: what if has other transition (reset back to what it was)\n                    element.style.transition = '';\n                    element.style.transitionDelay = '';\n                }, (animation.delay || 0) * 1000 + animation.duration * 1000 + 100);\n            });\n        });\n    };\n    Animator1.prototype.bindHoverAnimation = function(animation) {\n        var _this = this;\n        // TODO: is it multiple binding when editing...?\n        // TODO: unbind on element remove\n        // TODO: apply to ALL elements\n        var elements = Array.prototype.slice.call(document.getElementsByClassName(animation.elementId || animation.id || ''));\n        if (!elements.length) {\n            this.warnElementNotPresent(animation.elementId || animation.id || '');\n            return;\n        }\n        Array.from(elements).forEach(function(element) {\n            _this.augmentAnimation(animation, element);\n            var defaultState = animation.steps[0].styles;\n            var hoverState = animation.steps[1].styles;\n            function attachDefaultState() {\n                assign(element.style, defaultState);\n            }\n            function attachHoverState() {\n                assign(element.style, hoverState);\n            }\n            attachDefaultState();\n            element.addEventListener('mouseenter', attachHoverState);\n            element.addEventListener('mouseleave', attachDefaultState);\n            // TODO: queue/batch these timeouts\n            setTimeout(function() {\n                element.style.transition = \"all \".concat(animation.duration, \"s \").concat(camelCaseToKebabCase(animation.easing));\n                if (animation.delay) {\n                    element.style.transitionDelay = animation.delay + 's';\n                }\n            });\n        });\n    };\n    // TODO: unbind on element remove\n    Animator1.prototype.bindScrollInViewAnimation = function(animation) {\n        var _this = this;\n        // TODO: apply to ALL matching elements\n        var elements = Array.prototype.slice.call(document.getElementsByClassName(animation.elementId || animation.id || ''));\n        if (!elements.length) {\n            this.warnElementNotPresent(animation.elementId || animation.id || '');\n            return;\n        }\n        // TODO: if server side rendered and scrolled into view don't animate...\n        Array.from(elements).forEach(function(element) {\n            _this.augmentAnimation(animation, element);\n            var triggered = false;\n            var pendingAnimation = false;\n            function immediateOnScroll() {\n                if (!triggered && isScrolledIntoView(element)) {\n                    triggered = true;\n                    pendingAnimation = true;\n                    setTimeout(function() {\n                        assign(element.style, animation.steps[1].styles);\n                        if (!animation.repeat) {\n                            document.removeEventListener('scroll', onScroll);\n                        }\n                        setTimeout(function() {\n                            pendingAnimation = false;\n                            if (!animation.repeat) {\n                                element.style.transition = '';\n                                element.style.transitionDelay = '';\n                            }\n                        }, (animation.duration + (animation.delay || 0)) * 1000 + 100);\n                    });\n                } else if (animation.repeat && triggered && !pendingAnimation && !isScrolledIntoView(element)) {\n                    // we want to repeat the animation every time the the element is out of view and back again\n                    triggered = false;\n                    assign(element.style, animation.steps[0].styles);\n                }\n            }\n            // TODO: roll all of these in one for more efficiency of checking all the rects\n            var onScroll = throttle(immediateOnScroll, 200, {\n                leading: false\n            });\n            // TODO: fully in view or partially\n            function isScrolledIntoView(elem) {\n                var rect = elem.getBoundingClientRect();\n                var windowHeight = window.innerHeight;\n                var thresholdPercent = (animation.thresholdPercent || 0) / 100;\n                var threshold = thresholdPercent * windowHeight;\n                // TODO: partial in view? or what if element is larger than screen itself\n                return rect.bottom > threshold && rect.top < windowHeight - threshold // Element is peeking top or bottom\n                ;\n            }\n            var defaultState = animation.steps[0].styles;\n            function attachDefaultState() {\n                assign(element.style, defaultState);\n            }\n            attachDefaultState();\n            // TODO: queue/batch these timeouts!\n            setTimeout(function() {\n                element.style.transition = \"all \".concat(animation.duration, \"s \").concat(camelCaseToKebabCase(animation.easing));\n                if (animation.delay) {\n                    element.style.transitionDelay = animation.delay + 's';\n                }\n            });\n            // TODO: one listener for everything\n            document.addEventListener('scroll', onScroll, {\n                capture: true,\n                passive: true\n            });\n            // Do an initial check\n            immediateOnScroll();\n        });\n    };\n    return Animator1;\n}();\n/**\r\n * RegExp to match field-content in RFC 7230 sec 3.2\r\n *\r\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\r\n * field-vchar   = VCHAR / obs-text\r\n * obs-text      = %x80-FF\r\n */ var fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\nvar Cookies = /** @class */ function() {\n    function Cookies1(request, response) {\n        this.request = request;\n        this.response = response;\n    }\n    Cookies1.prototype.get = function(name) {\n        var header = this.request.headers['cookie'];\n        if (!header) {\n            return;\n        }\n        var match = header.match(getPattern(name));\n        if (!match) {\n            return;\n        }\n        var value = match[1];\n        return value;\n    };\n    Cookies1.prototype.set = function(name, value, opts) {\n        var res = this.response;\n        var req = this.request;\n        var headers = res.getHeader('Set-Cookie') || [];\n        // TODO: just make this always true\n        var secure = this.secure !== undefined ? !!this.secure : req.protocol === 'https' || req.connection.encrypted;\n        var cookie = new Cookie(name, value, opts);\n        if (typeof headers === 'string') {\n            headers = [\n                headers\n            ];\n        }\n        if (!secure && opts && opts.secure) {\n            throw new Error('Cannot send secure cookie over unencrypted connection');\n        }\n        cookie.secure = secure;\n        if (opts && 'secure' in opts) {\n            cookie.secure = !!opts.secure;\n        }\n        pushCookie(headers, cookie);\n        var setHeader = res.setHeader;\n        setHeader.call(res, 'Set-Cookie', headers);\n        return this;\n    };\n    return Cookies1;\n}();\nvar Cookie = /** @class */ function() {\n    function Cookie1(name, value, attrs) {\n        this.path = '/';\n        this.domain = undefined;\n        this.httpOnly = true;\n        this.sameSite = false;\n        this.secure = false;\n        this.overwrite = false;\n        this.name = '';\n        this.value = '';\n        if (!fieldContentRegExp.test(name)) {\n            throw new TypeError('argument name is invalid');\n        }\n        if (value && !fieldContentRegExp.test(value)) {\n            throw new TypeError('argument value is invalid');\n        }\n        if (!value) {\n            this.expires = new Date(0);\n        }\n        this.name = name;\n        this.value = value || '';\n        if (attrs.expires) {\n            this.expires = attrs.expires;\n        }\n        if (attrs.secure) {\n            this.secure = attrs.secure;\n        }\n    }\n    Cookie1.prototype.toString = function() {\n        return \"\".concat(this.name, \"=\").concat(this.value);\n    };\n    Cookie1.prototype.toHeader = function() {\n        var header = this.toString();\n        if (this.maxAge) {\n            this.expires = new Date(Date.now() + this.maxAge);\n        }\n        if (this.path) {\n            header += \"; path=\".concat(this.path);\n        }\n        if (this.expires) {\n            header += \"; expires=\".concat(this.expires.toUTCString());\n        }\n        if (this.domain) {\n            header += \"; domain=\".concat(this.domain);\n        }\n        // TODO: samesite=none by default (?)\n        header += \"; SameSite=\".concat(this.sameSite === true ? 'strict' : 'None');\n        // TODO: On by default\n        if (this.secure) {\n            header += '; secure';\n        }\n        if (this.httpOnly) {\n            header += '; httponly';\n        }\n        return header;\n    };\n    return Cookie1;\n}();\nfunction getPattern(name) {\n    return new RegExp(\"(?:^|;) *\".concat(name.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&'), \"=([^;]*)\"));\n}\nfunction pushCookie(headers, cookie) {\n    if (cookie.overwrite) {\n        for(var i = headers.length - 1; i >= 0; i--){\n            if (headers[i].indexOf(\"\".concat(cookie.name, \"=\")) === 0) {\n                headers.splice(i, 1);\n            }\n        }\n    }\n    headers.push(cookie.toHeader());\n}\nfunction omit(obj) {\n    var values = [];\n    for(var _i = 1; _i < arguments.length; _i++){\n        values[_i - 1] = arguments[_i];\n    }\n    var newObject = Object.assign({}, obj);\n    for(var _a = 0, values_1 = values; _a < values_1.length; _a++){\n        var key = values_1[_a];\n        delete newObject[key];\n    }\n    return newObject;\n}\n/**\r\n * @credit https://stackoverflow.com/a/2117523\r\n */ function uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}\n/**\r\n * Slightly cleaner and smaller UUIDs\r\n */ function uuid() {\n    return uuidv4().replace(/-/g, '');\n}\nfunction emptyUrl() {\n    return {\n        query: null,\n        port: null,\n        auth: null,\n        hash: null,\n        host: null,\n        hostname: null,\n        href: null,\n        path: null,\n        pathname: null,\n        protocol: null,\n        search: null,\n        slashes: null\n    };\n}\n// Replacement for `url.parse` using `URL` global object that works with relative paths.\n// Assumptions: this function operates in a NodeJS environment.\nfunction parse$1(url) {\n    var _a;\n    var out = emptyUrl();\n    var u;\n    var pathOnly = url === '' || url[0] === '/';\n    if (pathOnly) {\n        u = new URL(url, 'http://0.0.0.0/');\n        out.href = u.href;\n        out.href = (_a = out.href) === null || _a === void 0 ? void 0 : _a.slice(14); // remove 'http://0.0.0.0/'\n    } else {\n        u = new URL(url);\n        out.href = u.href;\n        out.port = u.port === '' ? null : u.port;\n        out.hash = u.hash === '' ? null : u.hash;\n        out.host = u.host;\n        out.hostname = u.hostname;\n        out.href = u.href;\n        out.pathname = u.pathname;\n        out.protocol = u.protocol;\n        out.slashes = url[u.protocol.length] === '/'; // check if the mimetype is proceeded by a slash\n    }\n    out.search = u.search;\n    out.query = u.search.slice(1); // remove '?'\n    out.path = \"\".concat(u.pathname).concat(u.search);\n    out.pathname = u.pathname;\n    return out;\n}\n/**\r\n * Safe conversion to error type. Intended to be used in catch blocks where the\r\n *  value is not guaranteed to be an error.\r\n *\r\n *  @example\r\n *  try {\r\n *    throw new Error('Something went wrong')\r\n *  }\r\n *  catch (err: unknown) {\r\n *    const error: Error = toError(err)\r\n *  }\r\n */ function toError(err) {\n    if (err instanceof Error) return err;\n    return new Error(String(err));\n}\nvar DEFAULT_API_VERSION = 'v3';\nvar SDK_VERSION = '6.1.2';\nfunction datePlusMinutes(minutes) {\n    if (minutes === void 0) {\n        minutes = 30;\n    }\n    return new Date(Date.now() + minutes * 60000);\n}\nvar isPositiveNumber = function(thing) {\n    return typeof thing === 'number' && !isNaN(thing) && thing >= 0;\n};\nvar isReactNative = typeof navigator === 'object' && navigator.product === 'ReactNative';\nvar validEnvList = [\n    'production',\n    'qa',\n    'test',\n    'development',\n    'dev',\n    'cdn-qa',\n    'cloud',\n    'fast',\n    'cdn2',\n    'cdn-prod'\n];\nfunction getQueryParam(url, variable) {\n    var query = url.split('?')[1] || '';\n    var vars = query.split('&');\n    for(var i = 0; i < vars.length; i++){\n        var pair = vars[i].split('=');\n        if (decodeURIComponent(pair[0]) === variable) {\n            return decodeURIComponent(pair[1]);\n        }\n    }\n    return null;\n}\nvar urlParser = {\n    parse: function(url) {\n        var el = document.createElement('a');\n        el.href = url;\n        var out = {};\n        var props = [\n            'username',\n            'password',\n            'host',\n            'hostname',\n            'port',\n            'protocol',\n            'origin',\n            'pathname',\n            'search',\n            'hash'\n        ];\n        for(var _i = 0, props_1 = props; _i < props_1.length; _i++){\n            var prop = props_1[_i];\n            out[prop] = el[prop];\n        }\n        // IE 11 pathname handling workaround\n        // (IE omits preceeding '/', unlike other browsers)\n        if ((out.pathname || out.pathname === '') && typeof out.pathname === 'string' && out.pathname.indexOf('/') !== 0) {\n            out.pathname = '/' + out.pathname;\n        }\n        return out;\n    }\n};\nvar parse = isReactNative ? function() {\n    return emptyUrl();\n} :  false ? 0 : parse$1;\nfunction setCookie(name, value, expires) {\n    try {\n        var expiresString = '';\n        // TODO: need to know if secure server side\n        if (expires) {\n            expiresString = '; expires=' + expires.toUTCString();\n        }\n        var secure = isBrowser ? location.protocol === 'https:' : true;\n        document.cookie = name + '=' + (value || '') + expiresString + '; path=/' + (secure ? '; secure; SameSite=None' : '');\n    } catch (err) {\n        console.warn('Could not set cookie', err);\n    }\n}\nfunction getCookie(name) {\n    try {\n        return decodeURIComponent(document.cookie.replace(new RegExp('(?:(?:^|.*;)\\\\s*' + encodeURIComponent(name).replace(/[\\-\\.\\+\\*]/g, '\\\\$&') + '\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$'), '$1')) || null;\n    } catch (err) {\n        console.warn('Could not get cookie', err);\n    }\n}\nfunction size(object) {\n    return Object.keys(object).length;\n}\nfunction find(target, callback) {\n    var list = target;\n    // Makes sures is always has an positive integer as length.\n    var length = list.length >>> 0;\n    var thisArg = arguments[1];\n    for(var i = 0; i < length; i++){\n        var element = list[i];\n        if (callback.call(thisArg, element, i, list)) {\n            return element;\n        }\n    }\n}\nvar sessionStorageKey = 'builderSessionId';\nvar localStorageKey = 'builderVisitorId';\nvar isBrowser =  false && 0;\nvar isIframe = isBrowser && window.top !== window.self;\nfunction BuilderComponent(info) {\n    if (info === void 0) {\n        info = {};\n    }\n    return Builder.Component(info);\n}\nvar Builder = /** @class */ function() {\n    function Builder1(apiKey, request, response, forceNewInstance, authToken, apiVersion) {\n        if (apiKey === void 0) {\n            apiKey = null;\n        }\n        if (forceNewInstance === void 0) {\n            forceNewInstance = false;\n        }\n        if (authToken === void 0) {\n            authToken = null;\n        }\n        var _this = this;\n        this.request = request;\n        this.response = response;\n        this.eventsQueue = [];\n        this.throttledClearEventsQueue = throttle(function() {\n            _this.processEventsQueue();\n            // Extend the session cookie\n            _this.setCookie(sessionStorageKey, _this.sessionId, datePlusMinutes(30));\n        }, 5);\n        this.env = 'production';\n        this.sessionId = this.getSessionId();\n        this.targetContent = true;\n        this.contentPerRequest = 1;\n        // TODO: make array or function\n        this.allowCustomFonts = true;\n        this.cookies = null;\n        // TODO: api options object\n        this.cachebust = false;\n        this.overrideParams = '';\n        this.noCache = false;\n        this.preview = false;\n        /**\r\n         * Dictates which API endpoint is used when fetching content. Allows `'content'` and `'query'`.\r\n         * Defaults to `'query'`.\r\n         */ this.apiEndpoint$ = new BehaviorSubject('query');\n        this.apiVersion$ = new BehaviorSubject(undefined);\n        this.canTrack$ = new BehaviorSubject(!this.browserTrackingDisabled);\n        this.hasOverriddenCanTrack = false;\n        this.apiKey$ = new BehaviorSubject(null);\n        this.authToken$ = new BehaviorSubject(null);\n        this.userAttributesChanged = new BehaviorSubject(null);\n        this.editingMode$ = new BehaviorSubject(isIframe);\n        // TODO: decorator to do this stuff with the get/set (how do with typing too? compiler?)\n        this.editingModel$ = new BehaviorSubject(null);\n        this.userAgent = typeof navigator === 'object' && navigator.userAgent || '';\n        this.trackingHooks = [];\n        // Set this to control the userId\n        // TODO: allow changing it mid session and updating existing data to be associated\n        // e.g. for when a user navigates and then logs in\n        this.visitorId = this.getVisitorId();\n        this.autoTrack = !Builder1.isBrowser ? false : !this.isDevelopmentEnv && !(Builder1.isBrowser && location.search.indexOf('builder.preview=') !== -1);\n        this.trackingUserAttributes = {};\n        this.blockContentLoading = '';\n        this.observersByKey = {};\n        this.noEditorUpdates = {};\n        this.overrides = {};\n        this.queryOptions = {};\n        this.getContentQueue = null;\n        this.priorContentQueue = null;\n        this.testCookiePrefix = 'builder.tests';\n        this.cookieQueue = [];\n        // TODO: use a window variable for this perhaps, e.g. bc webcomponents may be loading builder twice\n        // with it's and react (use rollup build to fix)\n        if (Builder1.isBrowser && !forceNewInstance && Builder1.singletonInstance) {\n            return Builder1.singletonInstance;\n        }\n        if (this.request && this.response) {\n            this.setUserAgent(this.request.headers['user-agent'] || '');\n            this.cookies = new Cookies(this.request, this.response);\n        }\n        if (apiKey) {\n            this.apiKey = apiKey;\n        }\n        if (apiVersion) {\n            this.apiVersion = apiVersion;\n        }\n        if (authToken) {\n            this.authToken = authToken;\n        }\n        if (isBrowser) {\n            if (Builder1.isEditing) {\n                this.bindMessageListeners();\n                parent.postMessage({\n                    type: 'builder.animatorOptions',\n                    data: {\n                        options: {\n                            version: 2\n                        }\n                    }\n                }, '*');\n            }\n        // TODO: postmessage to parent the builder info for every package\n        // type: 'builder.sdk', data: { name: '@builder.io/react', version: '0.1.23' }\n        // (window as any).BUILDER_VERSION = Builder.VERSION;\n        // Ensure always one Builder global singleton\n        // TODO: some people won't want this, e.g. rakuten\n        // Maybe hide this behind symbol or on document, etc\n        // if ((window as any).Builder) {\n        //   Builder.components = (window as any).Builder.components;\n        // } else {\n        //   (window as any).Builder = Builder;\n        // }\n        }\n        if (isIframe) {\n            this.messageFrameLoaded();\n        }\n        // TODO: on destroy clear subscription\n        this.canTrack$.subscribe(function(value) {\n            if (value) {\n                if (typeof sessionStorage !== 'undefined') {\n                    try {\n                        if (!sessionStorage.getItem(sessionStorageKey)) {\n                            sessionStorage.setItem(sessionStorageKey, _this.sessionId);\n                        }\n                    } catch (err) {\n                        console.debug('Session storage error', err);\n                    }\n                }\n                if (_this.eventsQueue.length) {\n                    _this.throttledClearEventsQueue();\n                }\n                if (_this.cookieQueue.length) {\n                    _this.cookieQueue.forEach(function(item) {\n                        _this.setCookie(item[0], item[1]);\n                    });\n                    _this.cookieQueue.length = 0;\n                }\n            }\n        });\n        if (isBrowser) {\n            // TODO: defer so subclass constructor runs and injects location service\n            this.setTestsFromUrl();\n            // TODO: do this on every request send?\n            this.getOverridesFromQueryString();\n            // cookies used in personalization container script, so need to set before hydration to match script result\n            var userAttrCookie = this.getCookie(Builder1.attributesCookieName);\n            if (userAttrCookie) {\n                try {\n                    var attributes = JSON.parse(userAttrCookie);\n                    this.setUserAttributes(attributes);\n                } catch (err) {\n                    console.debug('Error parsing user attributes cookie', err);\n                }\n            }\n        }\n    }\n    Builder1.register = function(type, info) {\n        if (type === 'plugin') {\n            info = this.serializeIncludingFunctions(info, true);\n        }\n        // TODO: all must have name and can't conflict?\n        var typeList = this.registry[type];\n        if (!typeList) {\n            typeList = this.registry[type] = [];\n        }\n        typeList.push(info);\n        if (Builder1.isBrowser) {\n            var message = {\n                type: 'builder.register',\n                data: {\n                    type: type,\n                    info: info\n                }\n            };\n            try {\n                parent.postMessage(message, '*');\n                if (parent !== window) {\n                    window.postMessage(message, '*');\n                }\n            } catch (err) {\n                console.debug('Could not postmessage', err);\n            }\n        }\n        this.registryChange.next(this.registry);\n    };\n    Builder1.registerEditor = function(info) {\n        if (Builder1.isBrowser) {\n            window.postMessage({\n                type: 'builder.registerEditor',\n                data: omit(info, 'component')\n            }, '*');\n            var hostname = location.hostname;\n            if (!Builder1.isTrustedHost(hostname)) {\n                console.error('Builder.registerEditor() called in the wrong environment! You cannot load custom editors from your app, they must be loaded through the Builder.io app itself. Follow the readme here for more details: https://github.com/builderio/builder/tree/master/plugins/cloudinary or contact chat us in our Spectrum community for help: https://spectrum.chat/builder');\n            }\n        }\n        this.editors.push(info);\n    };\n    Builder1.registerPlugin = function(info) {\n        this.plugins.push(info);\n    };\n    Builder1.registerAction = function(action) {\n        var _a;\n        this.actions.push(action);\n        if (Builder1.isBrowser) {\n            var actionClone = JSON.parse(JSON.stringify(action));\n            if (action.action) {\n                actionClone.action = action.action.toString();\n            }\n            (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\n                type: 'builder.registerAction',\n                data: actionClone\n            }, '*');\n        }\n    };\n    Builder1.registerTrustedHost = function(host) {\n        this.trustedHosts.push(host);\n    };\n    /**\r\n     * @param context @type {import('isolated-vm').Context}\r\n     * Use this function to control the execution context of custom code on the server.\r\n     * const ivm = require('isolated-vm');\r\n     * const isolate = new ivm.Isolate({ memoryLimit: 128 });\r\n     * const context = isolate.createContextSync();\r\n     * Builder.setServerContext(context);\r\n     */ Builder1.setServerContext = function(context) {\n        this.serverContext = context;\n    };\n    Builder1.isTrustedHost = function(hostname) {\n        var isTrusted = this.trustedHosts.findIndex(function(trustedHost) {\n            return trustedHost.startsWith('*.') ? hostname.endsWith(trustedHost.slice(1)) : trustedHost === hostname;\n        }) > -1;\n        return isTrusted;\n    };\n    Builder1.isTrustedHostForEvent = function(event) {\n        if (event.origin === 'null') {\n            return false;\n        }\n        var url = parse(event.origin);\n        return url.hostname && Builder1.isTrustedHost(url.hostname);\n    };\n    Builder1.runAction = function(action) {\n        // TODO\n        var actionObject = typeof action === 'string' ? find(this.actions, function(item) {\n            return item.name === action;\n        }) : action;\n        if (!actionObject) {\n            throw new Error(\"Action not found: \".concat(action));\n        }\n    };\n    Builder1.fields = function(name, fields) {\n        var _a;\n        (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\n            type: 'builder.fields',\n            data: {\n                name: name,\n                fields: fields\n            }\n        }, '*');\n    };\n    /**\r\n     * @deprecated\r\n     * @hidden\r\n     *\r\n     * Use Builder.register('editor.settings', {}) instead.\r\n     */ Builder1.set = function(settings) {\n        Builder1.register('editor.settings', settings);\n    };\n    Builder1.import = function(packageName) {\n        if (!Builder1.isBrowser) {\n            // TODO: server side support *maybe*\n            console.warn('Builder.import used on the server - this should only be used in the browser');\n            return;\n        }\n        var System = window.System;\n        if (!System) {\n            console.warn('System.js not available. Please include System.js when using Builder.import');\n            return;\n        }\n        return System.import(\"https://cdn.builder.io/systemjs/\".concat(packageName));\n    };\n    Object.defineProperty(Builder1, \"editingPage\", {\n        // useCdnApi = false;\n        get: function() {\n            return this._editingPage;\n        },\n        set: function(editingPage) {\n            this._editingPage = editingPage;\n            if (isBrowser && isIframe) {\n                if (editingPage) {\n                    document.body.classList.add('builder-editing-page');\n                } else {\n                    document.body.classList.remove('builder-editing-page');\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Builder1.serializeIncludingFunctions = function(info, isForPlugin) {\n        var serializeFn = function(fnValue) {\n            var fnStr = fnValue.toString().trim();\n            // we need to account for a few different fn syntaxes:\n            // 1. `function name(args) => {code}`\n            // 2. `name(args) => {code}`\n            // 3. `(args) => {}`\n            // 4. `args => {}`\n            // 5. `async function(args) {code}`\n            // 6. `async (args) => {}`\n            // 7. `async args => {}`\n            var isArrowWithoutParens = /^[a-zA-Z0-9_]+\\s*=>/i.test(fnStr);\n            var appendFunction = !fnStr.startsWith('function') && !fnStr.startsWith('async') && !fnStr.startsWith('(') && !isArrowWithoutParens;\n            return \"return (\".concat(appendFunction ? 'function ' : '').concat(fnStr, \").apply(this, arguments)\");\n        };\n        var objToReturn = JSON.parse(JSON.stringify(info, function(key, value) {\n            var shouldNotSerializeFn = isForPlugin && key === 'onSave';\n            if (typeof value === 'function' && !shouldNotSerializeFn) {\n                return serializeFn(value);\n            }\n            return value;\n        }));\n        if (isForPlugin) {\n            objToReturn.onSave = info.onSave;\n        }\n        return objToReturn;\n    };\n    Builder1.prepareComponentSpecToSend = function(spec) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, this.serializeIncludingFunctions(spec)), {\n            class: undefined\n        });\n    };\n    Builder1.registerBlock = function(component, options) {\n        this.registerComponent(component, options);\n    };\n    Builder1.registerComponent = function(component, options) {\n        var _a;\n        var spec = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            class: component\n        }, component.builderOptions), options);\n        this.addComponent(spec);\n        var editable = options.models && this.singletonInstance.editingModel ? isBrowser && options.models.includes(this.singletonInstance.editingModel) : isBrowser;\n        if (editable) {\n            var sendSpec = this.prepareComponentSpecToSend(spec);\n            (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\n                type: 'builder.registerComponent',\n                data: sendSpec\n            }, '*');\n        }\n    };\n    Builder1.addComponent = function(component) {\n        var current = find(this.components, function(item) {\n            return item.name === component.name;\n        });\n        if (current) {\n            // FIXME: why does sometimes we get an extra post without class - probably\n            // from postMessage handler wrong in some place\n            if (current.class && !component.class) {\n                return;\n            }\n            this.components.splice(this.components.indexOf(current), 1, component);\n        } else {\n            this.components.push(component);\n        }\n    };\n    // TODO: style guide, etc off this system as well?\n    Builder1.component = function(info) {\n        var _this = this;\n        if (info === void 0) {\n            info = {};\n        }\n        return function(component) {\n            var _a;\n            var spec = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, info), {\n                class: component\n            });\n            if (!spec.name) {\n                spec.name = component.name;\n            }\n            _this.addComponent(spec);\n            var sendSpec = _this.prepareComponentSpecToSend(spec);\n            // TODO: serialize component name and inputs\n            if (isBrowser) {\n                (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\n                    type: 'builder.registerComponent',\n                    data: sendSpec\n                }, '*');\n            }\n            return component;\n        };\n    };\n    Object.defineProperty(Builder1, \"Component\", {\n        get: function() {\n            return this.component;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Builder1.prototype.processEventsQueue = function() {\n        if (!this.eventsQueue.length) {\n            return;\n        }\n        var events = this.eventsQueue;\n        this.eventsQueue = [];\n        var fullUserAttributes = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, Builder1.overrideUserAttributes), this.trackingUserAttributes);\n        for(var _i = 0, events_1 = events; _i < events_1.length; _i++){\n            var event_1 = events_1[_i];\n            if (!event_1.data.metadata) {\n                event_1.data.metadata = {};\n            }\n            if (!event_1.data.metadata.user) {\n                event_1.data.metadata.user = {};\n            }\n            Object.assign(event_1.data.metadata.user, fullUserAttributes, event_1.data.metadata.user);\n        }\n        var host = this.host;\n        getFetch()(\"\".concat(host, \"/api/v1/track\"), {\n            method: 'POST',\n            body: JSON.stringify({\n                events: events\n            }),\n            headers: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n                'content-type': 'application/json'\n            }, this.getSdkHeaders()),\n            mode: 'cors'\n        }).catch(function() {\n        // Not the end of the world\n        });\n    };\n    Object.defineProperty(Builder1.prototype, \"browserTrackingDisabled\", {\n        get: function() {\n            return Builder1.isBrowser && Boolean(window.builderNoTrack || !navigator.cookieEnabled);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Builder1.prototype, \"canTrack\", {\n        get: function() {\n            return this.canTrack$.value;\n        },\n        set: function(canTrack) {\n            this.hasOverriddenCanTrack = true;\n            if (this.canTrack !== canTrack) {\n                this.canTrack$.next(canTrack);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Builder1.prototype, \"apiVersion\", {\n        get: function() {\n            return this.apiVersion$.value;\n        },\n        set: function(apiVersion) {\n            if (this.apiVersion !== apiVersion) {\n                this.apiVersion$.next(apiVersion);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Builder1.prototype, \"apiEndpoint\", {\n        get: function() {\n            return this.apiEndpoint$.value;\n        },\n        set: function(apiEndpoint) {\n            if (this.apiEndpoint !== apiEndpoint) {\n                this.apiEndpoint$.next(apiEndpoint);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Builder1.prototype, \"editingMode\", {\n        get: function() {\n            return this.editingMode$.value;\n        },\n        set: function(value) {\n            if (value !== this.editingMode) {\n                this.editingMode$.next(value);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Builder1.prototype, \"editingModel\", {\n        get: function() {\n            return this.editingModel$.value;\n        },\n        set: function(value) {\n            if (value !== this.editingModel) {\n                this.editingModel$.next(value);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Builder1.prototype.findParentElement = function(target, callback, checkElement) {\n        if (checkElement === void 0) {\n            checkElement = true;\n        }\n        if (!(target instanceof HTMLElement)) {\n            return null;\n        }\n        var parent1 = checkElement ? target : target.parentElement;\n        do {\n            if (!parent1) {\n                return null;\n            }\n            var matches = callback(parent1);\n            if (matches) {\n                return parent1;\n            }\n        }while (parent1 = parent1.parentElement);\n        return null;\n    };\n    Builder1.prototype.findBuilderParent = function(target) {\n        return this.findParentElement(target, function(el) {\n            var id = el.getAttribute('builder-id') || el.id;\n            return Boolean(id && id.indexOf('builder-') === 0);\n        });\n    };\n    Builder1.prototype.setUserAgent = function(userAgent) {\n        this.userAgent = userAgent || '';\n    };\n    /**\r\n     * Set a hook to modify events being tracked from builder, such as impressions and clicks\r\n     *\r\n     * For example, to track the model ID of each event associated with content for querying\r\n     * by mode, you can do\r\n     *\r\n     *    builder.setTrackingHook((event, context) => {\r\n     *      if (context.content) {\r\n     *        event.data.metadata.modelId = context.content.modelId\r\n     *      }\r\n     *    })\r\n     */ Builder1.prototype.setTrackingHook = function(hook) {\n        this.trackingHooks.push(hook);\n    };\n    Builder1.prototype.track = function(eventName, properties, context) {\n        if (properties === void 0) {\n            properties = {};\n        }\n        // TODO: queue up track requests and fire them off when canTrack set to true - otherwise may get lots of clicks with no impressions\n        if (isIframe || !isBrowser || Builder1.isPreviewing) {\n            return;\n        }\n        var apiKey = this.apiKey;\n        if (!apiKey) {\n            console.error('Builder integration error: Looks like the Builder SDK has not been initialized properly (your API key has not been set). Make sure you are calling `builder.init(\"«YOUR-API-KEY»\");` as early as possible in your application\\'s code.');\n            return;\n        }\n        var eventData = JSON.parse(JSON.stringify({\n            type: eventName,\n            data: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, omit(properties, 'meta')), {\n                metadata: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n                    sdkVersion: Builder1.VERSION,\n                    url: location.href\n                }, properties.meta), properties.metadata),\n                ownerId: apiKey,\n                userAttributes: this.getUserAttributes(),\n                sessionId: this.sessionId,\n                visitorId: this.visitorId\n            })\n        }));\n        for(var _i = 0, _a = this.trackingHooks; _i < _a.length; _i++){\n            var hook = _a[_i];\n            var returnValue = hook(eventData, context || {});\n            if (returnValue) {\n                eventData = returnValue;\n            }\n        }\n        // batch events\n        this.eventsQueue.push(eventData);\n        if (this.canTrack) {\n            this.throttledClearEventsQueue();\n        }\n    };\n    Builder1.prototype.getSessionId = function() {\n        var _this = this;\n        var sessionId = null;\n        try {\n            if (Builder1.isBrowser && typeof sessionStorage !== 'undefined') {\n                sessionId = this.getCookie(sessionStorageKey);\n            }\n        } catch (err) {\n            console.debug('Session storage error', err);\n        // It's ok\n        }\n        if (!sessionId) {\n            sessionId = uuid();\n        }\n        // Give the app a second to start up and set canTrack to false if needed\n        if (Builder1.isBrowser) {\n            setTimeout(function() {\n                try {\n                    if (_this.canTrack) {\n                        _this.setCookie(sessionStorageKey, sessionId, datePlusMinutes(30));\n                    }\n                } catch (err) {\n                    console.debug('Cookie setting error', err);\n                }\n            });\n        }\n        return sessionId;\n    };\n    Builder1.prototype.getVisitorId = function() {\n        var _this = this;\n        if (this.visitorId) {\n            return this.visitorId;\n        }\n        var visitorId = null;\n        try {\n            if (Builder1.isBrowser && typeof localStorage !== 'undefined') {\n                // TODO: cookie instead?\n                visitorId = localStorage.getItem(localStorageKey);\n            }\n        } catch (err) {\n            console.debug('Local storage error', err);\n        // It's ok\n        }\n        if (!visitorId) {\n            visitorId = uuid();\n        }\n        this.visitorId = visitorId;\n        // Give the app a second to start up and set canTrack to false if needed\n        if (Builder1.isBrowser) {\n            setTimeout(function() {\n                try {\n                    if (_this.canTrack && typeof localStorage !== 'undefined' && visitorId) {\n                        localStorage.setItem(localStorageKey, visitorId);\n                    }\n                } catch (err) {\n                    console.debug('Session storage error', err);\n                }\n            });\n        }\n        return visitorId;\n    };\n    Builder1.prototype.trackImpression = function(contentId, variationId, properties, context) {\n        if (isIframe || !isBrowser || Builder1.isPreviewing) {\n            return;\n        }\n        // TODO: use this.track method\n        this.track('impression', {\n            contentId: contentId,\n            variationId: variationId !== contentId ? variationId : undefined,\n            metadata: properties\n        }, context);\n    };\n    Builder1.prototype.trackConversion = function(amount, contentId, variationId, customProperties, context) {\n        if (isIframe || !isBrowser || Builder1.isPreviewing) {\n            return;\n        }\n        var meta = typeof contentId === 'object' ? contentId : customProperties;\n        var useContentId = typeof contentId === 'string' ? contentId : undefined;\n        this.track('conversion', {\n            amount: amount,\n            variationId: variationId,\n            meta: meta,\n            contentId: useContentId\n        }, context);\n    };\n    Object.defineProperty(Builder1.prototype, \"isDevelopmentEnv\", {\n        // TODO: set this for QA\n        get: function() {\n            // Automatic determining of development environment\n            return Builder1.isIframe || Builder1.isBrowser && (location.hostname === 'localhost' || location.port !== '') || this.env !== 'production';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Builder1.prototype.trackInteraction = function(contentId, variationId, alreadyTrackedOne, event, context) {\n        if (alreadyTrackedOne === void 0) {\n            alreadyTrackedOne = false;\n        }\n        if (isIframe || !isBrowser || Builder1.isPreviewing) {\n            return;\n        }\n        var target = event && event.target;\n        var targetBuilderElement = target && this.findBuilderParent(target);\n        function round(num) {\n            return Math.round(num * 1000) / 1000;\n        }\n        var metadata = {};\n        if (event) {\n            var clientX = event.clientX, clientY = event.clientY;\n            if (target) {\n                var targetRect = target.getBoundingClientRect();\n                var xOffset = clientX - targetRect.left;\n                var yOffset = clientY - targetRect.top;\n                var xRatio = round(xOffset / targetRect.width);\n                var yRatio = round(yOffset / targetRect.height);\n                metadata.targetOffset = {\n                    x: xRatio,\n                    y: yRatio\n                };\n            }\n            if (targetBuilderElement) {\n                var targetRect = targetBuilderElement.getBoundingClientRect();\n                var xOffset = clientX - targetRect.left;\n                var yOffset = clientY - targetRect.top;\n                var xRatio = round(xOffset / targetRect.width);\n                var yRatio = round(yOffset / targetRect.height);\n                metadata.builderTargetOffset = {\n                    x: xRatio,\n                    y: yRatio\n                };\n            }\n        }\n        var builderId = targetBuilderElement && (targetBuilderElement.getAttribute('builder-id') || targetBuilderElement.id);\n        if (builderId && targetBuilderElement) {\n            metadata.builderElementIndex = [].slice.call(document.getElementsByClassName(builderId)).indexOf(targetBuilderElement);\n        }\n        this.track('click', {\n            contentId: contentId,\n            metadata: metadata,\n            variationId: variationId !== contentId ? variationId : undefined,\n            unique: !alreadyTrackedOne,\n            targetBuilderElement: builderId || undefined\n        }, context);\n    };\n    Builder1.prototype.component = function(info) {\n        if (info === void 0) {\n            info = {};\n        }\n        return Builder1.component(info);\n    };\n    Object.defineProperty(Builder1.prototype, \"apiKey\", {\n        get: function() {\n            return this.apiKey$.value;\n        },\n        set: function(key) {\n            this.apiKey$.next(key);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Builder1.prototype, \"authToken\", {\n        get: function() {\n            return this.authToken$.value;\n        },\n        set: function(token) {\n            this.authToken$.next(token);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Builder1.prototype.modifySearch = function(search) {\n        return search.replace(/(^|&|\\?)(builder_.*?)=/gi, function(_match, group1, group2) {\n            return group1 + group2.replace(/_/g, '.') + '=';\n        });\n    };\n    Builder1.prototype.setTestsFromUrl = function() {\n        var search = this.getLocation().search;\n        try {\n            var params = QueryString.parseDeep(this.modifySearch(search || '').substr(1));\n            var tests = params.builder && params.builder.tests;\n            if (tests && typeof tests === 'object') {\n                for(var key in tests){\n                    if (tests.hasOwnProperty(key)) {\n                        this.setTestCookie(key, tests[key]);\n                    }\n                }\n            }\n        } catch (e) {\n            console.debug('Error parsing tests from URL', e);\n        }\n    };\n    Builder1.prototype.resetOverrides = function() {\n        // Ugly - pass down instances per request instead using react context\n        // or use builder.get('foo', { req, res }) in react...........\n        Builder1.overrideUserAttributes = {};\n        this.cachebust = false;\n        this.noCache = false;\n        this.preview = false;\n        this.editingModel = null;\n        this.overrides = {};\n        this.env = 'production';\n        this.userAgent = '';\n        this.request = undefined;\n        this.response = undefined;\n    };\n    Builder1.prototype.getOverridesFromQueryString = function() {\n        var location1 = this.getLocation();\n        try {\n            var params = QueryString.parseDeep(this.modifySearch(location1.search || '').substr(1));\n            var builder1 = params.builder;\n            if (builder1) {\n                var userAttributes = builder1.userAttributes, overrides = builder1.overrides, env = builder1.env, host = builder1.host, api = builder1.api, cachebust = builder1.cachebust, noCache = builder1.noCache, preview = builder1.preview, editing = builder1.editing, frameEditing = builder1.frameEditing, options = builder1.options, overrideParams = builder1.params;\n                if (userAttributes) {\n                    this.setUserAttributes(userAttributes);\n                }\n                if (options) {\n                    // picking only locale, includeRefs, and enrich for now\n                    this.queryOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, options.locale && {\n                        locale: options.locale\n                    }), options.includeRefs && {\n                        includeRefs: options.includeRefs\n                    }), options.enrich && {\n                        enrich: options.enrich\n                    });\n                }\n                if (overrides) {\n                    this.overrides = overrides;\n                }\n                if (validEnvList.indexOf(env || api) > -1) {\n                    this.env = env || api;\n                }\n                if (Builder1.isEditing) {\n                    var editingModel = frameEditing || editing || preview;\n                    if (editingModel && editingModel !== 'true') {\n                        this.editingModel = editingModel;\n                    }\n                }\n                if (cachebust) {\n                    this.cachebust = true;\n                }\n                if (noCache) {\n                    this.noCache = true;\n                }\n                if (preview) {\n                    this.preview = true;\n                }\n                if (params) {\n                    this.overrideParams = overrideParams;\n                }\n            }\n        } catch (e) {\n            console.debug('Error parsing overrides from URL', e);\n        }\n    };\n    Builder1.prototype.messageFrameLoaded = function() {\n        var _a;\n        (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\n            type: 'builder.loaded',\n            data: {\n                value: true\n            }\n        }, '*');\n    };\n    Builder1.prototype.bindMessageListeners = function() {\n        var _this = this;\n        addEventListener('message', function(event) {\n            var _a, _b, _c, _d;\n            var isTrusted = Builder1.isTrustedHostForEvent(event);\n            if (!isTrusted) return;\n            var data = event.data;\n            if (data) {\n                switch(data.type){\n                    case 'builder.ping':\n                        {\n                            (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\n                                type: 'builder.pong',\n                                data: {}\n                            }, '*');\n                            break;\n                        }\n                    case 'builder.register':\n                        {\n                            // TODO: possibly do this for all...\n                            if (event.source === window) {\n                                break;\n                            }\n                            var options = data.data;\n                            if (!options) {\n                                break;\n                            }\n                            var type = options.type, info = options.info;\n                            // TODO: all must have name and can't conflict?\n                            var typeList = Builder1.registry[type];\n                            if (!typeList) {\n                                typeList = Builder1.registry[type] = [];\n                            }\n                            typeList.push(info);\n                            Builder1.registryChange.next(Builder1.registry);\n                            break;\n                        }\n                    case 'builder.settingsChange':\n                        {\n                            // TODO: possibly do this for all...\n                            if (event.source === window) {\n                                break;\n                            }\n                            var settings = data.data;\n                            if (!settings) {\n                                break;\n                            }\n                            Object.assign(Builder1.settings, settings);\n                            Builder1.settingsChange.next(Builder1.settings);\n                            break;\n                        }\n                    case 'builder.registerEditor':\n                        {\n                            // TODO: possibly do this for all...\n                            if (event.source === window) {\n                                break;\n                            }\n                            var info_1 = data.data;\n                            if (!info_1) {\n                                break;\n                            }\n                            var hasComponent_1 = !!info_1.component;\n                            Builder1.editors.every(function(thisInfo, index) {\n                                if (info_1.name === thisInfo.name) {\n                                    if (thisInfo.component && !hasComponent_1) {\n                                        return false;\n                                    } else {\n                                        Builder1.editors[index] = thisInfo;\n                                    }\n                                    return false;\n                                }\n                                return true;\n                            });\n                            break;\n                        }\n                    case 'builder.triggerAnimation':\n                        {\n                            Builder1.animator.triggerAnimation(data.data);\n                            break;\n                        }\n                    case 'builder.contentUpdate':\n                        var key = data.data.key || data.data.alias || data.data.entry || data.data.modelName;\n                        var contentData = data.data.data; // hmmm...\n                        var observer = _this.observersByKey[key];\n                        if (observer && !_this.noEditorUpdates[key]) {\n                            observer.next([\n                                contentData\n                            ]);\n                        }\n                        break;\n                    case 'builder.getComponents':\n                        (_b = window.parent) === null || _b === void 0 ? void 0 : _b.postMessage({\n                            type: 'builder.components',\n                            data: Builder1.components.map(function(item) {\n                                return Builder1.prepareComponentSpecToSend(item);\n                            })\n                        }, '*');\n                        break;\n                    case 'builder.editingModel':\n                        _this.editingModel = data.data.model;\n                        break;\n                    case 'builder.registerComponent':\n                        var componentData = data.data;\n                        Builder1.addComponent(componentData);\n                        break;\n                    case 'builder.blockContentLoading':\n                        if (typeof data.data.model === 'string') {\n                            _this.blockContentLoading = data.data.model;\n                        }\n                        break;\n                    case 'builder.editingMode':\n                        var editingMode = data.data;\n                        if (editingMode) {\n                            _this.editingMode = true;\n                            document.body.classList.add('builder-editing');\n                        } else {\n                            _this.editingMode = false;\n                            document.body.classList.remove('builder-editing');\n                        }\n                        break;\n                    case 'builder.editingPageMode':\n                        var editingPageMode = data.data;\n                        Builder1.editingPage = editingPageMode;\n                        break;\n                    case 'builder.overrideUserAttributes':\n                        var userAttributes = data.data;\n                        assign(Builder1.overrideUserAttributes, userAttributes);\n                        _this.flushGetContentQueue(true);\n                        break;\n                    case 'builder.overrideTestGroup':\n                        var _e = data.data, variationId = _e.variationId, contentId = _e.contentId;\n                        if (variationId && contentId) {\n                            _this.setTestCookie(contentId, variationId);\n                            _this.flushGetContentQueue(true);\n                        }\n                        break;\n                    case 'builder.evaluate':\n                        {\n                            var text = data.data.text;\n                            var args = data.data.arguments || [];\n                            var id_1 = data.data.id;\n                            // tslint:disable-next-line:no-function-constructor-with-string-args\n                            var fn = new Function(text);\n                            var result = void 0;\n                            var error = null;\n                            try {\n                                result = fn.apply(_this, args);\n                            } catch (err) {\n                                error = toError(err);\n                            }\n                            if (error) {\n                                (_c = window.parent) === null || _c === void 0 ? void 0 : _c.postMessage({\n                                    type: 'builder.evaluateError',\n                                    data: {\n                                        id: id_1,\n                                        error: error.message\n                                    }\n                                }, '*');\n                            } else {\n                                if (result && typeof result.then === 'function') {\n                                    result.then(function(finalResult) {\n                                        var _a;\n                                        (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\n                                            type: 'builder.evaluateResult',\n                                            data: {\n                                                id: id_1,\n                                                result: finalResult\n                                            }\n                                        }, '*');\n                                    }).catch(console.error);\n                                } else {\n                                    (_d = window.parent) === null || _d === void 0 ? void 0 : _d.postMessage({\n                                        type: 'builder.evaluateResult',\n                                        data: {\n                                            result: result,\n                                            id: id_1\n                                        }\n                                    }, '*');\n                                }\n                            }\n                            break;\n                        }\n                }\n            }\n        });\n    };\n    Object.defineProperty(Builder1.prototype, \"defaultCanTrack\", {\n        get: function() {\n            return Boolean(Builder1.isBrowser && navigator.userAgent.trim() && !navigator.userAgent.match(/bot|crawler|spider|robot|crawling|prerender|google|baidu|bing|msn|duckduckbot|teoma|slurp|yandex|phantom|headless|selenium|puppeteer/i) && !this.browserTrackingDisabled);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Builder1.prototype.init = function(apiKey, canTrack, req, res, authToken, apiVersion) {\n        if (canTrack === void 0) {\n            canTrack = this.defaultCanTrack;\n        }\n        if (req) {\n            this.request = req;\n        }\n        if (res) {\n            this.response = res;\n        }\n        if (!this.hasOverriddenCanTrack) {\n            this.canTrack = canTrack;\n        }\n        this.apiKey = apiKey;\n        if (authToken) {\n            this.authToken = authToken;\n        }\n        if (apiVersion) {\n            this.apiVersion = apiVersion;\n        }\n        return this;\n    };\n    Object.defineProperty(Builder1.prototype, \"previewingModel\", {\n        get: function() {\n            var search = this.getLocation().search;\n            var params = QueryString.parse((search || '').substr(1));\n            return params['builder.preview'];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // TODO: allow adding location object as property and/or in constructor\n    Builder1.prototype.getLocation = function() {\n        var _a;\n        var parsedLocation = {};\n        // in ssr mode\n        if (this.request) {\n            parsedLocation = parse((_a = this.request.url) !== null && _a !== void 0 ? _a : '');\n        } else if (typeof location === 'object') {\n            // in the browser\n            parsedLocation = parse(location.href);\n        }\n        // IE11 bug with parsed path being empty string\n        // causes issues with our user targeting\n        if (parsedLocation.pathname === '') {\n            parsedLocation.pathname = '/';\n        }\n        return parsedLocation;\n    };\n    Builder1.prototype.getUserAttributes = function(userAgent) {\n        if (userAgent === void 0) {\n            userAgent = this.userAgent || '';\n        }\n        var isMobile = {\n            Android: function() {\n                return userAgent.match(/Android/i);\n            },\n            BlackBerry: function() {\n                return userAgent.match(/BlackBerry/i);\n            },\n            iOS: function() {\n                return userAgent.match(/iPhone|iPod/i);\n            },\n            Opera: function() {\n                return userAgent.match(/Opera Mini/i);\n            },\n            Windows: function() {\n                return userAgent.match(/IEMobile/i) || userAgent.match(/WPDesktop/i);\n            },\n            any: function() {\n                return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows();\n            }\n        };\n        var isTablet = userAgent.match(/Tablet|iPad/i);\n        var url = this.getLocation();\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            urlPath: url.pathname,\n            host: url.host || url.hostname,\n            // TODO: maybe an option to choose to target off of mobile/tablet/desktop or just mobile/desktop\n            device: isTablet ? 'tablet' : isMobile.any() ? 'mobile' : 'desktop'\n        }, Builder1.overrideUserAttributes);\n    };\n    Builder1.prototype.setUserAttributes = function(options) {\n        assign(Builder1.overrideUserAttributes, options);\n        if (this.canTrack) {\n            this.setCookie(Builder1.attributesCookieName, JSON.stringify(this.getUserAttributes()));\n        }\n        this.userAttributesChanged.next(options);\n    };\n    /**\r\n     * Set user attributes just for tracking purposes.\r\n     *\r\n     * Do this so properties exist on event objects for querying insights, but\r\n     * won't affect targeting\r\n     *\r\n     * Use this when you want to track properties but don't need to target off\r\n     * of them to optimize cache efficiency\r\n     */ Builder1.prototype.setTrackingUserAttributes = function(attributes) {\n        assign(this.trackingUserAttributes, attributes);\n    };\n    Builder1.prototype.get = function(modelName, options) {\n        var _a;\n        if (options === void 0) {\n            options = {};\n        }\n        var instance = this;\n        var finalLocale = options.locale || ((_a = options.userAttributes) === null || _a === void 0 ? void 0 : _a.locale) || this.getUserAttributes().locale;\n        if (!('noTraverse' in options)) {\n            options.noTraverse = false;\n        }\n        var finalOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, options), finalLocale && {\n            locale: String(finalLocale),\n            userAttributes: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n                locale: String(finalLocale)\n            }, options.userAttributes)\n        });\n        if (!Builder1.isBrowser) {\n            instance = new Builder1(options.apiKey || this.apiKey, options.req, options.res, undefined, options.authToken || this.authToken, options.apiVersion || this.apiVersion);\n            instance.apiEndpoint = this.apiEndpoint;\n            instance.setUserAttributes(this.getUserAttributes());\n        } else {\n            // NOTE: All these are when .init is not called and the customer\n            // directly calls .get on the singleton instance of Builder\n            if (options.apiKey && !this.apiKey) {\n                this.apiKey = options.apiKey;\n            }\n            if (options.authToken && !this.authToken) {\n                this.authToken = options.authToken;\n            }\n            if (options.apiVersion && !this.apiVersion) {\n                this.apiVersion = options.apiVersion;\n            }\n        }\n        return instance.queueGetContent(modelName, finalOptions).map(/* map( */ function(matches) {\n            var match = matches && matches[0];\n            if (Builder1.isStatic) {\n                return match;\n            }\n            var matchData = match && match.data;\n            if (!matchData) {\n                return null;\n            }\n            if (typeof matchData.blocksString !== 'undefined') {\n                matchData.blocks = JSON.parse(matchData.blocksString);\n                delete matchData.blocksString;\n            }\n            return {\n                // TODO: add ab test info here and other high level stuff\n                data: matchData,\n                id: match.id,\n                variationId: match.testVariationId || match.variationId || null,\n                testVariationId: match.testVariationId || match.variationId || null,\n                testVariationName: match.testVariationName || null,\n                lastUpdated: match.lastUpdated || null\n            };\n        });\n    // );\n    };\n    // TODO: entry id in options\n    Builder1.prototype.queueGetContent = function(modelName, options) {\n        var _this = this;\n        if (options === void 0) {\n            options = {};\n        }\n        // TODO: if query do modelName + query\n        var key = options.key || options.alias || // TODO: SDKs only pass entry key when given to them, and never when editing...\n        // options.entry ||\n        // TODO: this is ugly - instead of multiple of same model with different options are sent\n        // say requires key/alias. Or if not perhaps make a reliable hash of the options and use that.\n        // TODO: store last user state on last request and if user attributes different now\n        // give a warning that need to use keys to request new contente\n        // (options &&\n        //   Object.keys(options).filter(key => key !== 'model').length &&\n        //   JSON.stringify({ model: modelName, ...options, initialContent: undefined })) ||\n        modelName;\n        var isEditingThisModel = this.editingModel === modelName;\n        // TODO: include params in this key........\n        var currentObservable = this.observersByKey[key];\n        // if (options.query && options.query._id) {\n        //   this.flushGetContentQueue([options])\n        // }\n        if (this.apiKey === 'DEMO' && !this.overrides[key] && !options.initialContent) {\n            options.initialContent = [];\n        }\n        var initialContent = options.initialContent;\n        // TODO: refresh option in options\n        if (currentObservable && (!currentObservable.value || options.cache)) {\n            // TODO: test if this ran, otherwise on 404 some observers may never be called...\n            if (currentObservable.value) {\n                nextTick(function() {\n                    // TODO: return a new observable and only that one fires subscribers, don't refire for existing ones\n                    currentObservable.next(currentObservable.value);\n                });\n            }\n            return currentObservable;\n        }\n        if (isEditingThisModel) {\n            if (Builder1.isBrowser) {\n                parent.postMessage({\n                    type: 'builder.updateContent',\n                    data: {\n                        options: options\n                    }\n                }, '*');\n            }\n        }\n        if (!initialContent /* || isEditingThisModel */ ) {\n            if (!this.getContentQueue) {\n                this.getContentQueue = [];\n            }\n            this.getContentQueue.push((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, options), {\n                model: modelName,\n                key: key\n            }));\n            if (this.getContentQueue && this.getContentQueue.length >= this.contentPerRequest) {\n                var queue_1 = this.getContentQueue.slice();\n                this.getContentQueue = [];\n                nextTick(function() {\n                    _this.flushGetContentQueue(false, queue_1);\n                });\n            } else {\n                nextTick(function() {\n                    _this.flushGetContentQueue();\n                });\n            }\n        }\n        var observable = new BehaviorSubject(null);\n        this.observersByKey[key] = observable;\n        if (options.noEditorUpdates) {\n            this.noEditorUpdates[key] = true;\n        }\n        if (initialContent) {\n            nextTick(function() {\n                // TODO: need to testModify this I think...?\n                observable.next(initialContent);\n            });\n        }\n        return observable;\n    };\n    // this is needed to satisfy the Angular SDK, which used to rely on the more complex version of `requestUrl`.\n    // even though we only use `fetch()` now, we prefer to keep the old behavior and use the `fetch` that comes from\n    // the core SDK for consistency\n    Builder1.prototype.requestUrl = function(url, options) {\n        return getFetch()(url, this.addSdkHeaders(options)).then(function(res) {\n            return res.json();\n        });\n    };\n    Object.defineProperty(Builder1.prototype, \"host\", {\n        get: function() {\n            switch(this.env){\n                case 'qa':\n                    return 'https://qa.builder.io';\n                case 'test':\n                    return 'https://builder-io-test.web.app';\n                case 'fast':\n                    return 'https://fast.builder.io';\n                case 'cloud':\n                    return 'https://cloud.builder.io';\n                case 'cdn2':\n                    return 'https://cdn2.builder.io';\n                case 'cdn-qa':\n                    return 'https://cdn-qa.builder.io';\n                case 'development':\n                case 'dev':\n                    return 'http://localhost:5000';\n                case 'cdn-prod':\n                    return 'https://cdn.builder.io';\n                default:\n                    return Builder1.overrideHost || 'https://cdn.builder.io';\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Builder1.prototype.getSdkHeaders = function() {\n        if (!Builder1.sdkInfo) {\n            return {};\n        }\n        return {\n            'X-Builder-SDK': Builder1.sdkInfo.name,\n            'X-Builder-SDK-GEN': '1',\n            'X-Builder-SDK-Version': Builder1.sdkInfo.version\n        };\n    };\n    Builder1.prototype.addSdkHeaders = function(fetchOptions) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, fetchOptions), {\n            headers: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, fetchOptions.headers), this.getSdkHeaders())\n        });\n    };\n    Builder1.prototype.makeFetchApiCall = function(url, requestOptions) {\n        return getFetch()(url, this.addSdkHeaders(requestOptions));\n    };\n    /**\r\n     * Flatten a nested MongoDB query object into a flat object with dot-separated keys.\r\n     * $ keys are not flattened and are left as is.\r\n     *\r\n     * { foo: { bar: { $gt: 5 }}} -> { 'foo.bar': { '$gt': 5 }}\r\n     * { foo: {'bar.id': { $elemMatch: { 'baz.id': { $in: ['abc', 'bcd'] }}}}} -> { 'foo.bar.id': { '$elemMatch': { 'baz.id': { '$in': ['abc', 'bcd'] }}}}\r\n     */ Builder1.prototype.flattenMongoQuery = function(obj, _current, _res) {\n        if (_res === void 0) {\n            _res = {};\n        }\n        for(var key in obj){\n            var value = obj[key];\n            var newKey = _current ? _current + '.' + key : key;\n            if (value && typeof value === 'object' && !Array.isArray(value) && !Object.keys(value).find(function(item) {\n                return item.startsWith('$');\n            })) {\n                this.flattenMongoQuery(value, newKey, _res);\n            } else {\n                _res[newKey] = value;\n            }\n        }\n        return _res;\n    };\n    Builder1.prototype.flushGetContentQueue = function(usePastQueue, useQueue) {\n        var _this = this;\n        var _a, _b;\n        if (usePastQueue === void 0) {\n            usePastQueue = false;\n        }\n        if (!this.apiKey) {\n            throw new Error(\"Fetching content failed, expected apiKey to be defined instead got: \".concat(this.apiKey));\n        }\n        if (this.apiVersion) {\n            if (![\n                'v1',\n                'v3'\n            ].includes(this.apiVersion)) {\n                throw new Error(\"Invalid apiVersion: expected 'v1' or 'v3', received '\".concat(this.apiVersion, \"'\"));\n            }\n        } else {\n            this.apiVersion = DEFAULT_API_VERSION;\n        }\n        if (!usePastQueue && !this.getContentQueue) {\n            return;\n        }\n        var queue = useQueue || (usePastQueue ? this.priorContentQueue : this.getContentQueue) || [];\n        // TODO: do this on every request send?\n        this.getOverridesFromQueryString();\n        var queryParams = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            // TODO: way to force a request to be in a separate queue. or just lower queue limit to be 1 by default\n            omit: (_a = queue[0].omit) !== null && _a !== void 0 ? _a : 'meta.componentsUsed',\n            apiKey: this.apiKey\n        }, queue[0].options), this.queryOptions);\n        if (queue[0].locale) {\n            queryParams.locale = queue[0].locale;\n        }\n        if (queue[0].fields) {\n            queryParams.fields = queue[0].fields;\n        }\n        if (queue[0].format) {\n            queryParams.format = queue[0].format;\n        }\n        if ('noTraverse' in queue[0]) {\n            queryParams.noTraverse = queue[0].noTraverse;\n        }\n        if ('includeUnpublished' in queue[0]) {\n            queryParams.includeUnpublished = queue[0].includeUnpublished;\n        }\n        if (queue[0].sort) {\n            queryParams.sort = queue[0].sort;\n        }\n        var pageQueryParams = (typeof location !== 'undefined' ? QueryString.parseDeep(location.search.substr(1)) : undefined) || {}; // TODO: WHAT about SSR (this.request) ?\n        var userAttributes = // FIXME: HACK: only checks first in queue for user attributes overrides, should check all\n        // TODO: merge user attributes provided here with defaults and current user attiributes (?)\n        queue && queue[0].userAttributes ? queue[0].userAttributes : this.targetContent ? this.getUserAttributes() : {\n            urlPath: this.getLocation().pathname\n        };\n        var fullUrlQueueItem = queue.find(function(item) {\n            return !!item.includeUrl;\n        });\n        if (fullUrlQueueItem) {\n            var location_1 = this.getLocation();\n            if (location_1.origin) {\n                queryParams.url = \"\".concat(location_1.origin).concat(location_1.pathname).concat(location_1.search);\n            }\n        }\n        var urlQueueItem = useQueue === null || useQueue === void 0 ? void 0 : useQueue.find(function(item) {\n            return item.url;\n        });\n        if (urlQueueItem === null || urlQueueItem === void 0 ? void 0 : urlQueueItem.url) {\n            userAttributes.urlPath = urlQueueItem.url.split('?')[0];\n        }\n        // TODO: merge in the attribute from query string ones\n        // TODO: make this an option per component/request\n        queryParams.userAttributes = JSON.stringify(userAttributes);\n        if (!usePastQueue && !useQueue) {\n            this.priorContentQueue = queue;\n            this.getContentQueue = null;\n        }\n        var cachebust = this.cachebust || isIframe || pageQueryParams.cachebust || pageQueryParams['builder.cachebust'];\n        if (cachebust || this.env !== 'production') {\n            queryParams.cachebust = true;\n        }\n        if (Builder1.isEditing) {\n            queryParams.isEditing = true;\n        }\n        if (this.noCache || this.env !== 'production') {\n            queryParams.noCache = true;\n        }\n        if (size(this.overrides)) {\n            for(var key in this.overrides){\n                if (this.overrides.hasOwnProperty(key)) {\n                    queryParams[\"overrides.\".concat(key)] = this.overrides[key];\n                }\n            }\n        }\n        for(var _i = 0, queue_2 = queue; _i < queue_2.length; _i++){\n            var options = queue_2[_i];\n            var format_1 = options.format;\n            if (format_1) {\n                queryParams.format = format_1;\n            }\n            // TODO: remove me and make permodel\n            if (options.static) {\n                queryParams.static = options.static;\n            }\n            if (options.cachebust) {\n                queryParams.cachebust = options.cachebust;\n            }\n            if (isPositiveNumber(options.cacheSeconds)) {\n                queryParams.cacheSeconds = options.cacheSeconds;\n            }\n            if (isPositiveNumber(options.staleCacheSeconds)) {\n                queryParams.staleCacheSeconds = options.staleCacheSeconds;\n            }\n            if (this.apiEndpoint === 'content') {\n                queryParams.includeRefs = true;\n            }\n            var properties = [\n                'prerender',\n                'extractCss',\n                'limit',\n                'offset',\n                'query',\n                'preview',\n                'model',\n                'entry',\n                'rev',\n                'static',\n                'includeRefs'\n            ];\n            for(var _c = 0, properties_1 = properties; _c < properties_1.length; _c++){\n                var key = properties_1[_c];\n                var value = options[key];\n                if (value !== undefined) {\n                    if (this.apiEndpoint === 'query') {\n                        queryParams.options = queryParams.options || {};\n                        queryParams.options[options.key] = queryParams.options[options.key] || {};\n                        queryParams.options[options.key][key] = JSON.stringify(value);\n                    } else {\n                        queryParams[key] = JSON.stringify(value);\n                    }\n                }\n            }\n        }\n        if (this.preview && this.previewingModel === ((_b = queue === null || queue === void 0 ? void 0 : queue[0]) === null || _b === void 0 ? void 0 : _b.model)) {\n            queryParams.preview = 'true';\n        }\n        var hasParams = Object.keys(queryParams).length > 0;\n        // TODO: option to force dev or qa api here\n        var host = this.host;\n        var keyNames = queue.map(function(item) {\n            return encodeURIComponent(item.key);\n        }).join(',');\n        if (this.overrideParams) {\n            var params = omit(QueryString.parse(this.overrideParams), 'apiKey');\n            assign(queryParams, params);\n        }\n        var format = queryParams.format;\n        var isApiCallForCodegen = format === 'solid' || format === 'react';\n        var isApiCallForCodegenOrQuery = isApiCallForCodegen || this.apiEndpoint === 'query';\n        if (this.apiEndpoint === 'content') {\n            if (queue[0].query) {\n                delete queryParams.query;\n                var objectToFlatten = {\n                    query: queue[0].query\n                };\n                var flattened = this.flattenMongoQuery(objectToFlatten);\n                for(var key in flattened){\n                    queryParams[key] = JSON.stringify(flattened[key]);\n                }\n            }\n        }\n        var queryStr = QueryString.stringifyDeep(queryParams);\n        var fetchOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            headers: {}\n        }, queue[0].fetchOptions);\n        if (this.authToken) {\n            fetchOptions.headers = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, fetchOptions.headers), {\n                Authorization: \"Bearer \".concat(this.authToken)\n            });\n        }\n        var url;\n        if (isApiCallForCodegen) {\n            url = \"\".concat(host, \"/api/v1/codegen/\").concat(this.apiKey, \"/\").concat(keyNames);\n        } else if (this.apiEndpoint === 'query') {\n            url = \"\".concat(host, \"/api/v3/query/\").concat(this.apiKey, \"/\").concat(keyNames);\n        } else {\n            url = \"\".concat(host, \"/api/v3/content/\").concat(queue[0].model);\n        }\n        url = url + (queryParams && hasParams ? \"?\".concat(queryStr) : '');\n        var promise = this.makeFetchApiCall(url, fetchOptions).then(function(res) {\n            return res.json();\n        }).then(function(result) {\n            for(var _i = 0, queue_3 = queue; _i < queue_3.length; _i++){\n                var options = queue_3[_i];\n                var keyName = options.key;\n                if (options.model === _this.blockContentLoading && !options.noEditorUpdates) {\n                    continue;\n                }\n                var isEditingThisModel = _this.editingModel === options.model;\n                if (isEditingThisModel && Builder1.isEditing) {\n                    parent.postMessage({\n                        type: 'builder.updateContent',\n                        data: {\n                            options: options\n                        }\n                    }, '*');\n                // return;\n                }\n                var observer = _this.observersByKey[keyName];\n                if (!observer) {\n                    return;\n                }\n                var data = isApiCallForCodegenOrQuery ? result[keyName] : result.results;\n                var sorted = data; // sortBy(data, item => item.priority);\n                if (data) {\n                    var testModifiedResults = Builder1.isServer ? sorted : _this.processResultsForTests(sorted);\n                    observer.next(testModifiedResults);\n                } else {\n                    var search = _this.getLocation().search;\n                    if ((search || '').includes('builder.preview=' + options.model)) {\n                        var previewData = {\n                            id: 'preview',\n                            name: 'Preview',\n                            data: {}\n                        };\n                        observer.next([\n                            previewData\n                        ]);\n                    }\n                    observer.next([]);\n                }\n            }\n        }, function(err) {\n            for(var _i = 0, queue_4 = queue; _i < queue_4.length; _i++){\n                var options = queue_4[_i];\n                var observer = _this.observersByKey[options.key];\n                if (!observer) {\n                    return;\n                }\n                observer.error(err);\n            }\n        });\n        return promise;\n    };\n    Builder1.prototype.processResultsForTests = function(results) {\n        var _this = this;\n        var _a;\n        var mappedResults = results.map(function(item) {\n            if (!item.variations) {\n                return item;\n            }\n            var cookieValue = _this.getTestCookie(item.id);\n            var cookieVariation = cookieValue === item.id ? item : item.variations[cookieValue];\n            if (cookieVariation) {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, item), {\n                    data: cookieVariation.data,\n                    variationId: cookieValue,\n                    testVariationId: cookieValue,\n                    testVariationName: cookieVariation.name\n                });\n            }\n            if (_this.canTrack && item.variations && size(item.variations)) {\n                var n = 0;\n                var random = Math.random();\n                for(var id in item.variations){\n                    var variation = item.variations[id];\n                    var testRatio = variation.testRatio;\n                    n += testRatio;\n                    if (random < n) {\n                        _this.setTestCookie(item.id, variation.id);\n                        var variationName = variation.name || (variation.id === item.id ? 'Default variation' : '');\n                        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, item), {\n                            data: variation.data,\n                            variationId: variation.id,\n                            testVariationId: variation.id,\n                            variationName: variationName,\n                            testVariationName: variationName\n                        });\n                    }\n                }\n                _this.setTestCookie(item.id, item.id);\n            }\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, item), {\n                variationId: item.id\n            }), item.variations && size(item.variations) && {\n                testVariationId: item.id,\n                testVariationName: 'Default variation'\n            });\n        });\n        if (isIframe) {\n            (_a = window.parent) === null || _a === void 0 ? void 0 : _a.postMessage({\n                type: 'builder.contentResults',\n                data: {\n                    results: mappedResults\n                }\n            }, '*');\n        }\n        return mappedResults;\n    };\n    Builder1.prototype.getTestCookie = function(contentId) {\n        return this.getCookie(\"\".concat(this.testCookiePrefix, \".\").concat(contentId));\n    };\n    Builder1.prototype.setTestCookie = function(contentId, variationId) {\n        if (!this.canTrack) {\n            this.cookieQueue.push([\n                contentId,\n                variationId\n            ]);\n            return;\n        }\n        // 30 days from now\n        var future = new Date();\n        future.setDate(future.getDate() + 30);\n        return this.setCookie(\"\".concat(this.testCookiePrefix, \".\").concat(contentId), variationId, future);\n    };\n    Builder1.prototype.getCookie = function(name) {\n        if (this.cookies) {\n            return this.cookies.get(name);\n        }\n        return Builder1.isBrowser && getCookie(name);\n    };\n    Builder1.prototype.setCookie = function(name, value, expires) {\n        if (this.cookies && !(Builder1.isServer && Builder1.isStatic)) {\n            return this.cookies.set(name, value, {\n                expires: expires,\n                secure: this.getLocation().protocol === 'https:'\n            });\n        }\n        return Builder1.isBrowser && setCookie(name, value, expires);\n    };\n    Builder1.prototype.getContent = function(modelName, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        if (!this.apiKey) {\n            throw new Error(\"Fetching content from model \".concat(modelName, \" failed, expected apiKey to be defined instead got: \").concat(this.apiKey));\n        }\n        return this.queueGetContent(modelName, options);\n    };\n    Builder1.prototype.getAll = function(modelName, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var instance = this;\n        if (!Builder1.isBrowser) {\n            instance = new Builder1(options.apiKey || this.apiKey, options.req, options.res, false, options.authToken || this.authToken, options.apiVersion || this.apiVersion);\n            instance.setUserAttributes(this.getUserAttributes());\n        } else {\n            // NOTE: All these are when .init is not called and the customer\n            // directly calls .get on the singleton instance of Builder\n            if (options.apiKey && !this.apiKey) {\n                this.apiKey = options.apiKey;\n            }\n            if (options.authToken && !this.authToken) {\n                this.authToken = options.authToken;\n            }\n            if (options.apiVersion && !this.apiVersion) {\n                this.apiVersion = options.apiVersion;\n            }\n        }\n        // Set noTraverse=true if NOT already passed by user, for query performance\n        if (!('noTraverse' in options)) {\n            options.noTraverse = true;\n        }\n        return instance.getContent(modelName, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            limit: 30\n        }, options), {\n            key: options.key || // Make the key include all options, so we don't reuse cache for the same content fetched\n            // with different options\n            Builder1.isBrowser ? \"\".concat(modelName, \":\").concat(hash_sum__WEBPACK_IMPORTED_MODULE_0___default()(omit(options, 'initialContent', 'req', 'res'))) : undefined\n        })).promise();\n    };\n    Builder1.VERSION = SDK_VERSION;\n    Builder1.components = [];\n    /**\r\n     * Makes it so that a/b tests generate code like {@link\r\n     * https://www.builder.io/blog/high-performance-no-code#__next:~:text=Static%20generated%20A%2FB%20testing}\r\n     * instead of the old way where we render only one test group at a time on the\r\n     * server. This is the preferred/better way not and we should ultimately make it\r\n     * the default\r\n     */ Builder1.isStatic = true;\n    Builder1.animator = new Animator();\n    Builder1.nextTick = nextTick;\n    Builder1.throttle = throttle;\n    Builder1.editors = [];\n    Builder1.trustedHosts = [\n        '*.beta.builder.io',\n        'beta.builder.io',\n        'builder.io',\n        'localhost',\n        'qa.builder.io'\n    ];\n    Builder1.plugins = [];\n    Builder1.actions = [];\n    Builder1.registry = {};\n    Builder1.attributesCookieName = 'builder.userAttributes';\n    Builder1.registryChange = new BehaviorSubject({});\n    Builder1._editingPage = false;\n    Builder1.isIframe = isIframe;\n    Builder1.isBrowser = isBrowser;\n    Builder1.isReactNative = isReactNative;\n    Builder1.isServer = !isBrowser && !isReactNative;\n    Builder1.previewingModel = Builder1.isBrowser && getQueryParam(location.href, 'builder.preview');\n    Builder1.settings = {};\n    Builder1.settingsChange = new BehaviorSubject({});\n    // TODO: this is quick and dirty, do better implementation later. Also can be unreliable\n    // if page 301s etc. Use a query param instead? also could have issues with redirects. Injecting var could\n    // work but is async...\n    Builder1.isEditing = Boolean(isIframe && (document.referrer && document.referrer.match(/builder\\.io|localhost:1234/) || location.search.indexOf('builder.frameEditing=') !== -1));\n    Builder1.isPreviewing = Boolean(isBrowser && (location.search.indexOf('builder.preview=') !== -1 || location.search.indexOf('builder.frameEditing=') !== -1));\n    Builder1.isReact = false;\n    Builder1.sdkInfo = undefined;\n    Builder1.overrideUserAttributes = {};\n    return Builder1;\n}();\nvar builder = new Builder(null, undefined, undefined, true);\nBuilder.singletonInstance = builder;\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@builder.io/sdk/dist/index.esm.js\n");

/***/ })

};
;