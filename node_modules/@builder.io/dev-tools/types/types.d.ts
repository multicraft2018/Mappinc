export interface DevToolsPath {
    basename: (path: string, suffix?: string) => string;
    extname: (path: string) => string;
    dirname: (path: string) => string;
    isAbsolute: (path: string) => boolean;
    join: (...paths: string[]) => string;
    normalize: (path: string) => string;
    relative: (from: string, to: string) => string;
    resolve: (...pathSegments: string[]) => string;
}
export interface DevToolsSys extends DevToolsPath {
    cwd: () => string;
    getRootDir: () => string;
    exists: (path: string) => Promise<boolean>;
    existsSync: (path: string) => boolean;
    readdir: (path: string) => Promise<string[]>;
    readdirSync: (path: string) => string[];
    readFile: (filePath: string) => Promise<string | null>;
    readFileSync: (filePath: string) => string | null;
    stat: (path: string) => Promise<{
        isDirectory: () => boolean;
        isFile: () => boolean;
    }>;
    writeFile: (filePath: string, content: string) => Promise<void>;
    formatCode: (filePath: string, code: string) => Promise<string>;
    hash: (str: string) => Promise<string>;
    on: (eventName: "change", callback: FileChangeCallback) => void;
    off: (eventName: "change", callback: FileChangeCallback) => void;
    debug: (...args: any[]) => void;
    openEditor: (files: OpenEditorFile[]) => Promise<void>;
    ts: typeof import("typescript");
}
export type FileChangeCallback = (file: FileChangeInfo) => Promise<void> | void;
export interface FileChangeInfo {
    path: string;
    basename: string;
    extname: string;
    dirname: string;
}
export interface EnsureConfigResult {
    content: string;
    filePath: string;
    fileName: string;
    hasContentUpdates: boolean;
}
export interface FrameworkDependency {
    name: string;
    version?: string;
    devDependency?: boolean;
}
export interface BuildToolConfig {
    id: string;
    content: string;
    filePath: string;
}
export interface CreateDevToolsOptions extends DevToolsSys {
    frameworks?: Framework[];
}
export interface FrameworkBuilderPageOptions {
    templateContentId: string;
    title: string;
    pathname: string;
}
export interface DevToolsAdapter {
    getPublicApiKey: () => Promise<PublicApiKeyInfo | null>;
    setPublicApiKey: (opts: SetPublicApiKeyOptions) => Promise<PublicApiKeyInfo>;
    builderPageOptions: () => Promise<FrameworkBuilderPageOptions>;
    ensureBuilderSetup: () => Promise<void>;
    getRegistry: () => Promise<ComponentRegistry>;
    getRegistryPath: () => string;
    loadComponent: (opts: LoadComponentOptions) => Promise<LoadComponent>;
    registerComponent: (opts: RegisterComponentOptions) => Promise<ComponentRegistry>;
    unregisterComponent: (opts: UnregisterComponentOptions) => Promise<ComponentRegistry>;
    setRegisteredComponentInfo: (opts: SetComponentInfoOptions) => Promise<ComponentRegistry>;
    setRegisteredComponentInput: (opts: SetComponentInputOptions) => Promise<ComponentRegistry>;
    getFrameworks: () => Framework[];
    getDependencies: () => FrameworkDependency[];
    getDevRunCommand: () => string;
}
export interface DevTools extends DevToolsAdapter {
    exportRegistry: () => Promise<string>;
    importRegistry: (exportedRegistry: string) => Promise<ComponentRegistry>;
}
export interface DevToolsServerOptions extends DevToolsSys, DevTools {
    getClientId: () => string;
    enableAppWatch: (enabled: boolean) => Promise<boolean>;
    closeAppServer: () => Promise<void>;
    restartAppServer: () => Promise<void>;
    getLocalHostname: () => Promise<string>;
    port?: number;
}
export interface DevToolsHttpServer {
    url: string;
    port: number;
    setContext(ctx: DevToolsServerContext): void;
    close(): Promise<void>;
}
export interface BuilderAppCredentials {
    publicApiKey: string | null;
}
export interface DevToolsServerContext extends Required<DevToolsServerOptions>, BuilderAppCredentials {
    devToolsServerUrl: string;
    isValid: boolean;
    serverShouldRestart: boolean;
}
export interface SetPublicApiKeyOptions {
    publicApiKey: string;
}
export interface PublicApiKeyInfo {
    publicApiKey: string;
    file: string;
}
export interface DevToolsServer {
    getClientInjectScript: () => string;
}
export type ApiRequest = ApiConnectBuilderRequest | ApiDevToolsEnabledRequest | ApiGetRegistryRequest | ApiOpenEditorRequest | ApiRegisterComponentRequest | ApiRegisteredComponentInfoRequest | ApiRegisteredComponentInputRequest | ApiLoadComponentRequest | ApiUnregisterComponentRequest | ApiValidateBuilderRequest;
export interface ApiConnectBuilderRequest {
    type: "connectBuilder";
    data: {
        publicApiKey: string;
        privateAuthKey: string;
    };
}
export interface ApiDevToolsEnabledRequest {
    type: "enableDevTools";
    data: {
        enabled: boolean;
    };
}
export interface ApiGetRegistryRequest {
    type: "getRegistry";
}
export interface ApiOpenEditorRequest {
    type: "openEditor";
    data: OpenEditorFile[];
}
export interface ApiRegisterComponentRequest {
    type: "registerComponent";
    data: RegisterComponentOptions;
}
export interface ApiUnregisterComponentRequest {
    type: "unregisterComponent";
    data: UnregisterComponentOptions;
}
export interface ApiRegisteredComponentInfoRequest {
    type: "setComponentInfo";
    data: SetComponentInfoOptions;
}
export interface ApiRegisteredComponentInputRequest {
    type: "setComponentInput";
    data: SetComponentInputOptions;
}
export interface ApiLoadComponentRequest {
    type: "loadComponent";
    data: LoadComponentOptions;
}
export interface ApiValidateBuilderRequest {
    type: "validateBuilder";
}
export interface ApiResponse {
    data?: any;
    errors?: string[];
}
export interface ValidatedBuilder {
    isValid: boolean;
    step?: "overview";
}
export interface ConnectedBuilder {
    success: boolean;
    pathname: string;
}
export interface Framework {
    name: string;
}
export interface ComponentRegistry {
    components: ComponentInfo[];
    registryPath: string;
    registryDisplayPath: string;
}
export interface ExportedRegistry {
    components: MinimalComponentInfo[];
    version: number;
}
export interface LoadComponent extends ComponentRegistry {
    component: ComponentInfo;
}
export interface LoadComponentOptions {
    cmpId: string;
}
export interface RegisterComponentOptions {
    cmpId: string;
}
export interface UnregisterComponentOptions {
    cmpId: string;
}
export interface SetComponentInfoOptions {
    cmpId: string;
    name?: string;
    image?: string | null;
    description?: string | null;
}
export interface SetComponentInputOptions extends Partial<Omit<ComponentInput, "isRegistered">> {
    cmpId: string;
    name: string;
    registerInput?: boolean;
}
export interface ComponentInfo {
    id: string;
    filePath: string;
    name: string;
    image?: string;
    description?: string;
    inputs: ComponentInput[];
    displayFilePath?: string;
    exportName: string;
    exportType?: ExportType;
    importName: string;
    nodeIndex?: number;
    isRegistered?: boolean;
}
export interface MinimalComponentInfo {
    filePath: string;
    name: string;
    image?: string;
    description?: string;
    inputs: ComponentInput[];
    exportName: string;
}
export interface ComponentInput {
    name: string;
    type: string;
    friendlyName?: string | null;
    defaultValue?: string | number | boolean | null;
    helperText?: string | null;
    required?: boolean | null;
    isRegistered?: boolean;
}
export type ExportType = "default" | "named";
export interface PackageJSON {
    dependencies?: {
        [pkgName: string]: string;
    };
    devDependencies?: {
        [pkgName: string]: string;
    };
    scripts?: {
        [scriptName: string]: string;
    };
    [key: string]: any;
}
export type ModuleFormat = "esm" | "cjs";
export interface OpenEditorFile {
    file: string;
    line?: number;
    column?: number;
}
